<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3160.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>JVM内存管理面试常见问题全解 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">JVM内存管理面试常见问题全解</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div class="toc"> <div class="toc-container-header">目录</div> <ul> <li>一、什么是JVM <ul> <li>1、jvm的三个组成部分</li> </ul> </li> <li>二、类加载系统 <ul> <li> <ul> <li>1、类的加载过程</li> <li>2、类加载器</li> </ul> </li> </ul> </li> <li>三、双亲委派机制 <ul> <li> <ul> <li>1、双亲委派机制介绍</li> <li>2、为什么要双亲委派机制</li> <li>3、双亲委派机制的核心源码</li> <li>4、全盘委托机制</li> <li>5、自定义加载器实现双亲委托机制</li> <li>6、自定义加载器打破双亲委派机制</li> </ul> </li> </ul> </li> <li>四、运行时数据区 <ul> <li> <ul> <li>1、运行时数据区的介绍（也叫JVM的内存模型 JMM、内存区域）</li> <li>2、程序在执行时运行数据区的内存变化</li> </ul> </li> </ul> </li> <li>五、对象的创建流程 <ul> <li> <ul> <li>1、对象创建流程</li> <li>3、内存分配</li> <li>4、设置初值</li> <li>5、设置对象头</li> <li>6、执行init方法</li> </ul> </li> </ul> </li> <li>六、垃圾回收 <ul> <li> <ul> <li>1、对象成为垃圾的判断依据</li> <li>2、 对象中的finalize方法</li> <li>3、对象逃逸</li> </ul> </li> </ul> </li> <li>七、垃圾回收算法 <ul> <li> <ul> <li>1、标记清除算法、复制算法、标记整理算法、分代回收法</li> <li>2、分代回收算法</li> <li>3、对象进⼊到⽼年代的条件</li> </ul> </li> </ul> </li> <li>八、垃圾回收器 <ul> <li> <ul> <li>1.Serial收集器</li> <li>2、Parallel收集器</li> <li>3、ParNew收集器</li> <li>4、CMS收集器</li> <li>5、三⾊标记算法</li> <li>6、垃圾收集器组合⽅案</li> </ul> </li> </ul> </li> <li>九、JVM调优实战 <ul> <li> <ul> <li>1.JVM调优的核⼼参数</li> <li>2.JVM调优实战</li> <li>3、调优的关键点</li> <li>4、结合垃圾收集器的调优策略</li> </ul> </li> </ul> </li> <li>十、JVM性能调优的原则有哪些？</li> <li>十一、什么情况下需要JVM调优？</li> <li>十二、聊聊Java的GC机制 <ul> <li><strong>十三、CMS 和G1 的区别</strong></li> <li>1、使用范围不一样</li> <li>2、STW的时间不一样</li> <li>3、垃圾碎片</li> <li>4、回收算法不一样</li> <li>5、大对象处理不一样</li> <li>6、回收过程不一样 <ul> <li><strong>CMS回收垃圾的4个阶段</strong></li> <li><strong>G1回收垃圾的4个阶段</strong></li> </ul> </li> </ul> </li> </ul> </div> <h1 id="一什么是jvm">一、什么是JVM</h1> <blockquote> <p>Java Virtual Machine（Java虚拟机）是java程序实现跨平台的⼀个重要的⼯具（部件）。</p> </blockquote> <blockquote> <p>HotSpot VM，相信所有Java程序员都知道，它是Sun JDK和OpenJDK中所带的虚拟机，也是⽬前使⽤范围最⼴的Java虚拟机。</p> </blockquote> <blockquote> <p>只要装有JVM的平台，都可以运⾏java程序。那么Java程序在JVM上是怎么被运⾏的？</p> </blockquote> <blockquote> <p>通过介绍以下JVM的三个组成部分，就可以了解到JVM内部的⼯作机制</p> </blockquote> <ul> <li> <blockquote> <p>类加载系统：负责完成类的加载</p> </blockquote> </li> <li> <blockquote> <p>运⾏时数据区：在运⾏Java程序的时候会产⽣的各种数据会保存在运⾏时数据区</p> </blockquote> </li> <li> <blockquote> <p>执⾏引擎：执⾏具体的指令（代码）<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/88d2c22ac867012426d171fe38c4d769.jpg" alt="JVM内存管理面试常见问题全解"></p> </blockquote> </li> </ul> <h2 id="1jvm的三个组成部分">1、jvm的三个组成部分</h2> <ul> <li> <p>类加载系统</p> </li> <li> <p>运行时数据区</p> </li> <li> <p>执行引擎</p> </li> </ul> <h1 id="二类加载系统">二、类加载系统</h1> <h3 id="1类的加载过程">1、类的加载过程</h3> <p>⼀个类被加载进JVM中要经历哪⼏个过程</p> <ul> <li> <blockquote> <p>加载： 通过io流的⽅式把字节码⽂件读⼊到jvm中（⽅法区）</p> </blockquote> </li> <li> <blockquote> <p>校验：通过校验字节码⽂件的头8位的16进制是否是java魔数cafebabe</p> </blockquote> </li> <li> <blockquote> <p>准备：为类中的静态部分开辟空间并赋初始化值</p> </blockquote> </li> <li> <blockquote> <p>解析：将符号引⽤转换成直接引⽤。——静态链接</p> </blockquote> </li> <li> <blockquote> <p>初始化：为类中的静态部分赋指定值并执⾏静态代码块。</p> </blockquote> </li> </ul> <p>类被加载后，类中的类型信息、⽅法信息、属性信息、运⾏时常量池、类加载器的引⽤等信息会被加载到元空间中。</p> <h3 id="2类加载器">2、类加载器</h3> <ol> <li>类是谁来负载加载的？——类加载器</li> <li>Bootstrap ClassLoader 启动类加载器：负载加载jre/lib下的核⼼类库中的类，⽐如rt.jar、charsets.jar</li> </ol> <ul> <li>ExtClassLoader 扩展类加载器：负载加载jre/lib下的ext⽬录内的类</li> </ul> <p>ext 加载路径：System.getProperty("java.ext.dirs");</p> <ul> <li>AppClassLoader 应⽤类加载器：负载加载⽤户⾃⼰写的类</li> </ul> <p>app 加载路径：System.getProperty("java.class.path");</p> <ul> <li>⾃定义类加载器：⾃⼰定义的类加载器，可以打破双亲委派机制。<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/2420764/202204/2420764-20220416214540943-1307878933.png" alt="JVM内存管理面试常见问题全解"></li> </ul> <h1 id="三双亲委派机制">三、双亲委派机制</h1> <h3 id="1双亲委派机制介绍">1、双亲委派机制介绍</h3> <p>当类加载进⾏加载类的时候，类的加载需要向上委托给上⼀级的类加载器，上⼀级继续向上委托，直到启动类加载器。启动类加载器去核⼼类库中找，如果没有该类则向下委派，由下⼀级扩展类加载器去扩展类库中，如果也没有继续向下委派，直到找不到为⽌，则报类找不到的异常。</p> <pre><code>应⽤类加载器怎么加载Student和String呢？需要通过双亲委派机制</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5343abf652d7130203d5ca931f8be98d.jpg" alt="JVM内存管理面试常见问题全解"></p> <h3 id="2为什么要双亲委派机制">2、为什么要双亲委派机制</h3> <p>防⽌核⼼类库中的类被随意篡改</p> <p>防⽌类的重复加载</p> <h3 id="3双亲委派机制的核心源码">3、双亲委派机制的核心源码</h3> <ul> <li>ClassLoader.class</li> </ul> <h3 id="4全盘委托机制">4、全盘委托机制</h3> <p>当⼀个类被当前的ClassLoader加载时，该类中的其他类也会被当前该ClassLoader加载。除⾮指明其他由其他类加载器加载。</p> <h3 id="5自定义加载器实现双亲委托机制">5、自定义加载器实现双亲委托机制</h3> <h3 id="6自定义加载器打破双亲委派机制">6、自定义加载器打破双亲委派机制</h3> <h1 id="四运行时数据区">四、运行时数据区</h1> <h3 id="1运行时数据区的介绍也叫jvm的内存模型-jmm内存区域">1、运行时数据区的介绍（也叫JVM的内存模型 JMM、内存区域）</h3> <p>JMM分成了这么⼏个部分</p> <ol> <li>堆空间（线程共享）：存放new出来的对象</li> <li>元空间（线程共享）：存放类元信息、类的模版、常量池、静态部分</li> <li>线程栈（线程独享）：⽅法的栈帧</li> <li>本地⽅法区（线程独享）：本地⽅法产⽣的数据</li> <li>程序计数器（线程独享）：配合执⾏引擎来执⾏指令<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/2420764/202204/2420764-20220416214540965-944828529.png" alt="JVM内存管理面试常见问题全解"></li> </ol> <h3 id="2程序在执行时运行数据区的内存变化">2、程序在执行时运行数据区的内存变化</h3> <p>线程栈：执⾏⼀个⽅法就会在线程栈中创建⼀个栈帧。</p> <p>栈帧包含如下四个内容：</p> <p>局部变量表：存放⽅法中的局部变量</p> <p>操作数栈：⽤来存放⽅法中要操作的数据</p> <p>动态链接：存放⽅法名和⽅法内容的映射关系，通过⽅法名找到⽅法内容</p> <p>⽅法出⼝：记录⽅法执⾏完后调⽤次⽅法的位置。</p> <h1 id="五对象的创建流程">五、对象的创建流程</h1> <h3 id="1对象创建流程">1、对象创建流程</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c4af8006274e03f0b620364fcd03fd97.jpg" alt="JVM内存管理面试常见问题全解"></p> <p>2、<strong>类加载校验</strong></p> <p>校验该类是否已被加载。主要是检查常量池中是否存在该类的类元信息。如果没有，则需要进⾏加载。</p> <h3 id="3内存分配">3、内存分配</h3> <p><strong>为对象分配内存。具体的分配策略如下：</strong></p> <ul> <li> <p>Bump the Pointer（指针碰撞）：如果内存空间的分配是绝对规整的，则JVM记录当前剩余内存的指针，在已⽤内存分配</p> </li> <li> <p>Free List（空闲列表）：如果内存空间的分配不规整，那么JVM会维护⼀个可⽤内存空间的列表⽤于分配。</p> </li> </ul> <p><strong>对象并发分配存在的问题：</strong></p> <ul> <li> <p>Compare And Swap： ⾃旋分配，如果并发分配失败则重试分配之后的地址</p> </li> <li> <p>Thread Local Allocation Buffer（TLAB）：本地线程分配缓冲，JVM被每个线程分配⼀空间，每个线程在⾃⼰的空间中创建对象（jdk8默认使⽤，之前版本需要通过-XX:+UseTLAB开启）</p> </li> </ul> <h3 id="4设置初值">4、设置初值</h3> <p>根据数据类型，为对象空间初始化赋值</p> <h3 id="5设置对象头">5、设置对象头</h3> <p>为对象设置对象头信息，对象头信息包含以下内瑞：类元信息、对象哈希码、对象年龄、锁状态标志等</p> <ul> <li>对象头中的Mark Work 字段（32位）</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/52d22ad096e14fc905620e4a1f1d2400.jpg" alt="JVM内存管理面试常见问题全解"></p> <ul> <li>对象头中的类型指针</li> </ul> <p>类型指针是用来指向元空间当前类的类元信息。⽐如调⽤类中的⽅法，通过类型指针找到元空间中的该类，再找到相应的⽅法。</p> <p>开启指针压缩后，类型指针只⽤4个字节 储，否则需要8个字节存储</p> <blockquote> <p>过⼤的对象地址，会占⽤更⼤的带宽和增加GC的压⼒。</p> </blockquote> <blockquote> <p>对象中指向其他对象所使⽤的指针：8字节被压缩成4字节。 最早的机器是32位，最⼤⽀持内存 2的32次⽅=4G。现在是64位，2的64次⽅可以表示N个T的内存。内存32G即等于2的35次⽅。如果内存是32G的话，⽤35位表示内存地址，这样过于浪费。如果把35位的数据，根据算法，压缩成32位的数据（也就是4个字节）。在保存时⽤4个字节，再使⽤时使⽤8个字节。之前⽤35位保存内存地址，就可以⽤32位保存。这样8个字节的对象，实际上使⽤32位来保存，这样64位就能表示2个对象。如果内存⼤于32G，指针压缩会失效，会强制使⽤64位来表示对象地址。因此jvm堆内存最好不要⼤于32G。</p> </blockquote> <h3 id="6执行init方法">6、执行init方法</h3> <p>为对象中的属性赋值和执⾏构造⽅法。</p> <h1 id="六垃圾回收">六、垃圾回收</h1> <h3 id="1对象成为垃圾的判断依据">1、对象成为垃圾的判断依据</h3> <p>在堆空间和元空间中，GC这条守护线程会对这些空间开展垃圾回收⼯作，那么GC如何判断这些空间的对象是否是垃圾，有两种算法：</p> <ul> <li>引⽤计数法：</li> </ul> <p>对象被引⽤，则计数器+1，如果计数器是0，那么对象将被判定为是垃圾，于是被回收。但是这种算法没有办法解决循环依赖的对象。因此JVM⽬前的主流⼚商Hotspot没有使⽤这种算法。</p> <ul> <li> <p>可达性分析算法</p> <p>：GC Roots根</p> <ul> <li>gc roots根节点： 在对象的引⽤中，会有这么⼏种对象的变量：来⾃于线程栈中的局部变量表中的变量、静态变量、本地⽅法栈中的变量，这些变量都被称为gc roots根节点</li> </ul> </li> <li> <p>判断依据：gc在扫描堆空间中的某个节点时，向上遍历，看看能不能遍历到gc roots根节点，如果不能，那么意味着这个对象是垃圾。</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3b14ff82faf1cfffdae267c1997fb7c1.jpg" alt="JVM内存管理面试常见问题全解"></p> <h3 id="2-对象中的finalize方法">2、 对象中的finalize方法</h3> <blockquote> <p>Object类中有⼀个finalize⽅法，也就是说任何⼀个对象都有finalize⽅法。这个⽅法是对象被回收之前的最后⼀根救命稻草。</p> </blockquote> <ul> <li> <blockquote> <p>GC在垃圾对象回收之前，先标记垃圾对象，被标记的对象的finalize⽅法将被调⽤</p> </blockquote> </li> <li> <blockquote> <p>调⽤finalize⽅法如果对象被引⽤，那么第⼆次标记该对象，被标记的对象将移除出即将被回收的集合，继续存活</p> </blockquote> </li> <li> <blockquote> <p>调⽤finalize⽅法如果对象没有被引⽤，那么将会被回收</p> </blockquote> </li> <li> <blockquote> <p>注意，finalize⽅法只会被调⽤⼀次。</p> </blockquote> </li> </ul> <h3 id="3对象逃逸">3、对象逃逸</h3> <p>在jdk1.7之前，对象的创建都是在堆空间中创建，但是会有个问题，⽅法中的未被外部访问的对象这种对象没有被外部访问，且在堆空间上频繁创建，当⽅法结束，需要被gc，浪费了性能。所以在1.7之后，就会进⾏⼀次逃逸分析（默认开启），于是这样的对象就直接在栈上创建，随着⽅法的出栈⽽被销毁，不需要进⾏gc。</p> <p><strong>在栈上分配内存的时候</strong>：会把<code>聚合量</code>替换成标量，来减少栈空间的开销，也为了防⽌栈上没</p> <p>有⾜够连续的空间直接存放对象。</p> <p><code>标量</code>：java中的基本数据类型（不可再分）</p> <p><code>聚合量</code>：引⽤数据类型。</p> <h1 id="七垃圾回收算法">七、垃圾回收算法</h1> <h3 id="1标记清除算法复制算法标记整理算法分代回收法">1、标记清除算法、复制算法、标记整理算法、分代回收法</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/4e5947dd2493adc62ef10c140f283b32.jpg" alt="JVM内存管理面试常见问题全解"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9df23a5d4ece341995f7a7502930520d.jpg" alt="JVM内存管理面试常见问题全解"></p> <h3 id="2分代回收算法">2、分代回收算法</h3> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a5938758b4268b125185d3c76c55961e.jpg" alt="JVM内存管理面试常见问题全解"></p> <ol> <li>堆空间被分成了新⽣代（1/3）和⽼年代（2/3），新⽣代中被分成了eden（8/10）、survivor1(1/10)、survivor2(1/10)</li> <li>对象的创建在eden，如果放不下则触发minor gc</li> <li>对象经过⼀次minorgc 后存活的对象会被放⼊到survivor区，并且年龄+1</li> <li>survivor区执⾏的复制算法，当对象年龄到达15.进⼊到⽼年代。</li> <li>如果⽼年代放满。就会触发Full GC</li> </ol> <h3 id="3对象进到年代的条件">3、对象进⼊到⽼年代的条件</h3> <ul> <li>⼤对象直接进⼊到⽼年代：⼤对象可以通过参数设置⼤⼩，多⼤的对象被认为是⼤对象。</li> </ul> <p><strong>-XX:PretenureSizeThreshold</strong></p> <ul> <li>当对象的年龄到达15岁时将进⼊到⽼年代，这个年龄可以通过这个参数设置：</li> </ul> <p><strong>XX:MaxTenuringThreshold</strong></p> <ul> <li>根据对象动态年龄判断，如果s区中的对象总和超过了s区中的50%，那么下⼀次做复制的时候，把年龄⼤于等于这次最⼤年龄的对象都⼀次性全部放⼊到⽼年代。</li> <li>⽼年代空间分配担保机制 ：在minor gc时，检查⽼年代剩余可⽤空间是否⼤于年轻代⾥现有的所有对象（包含垃圾）。如果⼤于等于，则做minor gc。如果⼩于，看下是否配置了担保参数的配置：-XX: -HandlePromotionFailure ，如果配置了，那么判断⽼年代剩余的空间是否⼩于历史每次minor gc 后进⼊⽼年代的对象的平均⼤⼩。如果是，则直接full gc，减少⼀次minor gc。如果不是，执⾏minor gc。如果没有担保机制，直接full gc。<br /><img decoding="async" src="https://img2022.cnblogs.com/blog/2420764/202204/2420764-20220416214540978-49569460.png" alt="JVM内存管理面试常见问题全解"></li> </ul> <h1 id="八垃圾回收器">八、垃圾回收器</h1> <h3 id="1serial收集器">1.Serial收集器</h3> <p>-XX:+UseSerialGC -</p> <p>XX:+UseSerialOldGC</p> <p>单线程执⾏垃圾收集，收集过程中会有较⻓的STW（stop the world），在GC时⼯作线程不能⼯作。虽然STW较⻓，但简单、直接。</p> <p>新⽣代采⽤复制算法，⽼年代采⽤标记-整理算法。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c8cbf899ba798538333563e8cc5d6d10.jpg" alt="JVM内存管理面试常见问题全解"></p> <h3 id="2parallel收集器">2、Parallel收集器</h3> <p>-XX:+UseParallelGC</p> <p>-XX:+UseParallelOldGC</p> <p>使⽤多线程进⾏GC，会充分利⽤cpu，但是依然会有stw，这是jdk8默认使⽤的新⽣代和⽼年代的垃圾收集器。充分利⽤CPU资源，吞吐量⾼。</p> <p>新⽣代采⽤复制算法，⽼年代采⽤标记-整理算法。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/440bf4fa2d84630aa6d478c0b1b253e4.jpg" alt="JVM内存管理面试常见问题全解"></p> <h3 id="3parnew收集器">3、ParNew收集器</h3> <p>-XX:+UseParNewGC</p> <p>⼯作原理和Parallel收集器⼀样，都是使⽤多线程进⾏GC，但是区别在于ParNew收集器可以和CMS收集器配合⼯作。主流的⽅案：</p> <p>ParNew收集器负责收集新⽣代。CMS负责收集⽼年代。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5de4466ba5af8fd9764f4388baa4226b.jpg" alt="JVM内存管理面试常见问题全解"></p> <h3 id="4cms收集器">4、CMS收集器</h3> <p>-XX:+UseConcMarkSweepGC</p> <p>⽬标：尽量减少stw的时间，提升⽤户的体验。真正做到gc线程和⽤户线程⼏乎同时⼯作。CMS采⽤标记-清除算法</p> <ul> <li> <p>初始标记： 暂停所有的其他线程(STW)，并记录gc roots直接能引⽤的对象。</p> </li> <li> <p>并发标记：从GC Roots的直接关联对象开始遍历整个对象图的过程， 这个过程耗时较⻓但是不需要STW，可以与垃圾收集线程⼀起并发运⾏。这个过程中，⽤户线程和GC线程并发，可能会有导致已经标记过的对象状态发⽣改变。</p> </li> <li> <p>重新标记：为了修正并发标记期间因为⽤户程序继续运⾏⽽导致标记产⽣变动的那⼀部分对象的标记记录，这个阶段的停顿时间⼀般会⽐初始标记阶段的时间稍⻓，远远⽐并发标记阶段时间短。主要⽤到三⾊标记⾥的算法做重新标记。</p> </li> <li> <p>并发清理：开启⽤户线程，同时GC线程开始对未标记的区域做清扫。这个阶段如果有新增对象会被标记为⿊⾊不做任何处理。</p> </li> <li> <p>并发重置：重置本次GC过程中的标记数据。</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9212e83bf2470c514210d3ddd4446c66.jpg" alt="JVM内存管理面试常见问题全解"></p> <h3 id="5三标记算法">5、三⾊标记算法</h3> <ul> <li> <p>在并发标记阶段，对象的状态可能发⽣改变，GC在进⾏可达性分析算法分析对象时，⽤三⾊来标识对象的状态</p> </li> <li> <p>灰⾊：这个对象被GC Roots遍历过但其部分的引⽤没有被GC Roots遍历。在重新标记时重新遍历灰⾊对象。</p> </li> <li> <p>⽩⾊：这个对象没有被GC Roots遍历过。在重新标记时该对象如果是⽩⾊的话，那么将会被回收。</p> </li> </ul> <h3 id="6垃圾收集器组合案">6、垃圾收集器组合⽅案</h3> <p>不同的垃圾收集器可以组合使⽤，在使⽤时选择适合当前业务场景的组合。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/39fe781fd8f2c0a55f303703bc4ea567.jpg" alt="JVM内存管理面试常见问题全解"></p> <h1 id="九jvm调优实战">九、JVM调优实战</h1> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/69490ce06bfe54802ce02b5655328cc4.jpg" alt="JVM内存管理面试常见问题全解"></p> <h3 id="1jvm调优的核参数">1.JVM调优的核⼼参数</h3> <ul> <li>-Xss：每个线程的栈⼤⼩。设置越⼩，说明⼀个线程栈⾥能分配的栈帧就越少，但是对JVM整体来说能开启的线程数会更多。</li> <li>-Xms：设置堆的初始可⽤⼤⼩，默认物理内存的1/64</li> <li>-Xmx：设置堆的最⼤可⽤⼤⼩，默认物理内存的1/4</li> <li>-Xmn：新⽣代⼤⼩</li> <li>-XX:NewRatio：默认2表示新⽣代占年⽼代的1/2，占整个堆内存的1/3。</li> <li>-XX:SurvivorRatio：默认8表示⼀个survivor区占⽤1/8的Eden内存，即1/10的新⽣代内存。以下两个参数设置元空间⼤⼩建议值相同，且写死，防⽌在程序启动时因为需要元空间的空间不够⽽频繁full gc。</li> <li>-XX:MaxMetaspaceSize：最⼤元空间⼤⼩</li> <li>XX:MetaspaceSize：元空间⼤⼩，默认是21M，达到该值后会触发Full GC，同时会按100%进⾏动态调整，为了减少⼤数据量占满元空间，频繁触发Full GC，建议在初始化时设置为MaxMetaspaceSize相同的值。</li> </ul> <h3 id="2jvm调优实战">2.JVM调优实战</h3> <ul> <li>设置JVM的参数</li> </ul> <blockquote> <p>‐Xms3072M ‐Xmx3072M ‐Xss1M ‐XX:MetaspaceSize=256M</p> </blockquote> <blockquote> <p>‐XX:MaxMetaspaceSize=256M ‐XX:SurvivorRatio=8<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a3de243184fb7f6908590884b9716e3a.jpg" alt="JVM内存管理面试常见问题全解"></p> </blockquote> <ul> <li>调整VM参数</li> </ul> <blockquote> <p>‐Xms3072M ‐Xmx3072M ‐Xmn2048M ‐Xss1M ‐XX:MetaspaceSize=256M</p> </blockquote> <blockquote> <p>‐XX:MaxMetaspaceSize=256M ‐XX:SurvivorRatio=8<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/cdade6433c0a86330aa9e1c28994ac7b.jpg" alt="JVM内存管理面试常见问题全解"></p> </blockquote> <h3 id="3调优的关键点">3、调优的关键点</h3> <ul> <li> <p>设置元空间⼤⼩，最⼤值和初始化值相同</p> </li> <li> <p>根据业务场景计算出每秒产⽣多少的对象。这些对象间隔多⻓时间会成为垃圾（⼀般根据接⼝响应时间来判断）</p> </li> <li> <p>计算出堆中新⽣代中eden、survivor所需要的⼤⼩：根据上⼀条每条产⽣的对象和多少时间成为垃圾来计算出，依据是尽量减少full gc。</p> </li> </ul> <h3 id="4结合垃圾收集器的调优策略">4、结合垃圾收集器的调优策略</h3> <p>结合垃圾收集器：<strong>PraNew+CMS</strong>，对于CMS的垃圾收集器，还需要加上相关的配置：</p> <ul> <li>对于⼀些年龄较⼤的bean，⽐如缓存对象、spring相关的容器对象，配置相关的对象，这些对象需要尽快的进⼊到⽼年代，因此需要配置：-XX:MaxTenuringThreshold=5</li> <li>⼤对象直接进⼊到⽼年代：-XX:PretenureSizeThreshold=1M</li> <li>CMS垃圾收集器会有并发模式失败的⻛险（转换为使⽤serialOld垃圾收集器），如何避免这种⻛险：将full gc的触发点调低：</li> </ul> <p>-XX:CMSInitiatingOccupancyFraction=85 （默认是92），相当于⽼年代使⽤率达到85%就触发full gc，于是还剩15%的空间允许在cms进⾏gc的过程中产⽣新的对象。</p> <ul> <li>CMS垃圾收集器收集完后会产⽣碎⽚，碎⽚需要整理，但不是每次收集完就整理，设置做了3次Full GC之后整理⼀次碎⽚：</li> </ul> <pre><code>-XX:+UseCMSCompactAtFullCollection -XX:CMSFullGCsBeforeCompaction=3</code></pre> <ul> <li>PraNew+CMS的具体JVM参数配置：</li> </ul> <blockquote> <p>java -Xms3072M -Xmx3072M -Xmn2048M -Xss1M -XX:MetaspaceSize=256M -</p> </blockquote> <blockquote> <p>XX:MaxMetaspaceSize=256M -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=5 -XX:PretenureSizeThreshold=1M -</p> </blockquote> <blockquote> <p>XX:+UseParNewGC -XX:+UseConcMarkSweepGC</p> </blockquote> <blockquote> <p>-XX:CMSInitiatingOccupancyFraction=85 -XX:+UseCMSCompactAtFullCollection</p> </blockquote> <blockquote> <p>-XX:CMSFullGCsBeforeCompaction=3 -jar device-service.jar</p> </blockquote> <p><strong>重点作业：</strong></p> <ul> <li> <blockquote> <p>清晰的掌握类加载过程及双亲委派机制</p> </blockquote> </li> <li> <blockquote> <p>掌握程序在运⾏时 JVM的运⾏时数据区中发⽣了怎样的变化</p> </blockquote> </li> <li> <blockquote> <p>对象的创建的流程</p> </blockquote> </li> <li> <blockquote> <p>对象成为垃圾的判断依据</p> </blockquote> </li> <li> <blockquote> <p>垃圾回收算法有哪些</p> </blockquote> </li> <li> <blockquote> <p>JVM空间内存分配及垃圾回收器的常⽤参数配置</p> </blockquote> </li> </ul> <h1 id="十jvm性能调优的原则有哪些">十、JVM性能调优的原则有哪些？</h1> <ol> <li>多数的Java应用不需要在服务器上进行GC优化，虚拟机内部已有很多优化来保证应用的稳定运行，所以不要为了调优而调优，不当的调优可能适得其反</li> <li>在应用上线之前，先考虑将机器的JVM参数设置到最优（适合）</li> <li>在进行GC优化之前，需要确认项目的架构和代码等已经没有优化空间。我们不能指望一个系统架构有缺陷或者代码层次优化没有穷尽的应用，通过GC优化令其性能达到一个质的飞跃</li> <li>GC优化是一个系统而复杂的工作，没有万能的调优策略可以满足所有的性能指标。GC优化必须建立在我们深入理解各种垃圾回收器的基础上，才能有事半功倍的效果</li> <li>处理吞吐量和延迟问题时，垃圾处理器能使用的内存越大，即java堆空间越大垃圾收集效果越好，应用运行也越流畅。这称之为GC内存最大化原则</li> <li>在这三个属性（吞吐量、延迟、内存）中选择其中两个进行jvm调优，称之为GC调优3选2</li> </ol> <h1 id="十一什么情况下需要jvm调优">十一、什么情况下需要JVM调优？</h1> <ul> <li> <p>Heap内存（老年代）持续上涨达到设置的最大内存值</p> </li> <li> <p>Full GC 次数频繁</p> </li> <li> <p>GC 停顿（Stop World）时间过长（超过1秒，具体值按应用场景而定）</p> </li> <li> <p>应用出现OutOfMemory 等内存异常</p> </li> <li> <p>应用出现OutOfDirectMemoryError等内存异常（ failed to allocate 16777216 byte(s) of direct memory (used: 1056964615, max: 1073741824)）</p> </li> <li> <p>应用中有使用本地缓存且占用大量内存空间</p> </li> <li> <p>系统吞吐量与响应性能不高或下降</p> </li> <li> <p>应用的CPU占用过高不下或内存占用过高不下</p> </li> </ul> <h1 id="十二聊聊java的gc机制">十二、聊聊Java的GC机制</h1> <p>细节可见此博客链接：点我跳转</p> <p>GC：垃圾回收（Garbage Collection），在计算机领域就是指当一个计算机上的动态存储器（内存空间）不再需要时，就应该予以释放，以让出存储器，便于他用。这种存储器的资源管理，称为垃圾回收。</p> <p>这三个问题将分别对应接下来的3节一一解答</p> <ul> <li> <blockquote> <p>JVM清理的是哪一块的对象？判断垃圾方法</p> </blockquote> </li> <li> <blockquote> <p>哪些对象会被清理，为什么清理A而不清理B？</p> </blockquote> </li> <li> <blockquote> <p>JVM又是如何清理的？回收算法</p> </blockquote> </li> </ul> <h2 id="十三cms-和g1-的区别"><strong>十三、CMS 和G1 的区别</strong></h2> <h2 id="1使用范围不一样">1、使用范围不一样</h2> <ul> <li> <blockquote> <p>CMS收集器是老年代的收集器，可以配合新生代的Serial和ParNew收集器一起使用</p> </blockquote> </li> <li> <blockquote> <p>G1收集器收集范围是老年代和新生代。不需要结合其他收集器使用</p> </blockquote> </li> </ul> <h2 id="2stw的时间不一样">2、STW的时间不一样</h2> <ul> <li> <blockquote> <p>CMS收集器以最小的停顿时间为目标的收集器。</p> </blockquote> </li> <li> <blockquote> <p>G1收集器可预测垃圾回收的停顿时间（建立可预测的停顿时间模型）</p> </blockquote> </li> </ul> <h2 id="3垃圾碎片">3、垃圾碎片</h2> <ul> <li> <blockquote> <p>CMS收集器是使用“标记-清除”算法进行的垃圾回收，容易产生内存碎片</p> </blockquote> </li> <li> <blockquote> <p>G1收集器使用的是“标记-整理”算法，进行了空间整合，降低了内存空间碎片。</p> </blockquote> </li> </ul> <h2 id="4回收算法不一样">4、回收算法不一样</h2> <ul> <li> <blockquote> <p>CMS :标记-清除”</p> </blockquote> </li> <li> <blockquote> <p>G1:标记-整理</p> </blockquote> </li> </ul> <h2 id="5大对象处理不一样">5、大对象处理不一样</h2> <ul> <li> <blockquote> <p>在CMS内存中，如果一个对象过大，进入S1、S2区域的时候大于改分配的区域，对象会直接进入老年代。</p> </blockquote> </li> <li> <blockquote> <p>G1处理大对象时会判断对象是否大于一个Region大小的50%，如果大于50%就会横跨多个Region进行存放回收过程不一样</p> </blockquote> </li> </ul> <h2 id="6回收过程不一样">6、回收过程不一样</h2> <h3 id="cms回收垃圾的4个阶段"><strong>CMS回收垃圾的4个阶段</strong></h3> <ul> <li> <blockquote> <p>初始标记</p> </blockquote> </li> <li> <blockquote> <p>并发标记</p> </blockquote> </li> <li> <blockquote> <p>重新标记</p> </blockquote> </li> <li> <blockquote> <p>并发清理</p> </blockquote> </li> <li> <blockquote> <p>并发重置</p> </blockquote> </li> </ul> <h3 id="g1回收垃圾的4个阶段"><strong>G1回收垃圾的4个阶段</strong></h3> <ul> <li> <blockquote> <p>初始标记</p> </blockquote> </li> <li> <blockquote> <p>并发标记</p> </blockquote> </li> <li> <blockquote> <p>最终标记</p> </blockquote> </li> <li> <blockquote> <p>筛选回收</p> </blockquote> </li> </ul> <ol> <li> <blockquote> <p><strong>初始标记：</strong>标记GC Roots 可以直接关联的对象，该阶段需要线程停顿但是耗时短</p> </blockquote> </li> <li> <blockquote> <p><strong>并发标记：</strong>寻找存活的对象，可以与其他程序并发执行，耗时较长</p> </blockquote> </li> <li> <blockquote> <p><strong>最终标记：</strong>并发标记期间用户程序会导致标记记录产生变动（好比一个阿姨一边清理垃圾，另一个人一边扔垃圾）虚拟机会将这段时间的变化记录在Remembered Set Logs 中。最终标记阶段会向Remembered Set合并并发标记阶段的变化。这个阶段需要线程停顿，也可以并发执行</p> </blockquote> </li> <li> <blockquote> <p><strong>筛选回收：</strong>对每个Region的回收成本进行排序，按照用户自定义的回收时间来制定回收计划</p> </blockquote> </li> </ol> <p>初始标记和并发标记和CMS的过程是差不多的，最后的筛选回收会首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划</p> <p>因为采用的标记——整理的算法，所以不会产生内存碎片，最终的回收是STW的，所以也不会有浮动垃圾，Region的区域大小是固定的，所以回收Region的时间也是可控的</p> <p>同时G1 使用了Remembered Set来避免全堆扫描，G1中每个Region都有一个与之对应的RememberedSet ，在各个 Region 上记录自家的对象被外面对象引用的情况。当进行内存回收时，在GC根节点的枚举范围中加入RememberedSet 即可保证不对全堆扫描也不会有遗漏。</p> <p>以上就是CMS和G1的对比过程</p> <p><strong>这是本人今年春招找实习工作准备总结，记录在此，如有需要的老铁可以看看，如有问题可以留言指导</strong></p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3159.htm">修改 Docker 的默认存储路径</a></p>
                                                <p>下一个：<a href="/html/category/article-3161.htm">【面试普通人VS高手系列】Spring Boot中自动装配机制的原理</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6590.htm" title="动物学医学相关专业学校（动物医学专业有哪些学校）">动物学医学相关专业学校（动物医学专业有哪些学校）</a></li>
                        <li class="py-2"><a href="/html/category/article-6821.htm" title="瑞派宠物医院价格表（瑞派宠物医院贵吗）">瑞派宠物医院价格表（瑞派宠物医院贵吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6082.htm" title="动物医院的英文单词是什么（动物医院英文怎么写）">动物医院的英文单词是什么（动物医院英文怎么写）</a></li>
                        <li class="py-2"><a href="/html/category/article-6913.htm" title="动物医院需要几个执业兽医师证书 动物医院需要几个执业兽医师证书呢">动物医院需要几个执业兽医师证书 动物医院需要几个执业兽医师证书呢</a></li>
                        <li class="py-2"><a href="/html/category/article-6039.htm" title="宠福鑫宠物医院通州店（宠福鑫动物医院亦庄完全分院）">宠福鑫宠物医院通州店（宠福鑫动物医院亦庄完全分院）</a></li>
                        <li class="py-2"><a href="/html/category/article-4607.htm" title="春节柳州旅游攻略(春节期间柳州好玩的地方)">春节柳州旅游攻略(春节期间柳州好玩的地方)</a></li>
                        <li class="py-2"><a href="/html/category/article-6170.htm" title="宠物领养需求分析论文怎么写（宠物领养需求分析论文怎么写范文）">宠物领养需求分析论文怎么写（宠物领养需求分析论文怎么写范文）</a></li>
                        <li class="py-2"><a href="/html/category/article-4391.htm" title="足球100分2021（难以置信）足球100分陆姝，吴岚，足球100分，">足球100分2021（难以置信）足球100分陆姝，吴岚，足球100分，</a></li>
                        <li class="py-2"><a href="/html/category/article-7280.htm" title="哈尔滨农业动物医院地址（哈尔滨农业动物医院地址电话）">哈尔滨农业动物医院地址（哈尔滨农业动物医院地址电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-6820.htm" title="云南农大动物医院马林忠医生简介（云南农大兽医院）">云南农大动物医院马林忠医生简介（云南农大兽医院）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>