<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3145.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>SpringMVC学习笔记&#8211;文件上传与MultipartResolver - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">SpringMVC学习笔记&#8211;文件上传与MultipartResolver</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="htmledit_views">                     <strong>要在基于SpringMVC的Web应用程序中通过表单上传文件，那么MultipartResolver将是在服务器端处理文件上传的主要组件<br /></strong> </p> <p><strong>&nbsp;multipart/form-data编码方式支持基于表单的文件上传。</strong></p> <p><strong>使用MultipartResolver进行文件上传的简单分析：<br /></strong></p> <p><strong>MultipartResolver的接口定义如下：<br /></strong></p> <p><strong></strong></p> <pre><code class="language-java">public interface MultipartResolver{     boolean isMultipart(HttpServletRequest request); 	MultipartHttpsServletRequest resolverMultipart(HttpServletRequest request)throws MultipartException; 	void cleanupMultipart(MultipartHttpServletRequest request);  }</code></pre> <p><span style="font-family:KaiTi_GB2312">MultipartResolver 位于 HandlerMapping 之前，请求一来就交由它来处理。当 Web 请求到达 DispatcherServlet 并等待处理的时候，<br /> DispatcherServlet 首先会检查能否从自的 WebApplicationContext 中找到一个名称为 multipartResolver(由 DispatcherServlet 的<br /> 常量 MULTIPART_RESOLVER_BEAN_NAME 所决定)的 MultipartResolver 实例。如果能够获得一个 MultipartResolver 的实例，DispatcherServlet&nbsp;<br /> 将调用 MultipartResolver 的 isMultipart(request) 方法检查当前 Web 请求是否为 multipart类型。如果是，DispatcherServlet 将调用 MultipartResolver 的<br /> resolveMultipart(request) 方法，对原始 request 进行装饰，并返回一个 MultipartHttpServletRequest 供后继处理流程使用(最初的 HttpServletRequest 被偷梁<br /> 换柱成了 MultipartHttpServletRequest)，否则，直接返回最初的 HttpServletRequest</span><br />  </p> <p><strong><span style="font-family:KaiTi_GB2312">SpringMVC框架内为MultipartResolver提供了两个可用的实现类，即org.springframework.web.multipartcommons.CommonsMultipartResolver<br /> 和org.springframework.web.multipart.cos.CosMultipartResolver。前者使用CommonsFileUpload类库实现，后者则使用Oreilly Cos类库实现<br /> 我们选择使用CommonsFileUpload进行文件上传，需要在DispatcherServlet的WebApplicationContext中添加bean定义如下：</span><br /></strong></p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-html">&lt;bean id="multipartResolver" 		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 		p:maxUploadSize="1000000"&gt; &lt;bean/&gt;</code></pre> <p> CommonsMultipartResolver将负责分析当前multipart请求，然后将分析的结果附着到要返回的MultipartHttpservletRequest实例上。当后继处理<br /> <br /> 流程的controller处理web请求的时候，就可以使用特定的MultipartHttpsServletRequest进行上传文件的获取和处理。<br />  </p> <p><strong><span style="font-family:KaiTi_GB2312">但MultipartResolver返回MultipartHttpServlet给后继处理流程，并且后继处理流程中的组件也使用MultipartHttpServletRequest处理完相应的Web<br /> 请求，DispatcherServlet将保证调用MultipartResolver的CleanupMultipart()方法，释放处理文件上传过程中所占用的系统资源，这样，整个文件上传<br /> 的生命周期即告结束。<br /></span></strong></p> <p><strong><span style="font-family:KaiTi_GB2312">下面来介绍一下我实现的文件上传的例子<br /></span></strong></p> <p><strong><span style="font-family:KaiTi_GB2312"><br /></span></strong></p> <p><strong><span style="font-family:KaiTi_GB2312">要实现文件上传，首先添加一个MultipartResolver的实例到DispatcherServlet的WebApplicationContext中。<br /></span></strong></p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-html">&lt;bean id="multipartResolver" 		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 		p:maxUploadSize="1000000"&gt; 	&lt;/bean&gt;</code></pre> <p> 为了使用SimpleFormController专门处理表单的提交，我们需要为数据绑定提供一个Command对象，定义如下：<br />  </p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-java">public class FileUploadingCommand { 	private byte[] fileToUpload; 	private String comment; 	public byte[] getFileToUpload() { 		return fileToUpload; 	} 	public void setFileToUpload(byte[] fileToUpload) { 		this.fileToUpload = fileToUpload; 	} 	public String getComment() { 		return comment; 	} 	public void setComment(String comment) { 		this.comment = comment; 	} 	@Override 	public String toString() { 		return new ToStringBuilder(this).append("fileToUpload",fileToUpload).append("comment",comment).toString(); 	} }</code></pre> <p> 定义的最终的Controller实现类如下：<br />  </p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-java">public class FileUploadFormController extends SimpleFormController{     @Override 	protected void doSubmitAction(Object command) throws Exception { 		FileUploadingCommand commandBean=(FileUploadingCommand)command; 		byte[] fileContent=commandBean.getFileToUpload(); 		String comment=commandBean.getComment(); 		FileUtils.writeByteArrayToFile(new File("zhsi"), fileContent); 	} 	 	@Override 	protected void initBinder(HttpServletRequest request, 			ServletRequestDataBinder binder) throws Exception { 		super.initBinder(request, binder); 		binder.registerCustomEditor(byte[].class, new ByteArrayMultipartFileEditor()); 		 	} }</code></pre> <p> 为了在数据绑定过程数据能够成功转型，我们需要为DataBinder添加相应的自定义PropertyEditor实现，覆写SimpleFormController的initBinder()<br /> <br /> 方法可以达到目的。<br />  </p> <p><strong><span style="font-family:KaiTi_GB2312">下面是SpringMVC.xml配置文件：<br /></span></strong></p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-html">&lt;bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt; 		&lt;property name="mappings"&gt; 			&lt;props&gt; 				&lt;prop key="login.do"&gt;login&lt;/prop&gt; 			&lt;/props&gt; 		&lt;/property&gt; 	&lt;/bean&gt; 	&lt;bean name="login" class="com.web.springMVC.controller.FileUploadFormController"&gt;  		&lt;property name="commandName"&gt; 			&lt;value&gt;command&lt;/value&gt; 		&lt;/property&gt; 		&lt;!-- 这里直接实现了将请求参数绑定到对象上 --&gt; 		&lt;property name="commandClass"&gt; 		&lt;value&gt;com.web.springMVC.model.FileUploadingCommand&lt;/value&gt; 		&lt;/property&gt; 		&lt;property name="successView" value="success"&gt;&lt;/property&gt;  	&lt;bean/&gt; 	&lt;bean id="multipartResolver" 		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 		p:maxUploadSize="1000000"&gt; 	&lt;/bean&gt; 	&lt;bean id="viewResolver" 		class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; 		&lt;property name="prefix" value="/WEB-INF/jsp/" /&gt;  &lt;!-- 默认放在WebRoot下 --&gt; 		&lt;property name="suffix" value=".jsp" /&gt;  	&lt;/bean&gt;</code></pre> <p> 页面login.jsp：<br />  </p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-html">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" 	pageEncoding="UTF-8"%&gt; &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 	&lt;form action="login.do" method="post" enctype="multipart/form-data"&gt; 		选择上传文件&lt;input name="fileToUpload" type="file"/&gt;&lt;br/&gt; 		文件说明&lt;textarea name="comment"&gt;&lt;/textarea&gt; 		&lt;input name="submit" type="submit" value="提交"/&gt; 	&lt;/form&gt; &lt;/body&gt; &lt;/html&gt;</code></pre> <p> 页面success.jsp</p> <p><strong><span style="font-family:KaiTi_GB2312"></span></strong></p> <pre><code class="language-html">&lt;body&gt; 	&lt;table&gt; 		&lt;tbody&gt; 			&lt;tr&gt; 				&lt;td&gt;User Info:&lt;/td&gt; 			&lt;/tr&gt; 			&lt;tr&gt; 				&lt;td&gt;&lt;c:out value="${command.comment}"&gt;&lt;/c:out&gt;&lt;/td&gt; 			&lt;/tr&gt; 		&lt;/tbody&gt; 	&lt;/table&gt; &lt;/body&gt;</code></pre> <p> 上述便可以实现简单的文件上传了</div> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3144.htm">Spring MVC 自定义拦截器</a></p>
                                                <p>下一个：<a href="/html/category/article-3146.htm">C#基于自定义事件EventArgs实现发布订阅模式_C#教程</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3405.htm" title="vue实现消息向上无缝滚动效果_vue.js_">vue实现消息向上无缝滚动效果_vue.js_</a></li>
                        <li class="py-2"><a href="/html/category/article-3386.htm" title="浅谈Vue下的components模板">浅谈Vue下的components模板</a></li>
                        <li class="py-2"><a href="/html/category/article-3422.htm" title="vue-cli项目添加骨架屏多种方式，自动生成骨架屏">vue-cli项目添加骨架屏多种方式，自动生成骨架屏</a></li>
                        <li class="py-2"><a href="/html/category/article-3777.htm" title="vue3+vite 实现自动导入路由+组件">vue3+vite 实现自动导入路由+组件</a></li>
                        <li class="py-2"><a href="/html/category/article-3396.htm" title="CentOS7设置固定IP地址详解">CentOS7设置固定IP地址详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3421.htm" title="PHP类属性">PHP类属性</a></li>
                        <li class="py-2"><a href="/html/category/article-3388.htm" title="springboot的定时任务">springboot的定时任务</a></li>
                        <li class="py-2"><a href="/html/category/article-3375.htm" title="Python中安装pandas出现问题总结">Python中安装pandas出现问题总结</a></li>
                        <li class="py-2"><a href="/html/category/article-3376.htm" title="react18中react-redux状态管理的实现_React">react18中react-redux状态管理的实现_React</a></li>
                        <li class="py-2"><a href="/html/category/article-3411.htm" title="wx.navigateTo/wx.redirectTo 不能跳转">wx.navigateTo/wx.redirectTo 不能跳转</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>