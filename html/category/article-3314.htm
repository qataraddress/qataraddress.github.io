<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3314.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Zookeeper——客户端API的相关方法操作 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">Zookeeper——客户端API的相关方法操作</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="htmledit_views"> <h1 id="main-toc"><strong>文章目录：</strong></h1> <p id="1.%E5%89%8D%E8%A8%80-toc" style="margin-left:0px;"><a href="#1.%E5%89%8D%E8%A8%80" rel="nofollow">1.前言</a></p> <p id="2.%E5%AE%9E%E6%93%8D%E6%AD%A5%E9%AA%A4-toc" style="margin-left:0px;"><a href="#2.%E5%AE%9E%E6%93%8D%E6%AD%A5%E9%AA%A4" rel="nofollow">2.实操步骤</a></p> <p id="2.1%20%E5%88%9B%E5%BB%BAzk%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%AE%8C%E6%88%90%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E8%BF%9E%E6%8E%A5-toc" style="margin-left:40px;"><a href="#2.1%20%E5%88%9B%E5%BB%BAzk%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%AE%8C%E6%88%90%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E8%BF%9E%E6%8E%A5" rel="nofollow">2.1 创建zk客户端，完成与服务端的连接</a></p> <p id="2.2%20%E5%88%9B%E5%BB%BA%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF-toc" style="margin-left:40px;"><a href="#2.2%20%E5%88%9B%E5%BB%BA%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF" rel="nofollow">2.2 创建节点信息</a></p> <p id="2.3%20%E8%8E%B7%E5%8F%96%E5%AD%90%E7%BB%93%E7%82%B9%E5%B9%B6%E7%9B%91%E5%90%AC%E8%8A%82%E7%82%B9%E5%8F%98%E5%8C%96-toc" style="margin-left:40px;"><a href="#2.3%20%E8%8E%B7%E5%8F%96%E5%AD%90%E7%BB%93%E7%82%B9%E5%B9%B6%E7%9B%91%E5%90%AC%E8%8A%82%E7%82%B9%E5%8F%98%E5%8C%96" rel="nofollow">2.3 获取子结点并监听节点变化</a></p> <p id="2.4%20%E5%88%A4%E6%96%AD%E8%8A%82%E7%82%B9%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8-toc" style="margin-left:40px;"><a href="#2.4%20%E5%88%A4%E6%96%AD%E8%8A%82%E7%82%B9%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8" rel="nofollow">2.4 判断节点是否存在</a></p> <p id="3.%E6%B5%85%E8%B0%88%E5%86%99%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86-toc" style="margin-left:0px;"><a href="#3.%E6%B5%85%E8%B0%88%E5%86%99%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86" rel="nofollow">3.浅谈写数据原理</a></p> <p id="3.1%20%E5%86%99%E6%B5%81%E7%A8%8B%E4%B9%8B%E5%86%99%E5%85%A5%E8%AF%B7%E6%B1%82%E7%9B%B4%E6%8E%A5%E5%8F%91%E9%80%81%E7%BB%99Leader%E8%8A%82%E7%82%B9-toc" style="margin-left:40px;"><a href="#3.1%20%E5%86%99%E6%B5%81%E7%A8%8B%E4%B9%8B%E5%86%99%E5%85%A5%E8%AF%B7%E6%B1%82%E7%9B%B4%E6%8E%A5%E5%8F%91%E9%80%81%E7%BB%99Leader%E8%8A%82%E7%82%B9" rel="nofollow">3.1 写流程之写入请求直接发送给Leader节点</a></p> <p id="3.2%C2%A0%E5%86%99%E6%B5%81%E7%A8%8B%E4%B9%8B%E5%86%99%E5%85%A5%E8%AF%B7%E6%B1%82%E7%9B%B4%E6%8E%A5%E5%8F%91%E9%80%81%E7%BB%99Follower%E8%8A%82%E7%82%B9-toc" style="margin-left:40px;"><a href="#3.2%C2%A0%E5%86%99%E6%B5%81%E7%A8%8B%E4%B9%8B%E5%86%99%E5%85%A5%E8%AF%B7%E6%B1%82%E7%9B%B4%E6%8E%A5%E5%8F%91%E9%80%81%E7%BB%99Follower%E8%8A%82%E7%82%B9" rel="nofollow">3.2&nbsp;写流程之写入请求直接发送给Follower节点</a></p> <hr id="hr-toc"/> <h1>1.前言</h1> <blockquote> <p>首先，在上一篇博客中，主要是对zookeeper集群的相关操作，那么由于我的笔记本是 8G 内存的，所以开三台Linux还是可以的，但是再开个IDEA了话就炸了，所以我这里针对zookeeper和Java API的操作，就切换成zookeeper单机模式了，也就是只启动一台zookeeper。</p> <p>由于之前配置的是zookeeper集群，现在转为单机版，所以需要把 zoo.cfg 配置文件中关于集群的那些注释掉：????????????</p> </blockquote> <p><img fetchpriority="high" decoding="async" alt="" height="129" src="http://img.555519.xyz/uploads3/20220903/74b02dd7ea3b7924b8ff262c3fc3b892.jpg"></p> <hr/> <h1 id="2.%E5%AE%9E%E6%93%8D%E6%AD%A5%E9%AA%A4">2.实操步骤</h1> <blockquote> <p>首先建一个maven项目，pom文件中添加如下依赖。</p> </blockquote> <pre><code class="language-XML">    &lt;dependencies&gt;         &lt;dependency&gt;             &lt;groupId&gt;junit&lt;/groupId&gt;             &lt;artifactId&gt;junit&lt;/artifactId&gt;             &lt;version&gt;RELEASE&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;             &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;             &lt;version&gt;2.8.2&lt;/version&gt;         &lt;/dependency&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;             &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;             &lt;version&gt;3.5.7&lt;/version&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt;</code></pre> <blockquote> <div><span style="color:#000000;">需要在项目的</span><span style="color:#000000;">src/main/resources</span><span style="color:#000000;">目录下，新建一个文件，命名为“</span><span style="color:#000000;">log4j.properties</span><span style="color:#000000;">”，在文件中填入。</span></div> </blockquote> <pre><code class="language-XML">log4j.rootLogger=INFO, stdout  log4j.appender.stdout=org.apache.log4j.ConsoleAppender  log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n  log4j.appender.logfile=org.apache.log4j.FileAppender  log4j.appender.logfile.File=target/spring.log  log4j.appender.logfile.layout=org.apache.log4j.PatternLayout  log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</code></pre> <h2 id="2.1%20%E5%88%9B%E5%BB%BAzk%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E5%AE%8C%E6%88%90%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E8%BF%9E%E6%8E%A5">2.1 创建zk客户端，完成与服务端的连接</h2> <pre><code class="language-java">package com.szh.zk;  import org.apache.zookeeper.*; import org.apache.zookeeper.data.Stat; import org.junit.Before; import org.junit.Test;  import java.io.IOException; import java.util.List;  /**  *  */ public class ZookeeperClient {      //单机模式     private static String connectString = "192.168.40.130:2181";     //集群模式 //    private static String connectString = "zk101:2181,zk102:2181,zk103:2181";     private static int sessionTimeout = 30000;     private ZooKeeper zkClient = null;      /**      * 创建ZooKeeper客户端，完成服务端与客户端之间的连接      * connectString: 具体连接的那台zookeeper服务器的地址      * sessionTimeout: 客户端和服务端直接连接的超时时限      * watcher: 监听器相关设置      */     @Test     public void init() throws IOException {         zkClient = new ZooKeeper(connectString, sessionTimeout, new Watcher() {             @Override             public void process(WatchedEvent watchedEvent) {              }         });     } }</code></pre> <p><img decoding="async" alt="" height="346" src="http://img.555519.xyz/uploads3/20220903/459c082eb32e201a4f47705caeaf498b.jpg"></p> <h2 id="2.2%20%E5%88%9B%E5%BB%BA%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF">2.2 创建节点信息</h2> <pre><code class="language-java">package com.szh.zk;  import org.apache.zookeeper.*; import org.apache.zookeeper.data.Stat; import org.junit.Before; import org.junit.Test;  import java.io.IOException; import java.util.List;  /**  *  */ public class ZookeeperClient {      //单机模式     private static String connectString = "192.168.40.130:2181";     //集群模式 //    private static String connectString = "zk101:2181,zk102:2181,zk103:2181";     private static int sessionTimeout = 30000;     private ZooKeeper zkClient = null;      /**      * 创建ZooKeeper客户端，完成服务端与客户端之间的连接      * connectString: 具体连接的那台zookeeper服务器的地址      * sessionTimeout: 客户端和服务端直接连接的超时时限      * watcher: 监听器相关设置      */     @Before     public void init2() throws IOException {         zkClient = new ZooKeeper(connectString, sessionTimeout, new Watcher() {             @Override             public void process(WatchedEvent watchedEvent) {              }         });     }      /**      * 创建节点相关信息      * String path: 要在哪个节点路径下创建新的节点      * byte[] data: 节点中存储的具体值      * List&lt;ACL&gt; acl: 权限控制相关内容, OPEN_ACL_UNSAFE表示任何人都可以访问      * CreateMode createMode: 创建节点的类型（永久、短暂等）, PERSISTENT表示永久节点      */     @Test     public void create() throws KeeperException, InterruptedException {         String node = zkClient.create("/szh", "Java开发".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);         System.out.println(node);     } }</code></pre> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220903/b7796d8aeff987d1c732bbe484a01b2a.jpg"></p> <h2 id="2.3%20%E8%8E%B7%E5%8F%96%E5%AD%90%E7%BB%93%E7%82%B9%E5%B9%B6%E7%9B%91%E5%90%AC%E8%8A%82%E7%82%B9%E5%8F%98%E5%8C%96">2.3 获取子结点并监听节点变化</h2> <pre><code class="language-java">package com.szh.zk;  import org.apache.zookeeper.*; import org.apache.zookeeper.data.Stat; import org.junit.Before; import org.junit.Test;  import java.io.IOException; import java.util.List;  /**  *  */ public class ZookeeperClient {      //单机模式     private static String connectString = "192.168.40.130:2181";     //集群模式 //    private static String connectString = "zk101:2181,zk102:2181,zk103:2181";     private static int sessionTimeout = 30000;     private ZooKeeper zkClient = null;      /**      * 创建ZooKeeper客户端，完成服务端与客户端之间的连接      * connectString: 具体连接的那台zookeeper服务器的地址      * sessionTimeout: 客户端和服务端直接连接的超时时限      * watcher: 监听器相关设置      */     @Before     public void init2() throws IOException {         zkClient = new ZooKeeper(connectString, sessionTimeout, new Watcher() {             @Override             public void process(WatchedEvent watchedEvent) {                 //收到事件通知后的回调函数（用户的业务逻辑）                 System.out.println("-----------------------------------");                 List&lt;String&gt; children = null;                 try {                     children = zkClient.getChildren("/", true);                 } catch (KeeperException | InterruptedException e) {                     e.printStackTrace();                 }                 children.forEach(System.out::println);             }         });     }      /**      * 获取子结点，并监听节点的变化      * String path: 监听哪个路径下的节点      * boolean watch: true表示采用监听器，客户端相关路径下的节点一旦发生变化，监听器就会触发相应的回调方法，再次启动监听      */     @Test     public void getChildren() throws KeeperException, InterruptedException {         List&lt;String&gt; children = zkClient.getChildren("/", true);         children.forEach(System.out::println);         Thread.sleep(Long.MAX_VALUE);     } }</code></pre> <blockquote> <p>基于上面创建节点的API测试之后，此时zk客户端中是存在 szh 这个节点的。</p> </blockquote> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220903/447eef12b370018386ad829ef1070a77.jpg"></p> <blockquote> <p>下面，我们到 zk客户端命令行中，创建新的节点，看看这里监听如何？</p> </blockquote> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220903/d4248f93dff4d295e952c05d5ef1589c.jpg"></p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220903/b7ed5e413e3022ff73fe297bdf353c64.jpg"></p> <blockquote> <p>从上面的运行结果中可以看到，在客户端中实时的创建新的节点是可以被监听到的。</p> <p>下面删除一个节点，这边监听仍然正常执行。</p> </blockquote> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220903/5f858cc63d278a07b8fed2c3cada8cfa.jpg"></p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220903/0a1fc7d0e54698e15f1e31b104db25fd.jpg"></p> <h2 id="2.4%20%E5%88%A4%E6%96%AD%E8%8A%82%E7%82%B9%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8">2.4 判断节点是否存在</h2> <pre><code class="language-java">package com.szh.zk;  import org.apache.zookeeper.*; import org.apache.zookeeper.data.Stat; import org.junit.Before; import org.junit.Test;  import java.io.IOException; import java.util.List;  /**  *  */ public class ZookeeperClient {      //单机模式     private static String connectString = "192.168.40.130:2181";     //集群模式 //    private static String connectString = "zk101:2181,zk102:2181,zk103:2181";     private static int sessionTimeout = 30000;     private ZooKeeper zkClient = null;      /**      * 创建ZooKeeper客户端，完成服务端与客户端之间的连接      * connectString: 具体连接的那台zookeeper服务器的地址      * sessionTimeout: 客户端和服务端直接连接的超时时限      * watcher: 监听器相关设置      */     @Test     public void init() throws IOException {         zkClient = new ZooKeeper(connectString, sessionTimeout, new Watcher() {             @Override             public void process(WatchedEvent watchedEvent) {              }         });     }      @Before     public void init2() throws IOException {         zkClient = new ZooKeeper(connectString, sessionTimeout, new Watcher() {             @Override             public void process(WatchedEvent watchedEvent) {              }         });     }      /**      * 判断节点是否存在      * String path: 判断哪个路径下的节点是否存在      * boolean watch: false表示不开启监听器功能      */     @Test     public void exist() throws KeeperException, InterruptedException {         Stat stat = zkClient.exists("/szh", false);         System.out.println(stat != null ? "节点存在" : "节点不存在");     } }</code></pre> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220903/36605fa15dd3350b6f4f5dffc6ea25f0.jpg"></p> <blockquote> <p>基于上面的API测试，我们知道 szh 这个节点是存在的，所以上面的运行结果是 节点存在。</p> <p>然后将 szh 节点删除，自然就不存在了。</p> </blockquote> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220903/86a7f61b35ad38625e17dd41180046f2.jpg"></p> <p style="text-align:center;"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220903/13718fbf9ae7e2c9067f663a8813e034.jpg"></p> <hr/> <h1 id="3.%E6%B5%85%E8%B0%88%E5%86%99%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86">3.浅谈写数据原理</h1> <h2 id="3.1%20%E5%86%99%E6%B5%81%E7%A8%8B%E4%B9%8B%E5%86%99%E5%85%A5%E8%AF%B7%E6%B1%82%E7%9B%B4%E6%8E%A5%E5%8F%91%E9%80%81%E7%BB%99Leader%E8%8A%82%E7%82%B9">3.1 写流程之写入请求直接发送给Leader节点</h2> <p><img decoding="async" alt="" height="428" src="http://img.555519.xyz/uploads3/20220903/9f4e757bbbd870b119d73d8f754cd0af.jpg"></p> <h2 id="3.2%C2%A0%E5%86%99%E6%B5%81%E7%A8%8B%E4%B9%8B%E5%86%99%E5%85%A5%E8%AF%B7%E6%B1%82%E7%9B%B4%E6%8E%A5%E5%8F%91%E9%80%81%E7%BB%99Follower%E8%8A%82%E7%82%B9">3.2&nbsp;写流程之写入请求直接发送给Follower节点</h2> <p><img loading="lazy" decoding="async" alt="" height="402" src="http://img.555519.xyz/uploads3/20220903/b8476c252cd8c83914f729220a49854e.jpg"></p> </div> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3313.htm">win11系统字体显示不全怎么办</a></p>
                                                <p>下一个：<a href="/html/category/article-3315.htm">ASP.NET WebAPI导入CSV_实用技巧</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3752.htm" title="CentOS7离线安装Nginx及配置">CentOS7离线安装Nginx及配置</a></li>
                        <li class="py-2"><a href="/html/category/article-4501.htm" title="动物打疫苗 人还打吗多少钱 动物打疫苗 人还打吗多少钱一针">动物打疫苗 人还打吗多少钱 动物打疫苗 人还打吗多少钱一针</a></li>
                        <li class="py-2"><a href="/html/category/article-3390.htm" title="springcloud-的使用alibaba版&#8212;&#8212;Nacos Discovery&#8211;服务治理">springcloud-的使用alibaba版&#8212;&#8212;Nacos Discovery&#8211;服务治理</a></li>
                        <li class="py-2"><a href="/html/category/article-4500.htm" title="汝州汝窑10大品牌(汝州汝瓷哪家好)">汝州汝窑10大品牌(汝州汝瓷哪家好)</a></li>
                        <li class="py-2"><a href="/html/category/article-4344.htm" title="南京农大动物医院电话号码（南京农业大学动物医院电话）">南京农大动物医院电话号码（南京农业大学动物医院电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-4345.htm" title="国产机油品牌有哪些牌子(国产润滑油十大名牌)">国产机油品牌有哪些牌子(国产润滑油十大名牌)</a></li>
                        <li class="py-2"><a href="/html/category/article-3387.htm" title="Node.js躬行记半吊子的可视化搭建系统">Node.js躬行记半吊子的可视化搭建系统</a></li>
                        <li class="py-2"><a href="/html/category/article-4146.htm" title="python类内部成员的访问及外部访问">python类内部成员的访问及外部访问</a></li>
                        <li class="py-2"><a href="/html/category/article-3777.htm" title="vue3+vite 实现自动导入路由+组件">vue3+vite 实现自动导入路由+组件</a></li>
                        <li class="py-2"><a href="/html/category/article-4425.htm" title="动物机体注射疫苗后产生的抗体通常存在哪里? 动物机体注射疫苗后产生的抗体通常存在哪里">动物机体注射疫苗后产生的抗体通常存在哪里? 动物机体注射疫苗后产生的抗体通常存在哪里</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">16</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>