<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3368.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Redis实现并发阻塞锁方案_在线工具 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">Redis实现并发阻塞锁方案_在线工具</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p>由于用户同时访问线上的下订单接口，导致在扣减库存时出现了异常，这是一个很典型的并发问题，本篇文章为解决并发问题而生，采用的技术为Redis锁机制+多线程的阻塞唤醒方法。</p> <p>在实现Redis锁机制之前，我们需要了解一下前置知识。</p> <h3 id="一前置知识">一、前置知识</h3> <h4 id="1多线程">1、多线程</h4> <p>将wait()、notifyAll()归为到多线程的方法中略有一些不恰当，这两个方法是Object中的方法。</p> <p>① 当调用了wait()方法后，让当前线程进入等待状态，并且让当前线程释放对象锁，等待既为阻塞状态，等待notifyAll()方法的唤醒。</p> <p>wait()方法和sleep()方法有一些相似之处，都是使当前线程阻塞，但他们实际是有一些区别的。</p> <ol> <li>执行wait() 方法之前需要请求锁，wait()方法执行的时候会释放锁，等待被唤醒的时候竞争锁。</li> <li>sleep()只是让当前线程休眠一段时间，无视锁的存在。</li> <li>wait() 是Object类的方法 sleep()是Thread的静态方法</li> </ol> <p>② notifyAll()方法为唤醒wait()中的线程。</p> <p>notifyAll() 和 notify() 方法都是可以唤醒调用了wait()方法，而陷入阻塞的线程。</p> <p>但是notify()是随机唤醒这个阻塞队列中随机的一个线程，而notifyAll()是唤醒所用的调用了wait()方法而陷入阻塞的线程，让他们自己去抢占对象锁。</p> <p>notifyAll() 和 notify() 也都是必须在加锁的同步代码块中被调用，它们起的是唤醒的作用，不是释放锁的作用，只用在当前同步代码块中的程序执行完，也就是对象锁自然释放了，notifyAll() 和 notify()方法才会起作用，去唤醒线程。</p> <p>wait()方法一般是和notify() 或者 notifyAll() 方法一起连用的。</p> <p>以上为掌握本篇博客必备的多线程知识，如果系统学习多线程的相关知识可查阅博客 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.sky1998.cn/categories/"  target="_blank"  rel="nofollow">程序员田同学</a></p> <h4 id="2redis">2、Redis</h4> <p>加锁的过程本质上就是往Redis中set值，当别的进程也来set值时候，发现里面已经有值了，就只能放弃获取稍后再试。</p> <p>Redis提供了一个天然实现锁机制的方法。</p> <pre><code>在Redis客户端的命令为 setnx(set if not exists)  </code></pre> <p>在集成Springboot中采用的方法为：</p> <pre><code>redisTemplate.opsForValue().setIfAbsent(key, value); </code></pre> <p>如果里面set值成功会返回True，如果里面已经存在值就会返回False。</p> <p>在我们实际使用的时候，setIfAbsent()方法并不是总是返回True和False。</p> <p>如果我们的业务中加了事务，该方法会返回null，不知道这是一个bug还是什么，这是Redis的一个巨坑，浪费了很长时间才发现了这个问题，如果解决此问题可以跳转到第四章。</p> <h3 id="二实现原理">二、实现原理</h3> <p>分布式锁本质上要实现的目标就是在 Redis 里面占一个位置，当别的进程也要来占时，发现已经有人占在那里了，就只好放弃或者稍后再试。占位一般是使用 setnx(set if not exists) 指令，只允许被一个客户端占位。先来先占， 事办完了，再调用 del 指令释放茅坑。</p> <p>其中，发现Redis中已经有值了，当前线程是直接放弃还是稍后再试分别就代表着，非阻塞锁和阻塞锁。</p> <p>在我们的业务场景中肯定是要稍后再试（阻塞锁），如果是直接放弃（非阻塞锁）在数据库层面就可以直接做，就不需要我们在代码大费周章了。</p> <p>非阻塞锁只能保存数据的正确性，在高并发的情况下会抛出大量的异常，当一百个并发请求到来时，只有一个请求成功，其他均会抛出异常。</p> <p>Redis非阻塞锁和 MySQL的乐观锁，最终达到的效果是一样的，乐观锁是采用CAS的思想。</p> <p>乐观锁方法：表字段 加一个版本号，或者别的字段也可以！加版本号，可以知道控制顺序而已！在update 的时候可以where后面加上version= oldVersion。数据库，在任何并发的情况下，update 成功就是 1 失败就是 0 .可以根据返回的 1 ，0 做相应的处理！</p> <p>我们更推荐大家使用阻塞锁的方式。</p> <p>当获取不到锁时候，我们让当前线程使用wait()方法唤醒，当持有锁的线程使用完成后，调用notifyAll()唤醒所有等待的方法。</p> <h3 id="三具体实现">三、具体实现</h3> <p>以下代码为阻塞锁的实现方式。</p> <p>业务层：</p> <pre><code>    public String test() throws InterruptedException {          lock("lockKey");         System.out.println("11");         System.out.println("22");         System.out.println(Thread.currentThread().getName()+"***********");         Thread.sleep(2000);         System.out.println("33");         System.out.println("44");         System.out.println("55");         unlock("lockKey");         return "String";     } </code></pre> <p>锁的工具类:</p> <p>主要是加锁和解锁的两个方法。</p> <pre><code> //每一个redis的key对应一个阻塞对象     private static HashMap&lt;String, Object&gt; blockers = new HashMap&lt;&gt;();      //当前获得锁的线程     private static Thread curThread;      public static RedisTemplate redisTemplate = (RedisTemplate) SpringUtils.getBean("redisTemplate") ;      /**      * 加锁      * @param key      * @throws InterruptedException      */      public static void lock(String key) {         //循环判断是否能够创建key， 不能则直接wait释放CPU执行权          //放不进指说明锁正在被占用         System.out.println(key+"**");          while (!RedisUtil.setLock(key,"1",3)){              synchronized (key) {                  blockers.put(key, key);                 //wait释放CPU执行权                 try {                     key.wait();                 } catch (InterruptedException e) {                     e.printStackTrace();                 }             }         }         blockers.put(key, key);         //能够成功创建，获取锁成功记录当前获取锁线程         curThread = Thread.currentThread();     }      /**      * 解锁      * @param key      */     public static void unlock(String key) {         //判断是否为加锁的线程执行解锁， 不是则直接忽略         if( curThread == Thread.currentThread()) {             RedisUtil.delete(key);             //删除key之后需要notifyAll所有的应用， 所以这里采用发订阅消息给所有的应用           //  RedisUtil.publish("lock", key);              //notifllall其他线程             Object lock = blockers.get(key);             if(lock != null) {                 synchronized (lock) {                     lock.notifyAll();                 }             }          }     } </code></pre> <p>当我们在不加锁时候，使用接口测试工具测试时，12345并不能都是顺序执行的，会造成输出顺序不一致，如果是在我们的实际场景中，这是输入换成了数据库的select和update，数据出现错乱也是很正常的情况了。</p> <p>当我们加上锁以后，12345都是顺序输出，并发问题顺利解决了。</p> <h3 id="四附录">四、附录</h3> <p>1、Redis存在的bug</p> <p>本来lock()方法是直接调用 "Redis.setIfAbsent()" 方法，但是在使用时候一直报空指针异常，最终定位问题为Redis.setIfAbsent()方法存在问题。</p> <p>在我的实际业务中，下订单的方法使用了@Transflastion增加了事务，导致该方法返回null，我们手写一个实现setIfAbsent()的作用。</p> <pre><code> /**      * 只有key不存在时,才设置值, 返回true, 否则返回false      *      * @param key     key 不能为null      * @param value   value 不能为null      * @param timeout 过期时长, 单位为妙      * @return      */     public static Boolean setLock(String key,String value, long timeout) {          SessionCallback&lt;Boolean&gt; sessionCallback = new SessionCallback&lt;Boolean&gt;() {             List&lt;Object&gt; exec = null;             @Override             @SuppressWarnings("unchecked")             public Boolean execute(RedisOperations operations) throws DataAccessException {                 operations.multi();                  redisTemplate.opsForValue().setIfAbsent(key, value);                 redisTemplate.expire(key,timeout, TimeUnit.SECONDS);                  exec = operations.exec();                  if(exec.size() &gt; 0) {                     return (Boolean) exec.get(0);                 }                 return false;             }         };         return (Boolean) redisTemplate.execute(sessionCallback);     } </code></pre> <p>方便对比，以下贴上原本的setIfAbsent()方法。</p> <pre><code> /**    * 只有key不存在时,才设置值, 返回true, 否则返回false [警告：事务或者管道情况下会报错-可使用 setLock方法]    *    * @param key     key 不能为null    * @param value   value 不能为null    * @param timeout 过期时长, 单位为妙    * @return    */   @Deprecated   public static &lt;T&gt; Boolean setIfAbsent(String key, T value, long timeout) {       // redisTemplate.multi();       ValueOperations&lt;String, T&gt; valueOperations = redisTemplate.opsForValue();       Boolean aBoolean = valueOperations.setIfAbsent(key, value, timeout, TimeUnit.SECONDS);      // redisTemplate.exec();     return aBoolean;   } </code></pre> <h4 id="2mysql的锁机制">2、MySQL的锁机制</h4> <p>在并发场景下MySQL会报错，报错信息如下：</p> <pre><code>### Cause: com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Lock wait timeout exceeded; try restarting transaction ; SQL []; Lock wait timeout exceeded; try restarting transaction; nested exception is com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Lock wait timeout exceeded; try restarting transaction </code></pre> <p>问题出现的原因是，某一种表频繁被锁表，导致另外一个事务超时，出现问题的原因是MySQL的机制。</p> <p>MySQL更新时如果where字段存在索引会使用行锁，否则会使用表锁。</p> <p>我们使用navichat在where字段上加上索引，问题顺利的迎刃而解。</p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3367.htm">tensorflow中张量、常量、变量、占位符</a></p>
                                                <p>下一个：<a href="/html/category/article-3369.htm">vue跳转页面打开新窗口,并携带与接收参数方式_vue.js_</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3420.htm" title="mysql从服务列表里消失">mysql从服务列表里消失</a></li>
                        <li class="py-2"><a href="/html/category/article-3418.htm" title="序列化之@JsonComponent、@JsonInclude、@JsonSerialize、@JsonIgnore、JsonProperty区别与联系作用">序列化之@JsonComponent、@JsonInclude、@JsonSerialize、@JsonIgnore、JsonProperty区别与联系作用</a></li>
                        <li class="py-2"><a href="/html/category/article-3412.htm" title="sql 如何交换一个字符两侧字符的顺序_中级数据分析-SQL简单查询">sql 如何交换一个字符两侧字符的顺序_中级数据分析-SQL简单查询</a></li>
                        <li class="py-2"><a href="/html/category/article-3406.htm" title="postman测试@pathvariable,@requestparam,@requestbody发送情况">postman测试@pathvariable,@requestparam,@requestbody发送情况</a></li>
                        <li class="py-2"><a href="/html/category/article-4145.htm" title="如何在Python中中断for循环？">如何在Python中中断for循环？</a></li>
                        <li class="py-2"><a href="/html/category/article-3397.htm" title="「Spring Boot 系列」05. Spring Boot Profiles（多环境配置）">「Spring Boot 系列」05. Spring Boot Profiles（多环境配置）</a></li>
                        <li class="py-2"><a href="/html/category/article-3413.htm" title="Centos7系统离线安装nginx步骤(亲测，超详细步骤)">Centos7系统离线安装nginx步骤(亲测，超详细步骤)</a></li>
                        <li class="py-2"><a href="/html/category/article-3404.htm" title="【Spring】spring的反射机制详解">【Spring】spring的反射机制详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3385.htm" title="Spring事件监听机制源码解析">Spring事件监听机制源码解析</a></li>
                        <li class="py-2"><a href="/html/category/article-3393.htm" title="node.js &#8211; http、模块化、npm">node.js &#8211; http、模块化、npm</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>