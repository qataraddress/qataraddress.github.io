<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3189.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Python trino执行hive insert overwrite不生效的问题 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">Python trino执行hive insert overwrite不生效的问题</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>使用python的trino包执行insert overwrite，但是overwrite却没有生效的问题</p> <p>根据trino的官网介绍的insert overwrite的开启方式，开启hive的insert overwrite会话，使当前会话的insert into语句支持insert overwrite，也即支持插入数据根据分区覆盖更新的功能</p> <p>但是在使用Python代码执行时总是没有生效，在花了不少时间debug之后，终于找到了原因竟是因为开启insert overwrite session的语句没有执行fetchall()而导致没有生效</p> <p>下面是执行的的代码示例</p> <pre><code class="prism language-py"><span class="token keyword">import</span> trino  <span class="token keyword">def</span> <span class="token function">insert_overwrite_query</span><span class="token punctuation">(</span>trino<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     conn <span class="token operator">=</span> trino<span class="token punctuation">.</span>dbapi<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>     cursor<span class="token punctuation">:</span> Cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>     overwrite_sql <span class="token operator">=</span> <span class="token string">"SET SESSION hive.insert_existing_partitions_behavior = 'OVERWRITE'"</span>     cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>overwrite_sql<span class="token punctuation">)</span>     query <span class="token operator">=</span> <span class="token triple-quoted-string string">"""insert into hive.schema.table ..."""</span>     cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>query<span class="token punctuation">)</span>    	res <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> </code></pre> <p><code>overwrite_sql</code>在执行之后需要执行<code>cursor.fetchall()</code>才会生效，在此之前实在不明白这条sql为什么需要fetchall()？fetchall()的作用不是在需要返回数据时才执行吗？</p> <p>在一番搜寻之后才了解到fetchall()的真正运作机制</p> <ul> <li>通常查询的结果集会存储在内存之中，好的数据库连接处理一般会将查询结果集存放在服务端的内存，在接收请求时才会返回给客户端，也就是说只有在执行fetchall()之后前面的insert overwrite session也会确切地被执行</li> </ul> <p>另外就是python trino中的fetchall()的作用了，一番源码观察之后，确定了trino的查询机制</p> <ul> <li>查询是分批次查询的，数据量大的数据会首先使用post请求查询一批数据，然后接下来如果客户端还需要剩余的结果，会使用get请求查询接下来的所有数据之后结束或者连接中断</li> </ul> <p>根据cursor.fetchall() 找到了其数据实际上来自于一个生成器对象<code>TrinoResult</code>，在fetchall()的时候实际上执行了<code>list(TrinoResult(...))</code>取得了查询结果（实际上你执行<code>list(cursor.execute(query))</code>也会得到fetchall()相同的结果）</p> <pre><code class="prism language-py"><span class="token keyword">class</span> <span class="token class-name">TrinoResult</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">,</span> rows<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> experimental_python_types<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>_query <span class="token operator">=</span> query         self<span class="token punctuation">.</span>_rows <span class="token operator">=</span> rows <span class="token keyword">or</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         self<span class="token punctuation">.</span>_rownumber <span class="token operator">=</span> <span class="token number">0</span>         self<span class="token punctuation">.</span>_experimental_python_types <span class="token operator">=</span> experimental_python_types 	 	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 	     <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># Initial fetch from the first POST request</span>         <span class="token keyword">for</span> row <span class="token keyword">in</span> self<span class="token punctuation">.</span>_rows<span class="token punctuation">:</span>             self<span class="token punctuation">.</span>_rownumber <span class="token operator">+=</span> <span class="token number">1</span>             <span class="token keyword">yield</span> row         self<span class="token punctuation">.</span>_rows <span class="token operator">=</span> <span class="token boolean">None</span>          <span class="token comment"># Subsequent fetches from GET requests until next_uri is empty.</span>         <span class="token keyword">while</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>_query<span class="token punctuation">.</span>finished<span class="token punctuation">:</span>             rows <span class="token operator">=</span> self<span class="token punctuation">.</span>_query<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>                 self<span class="token punctuation">.</span>_rownumber <span class="token operator">+=</span> <span class="token number">1</span>                 logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"row %s"</span><span class="token punctuation">,</span> row<span class="token punctuation">)</span>                 <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>_experimental_python_types<span class="token punctuation">:</span>                     <span class="token keyword">yield</span> row                 <span class="token keyword">else</span><span class="token punctuation">:</span>                     <span class="token keyword">yield</span> self<span class="token punctuation">.</span>_map_to_python_types<span class="token punctuation">(</span>row<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_query<span class="token punctuation">.</span>columns<span class="token punctuation">)</span> </code></pre> <p>总之，在session sql后面需要在执行一次fetchall()才会使开启session的sql生效，但是总觉得有点不符合直觉</p> </p></div> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3188.htm">springMvc之拦截器的使用</a></p>
                                                <p>下一个：<a href="/html/category/article-3190.htm">快速掌握AsyncI-新手入门</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4465.htm" title="重庆哪里可以领养宠物猫的地方（重庆领养猫在哪领养）">重庆哪里可以领养宠物猫的地方（重庆领养猫在哪领养）</a></li>
                        <li class="py-2"><a href="/html/category/article-3419.htm" title="redis之发布与订阅(publish/subscribe模式)">redis之发布与订阅(publish/subscribe模式)</a></li>
                        <li class="py-2"><a href="/html/category/article-6038.htm" title="动物疫苗企业名单公示最新（动物疫苗生产厂家排名）">动物疫苗企业名单公示最新（动物疫苗生产厂家排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-5950.htm" title="阳台不锈钢玻璃哪个牌子好些(阳台不锈钢玻璃哪个牌子好一点)">阳台不锈钢玻璃哪个牌子好些(阳台不锈钢玻璃哪个牌子好一点)</a></li>
                        <li class="py-2"><a href="/html/category/article-5592.htm" title="开童装店什么季节开店最好(童装店几月份上夏装)">开童装店什么季节开店最好(童装店几月份上夏装)</a></li>
                        <li class="py-2"><a href="/html/category/article-3777.htm" title="vue3+vite 实现自动导入路由+组件">vue3+vite 实现自动导入路由+组件</a></li>
                        <li class="py-2"><a href="/html/category/article-4118.htm" title="数据库上云实践：使用Ora2pg进行数据库迁移">数据库上云实践：使用Ora2pg进行数据库迁移</a></li>
                        <li class="py-2"><a href="/html/category/article-4145.htm" title="如何在Python中中断for循环？">如何在Python中中断for循环？</a></li>
                        <li class="py-2"><a href="/html/category/article-6215.htm" title="宠物店卖狗粮的利润是多少（宠物店卖狗粮的利润是多少啊）">宠物店卖狗粮的利润是多少（宠物店卖狗粮的利润是多少啊）</a></li>
                        <li class="py-2"><a href="/html/category/article-4391.htm" title="足球100分2021（难以置信）足球100分陆姝，吴岚，足球100分，">足球100分2021（难以置信）足球100分陆姝，吴岚，足球100分，</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">37</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>