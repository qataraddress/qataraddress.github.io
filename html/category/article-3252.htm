<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3252.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Git基础Commit对象 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">Git基础Commit对象</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div class="toc"> <div class="toc-container-header">目录</div> <ul> <li>1、Commit对象介绍</li> <li>2、Commit对象说明</li> <li>3、本地库中对象之间的关系</li> <li>4、总结</li> <li>5、练习</li> <li>6、本文用到的命令总结</li> </ul> </div> <h2 id="1commit对象介绍">1、Commit对象介绍</h2> <p>现在来介绍最后一种Git对象<code>commit</code>对象，也叫提交对象。</p> <p>提交对象可以理解为是对树对象的一层封装，提交信息包括基于当前暂存区中索引文件生成的<code>tree</code>对象，还有包含了提交时间，提交者信息，作者信息，以及提交备注等内容，更重要的是里面还包含了父提交的ID，由此就可以形成Git提交的有向无环图。（是链式的关系，把所有<code>commit</code>对象关联起来）</p> <p>即：<code>commit</code>对象通常指向一个<code>tree</code> 对象，并且封装了文件的提交时间，提交者信息，作者信息，提交备注，以及父提交引用等数据。</p> <p>下面是<code>commit</code>对象的存储结构：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/fc6cead3c6a12af6716c89a03a9186d6.jpg" alt="Git基础Commit对象"></p> <h2 id="2commit对象说明">2、Commit对象说明</h2> <p>我们通过练习来说明<code>commit</code>对象，接着用前面<code>Tree</code>对象的本地版本库。</p> <p><strong>（1）创建一个<code>commit</code>对象</strong></p> <p>我们可以通过调用<code>commit-tree</code>命令创建一个提交对象，为此需要指定一个树对象的<code>SHA-1</code>值，以及该提交的父提交对象。</p> <blockquote> <p>说明：使用<code>commit-tree</code>命令来创建提交对象，一般都需要和父提交进行关联，如果是第一次将暂存区的文件索引数据提交到本地版本库，那么该提交操作就不需要指定父提交对象。</p> </blockquote> <p><strong>1）我们可以先查看一下此时Git本地库中的对象，如下</strong>：</p> <pre><code class="language-bash">.git/objects/01/ab2a43b1eb150bcf00f375800727df240cf653 # 第三个tree树对象 .git/objects/0c/1e7391ca4e59584f8b773ecdbbb9467eba1547 # test.txt第二个版本（blob对象） .git/objects/16/3b45f0a0925b0655da232ea8a4188ccec615f5 # 第二个tree树对象 .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt第一个版本（blob对象） .git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # 第一个tree树对象 .git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt第一个版本（blob对象）</code></pre> <p><strong>2）我们通过第一个树对象，创建一个<code>commit</code>对象</strong></p> <pre><code class="language-bash"># 1.做提交操作，创建一个commit对象 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/git_learning (master) $ echo 'first commit' | git commit-tree d8329f 3ceba95d3cd9cce982d31e41e3b995ece72f755d  # 2.确定该对象类型 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/git_learning (master) $ git cat-file -t 3ceba95d3c commit  # 3.查看该对象内容 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/git_learning (master) $ git cat-file -p 3ceba95d3c tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579 author sun_wk <sun_wk@126.com> 1618190880 +0800 committer sun_wk <sun_wk@126.com> 1618190880 +0800  first commit</code></pre> <p>说明：</p> <ul> <li><code>tree</code>：表示该<code>commit</code>对象所指向的<code>tree</code>对象的索引</li> <li><code>author</code>：表示该文件的作者。</li> <li><code>committer</code>：表示该文件的提交者。</li> <li><code>first commit</code>：这段文本是提交备注。（备注与前面留空一行）</li> <li>因为是第一次进行<code>commit</code>提交操作，所以没有父提交信息。</li> <li><code>1618190880 +0800</code>：表示时间，一个时间戳。</li> </ul> <blockquote> <p>即：<code>commit</code>对象的格式很简单：指明了该时间点项目快照的顶层树对象、作者/提交者信息（从 Git 设置的<code>user.name</code>和<code>user.email</code>中获得)，以及当前时间戳、留空一行，最后是提交注释。</p> </blockquote> <blockquote> <p>提示：<code>git commit-tree</code>命令不但生成了提交对象，而且会将对应的快照（树对象）提交到本地库中。</p> </blockquote> <p><strong>（2）创建第二个<code>commit</code>对象</strong></p> <p>根据第二个<code>tree</code>对象和第一个<code>commit</code>对象，来创建第二个<code>commit</code>对象。</p> <p>通过<code>-p</code>选项指定父提交对象。</p> <pre><code class="language-bash"># 1.创建第二个commit对象 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/git_learning (master) $ echo 'second commit' | git commit-tree 163b45f0a09 -p 3ceba95d3cd9cc 60e1c209e9de87314ec47cf28e61de8df5362fe6  # 2.查看该对象内容 L@DESKTOP-T2AI2SU MINGW64 /j/git-repository/git_learning (master) $ git cat-file -p 60e1c209e9de8 tree 163b45f0a0925b0655da232ea8a4188ccec615f5 parent 3ceba95d3cd9cce982d31e41e3b995ece72f755d author sun_wk <sun_wk@126.com> 1618193286 +0800 committer sun_wk <sun_wk@126.com> 1618193286 +0800  second commit</code></pre> <blockquote> <p><strong>提交对象的格式很简单：</strong></p> <p>它先指定一个顶层树对象，代表当前项目快照；</p> <p>然后是可能存在的父提交；</p> <p>之后是作者/提交者信息（依据你的<code>user.name</code> 和<code>user.email</code> 配置来设定，外加一个时间戳）；</p> <p>留空一行，最后是提交注释。</p> </blockquote> <p>第三个<code>commit</code>提交，同上，这里就不演示了。</p> <h2 id="3本地库中对象之间的关系">3、本地库中对象之间的关系</h2> <p>我们可以查看一下此时Git本地库中的对象</p> <pre><code class="language-bash">.git/objects/01/ab2a43b1eb150bcf00f375800727df240cf653 # 第三个tree树对象 .git/objects/0c/1e7391ca4e59584f8b773ecdbbb9467eba1547 # test.txt第二个版本（blob对象） .git/objects/16/3b45f0a0925b0655da232ea8a4188ccec615f5 # 第二个tree树对象 .git/objects/3c/eba95d3cd9cce982d31e41e3b995ece72f755d # 第一个commit提交对象 .git/objects/46/ab608799a0e65e970b67b9b52f6c1407c39036 # 第三个commit提交对象 .git/objects/60/e1c209e9de87314ec47cf28e61de8df5362fe6 # 第二个commit提交对象 .git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt第一个版本（blob对象） .git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # 第一个tree树对象 .git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt第一个版本（blob对象）</code></pre> <p>可以从上面看到，此时的本地版本库中共有9个对象，三个<code>blob</code>对象，三个<code>tree</code>对象，三个<code>commit</code>对象。</p> <p>他们之间的关系如下图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6e7381388ce04479de07f84404df9fe6.jpg" alt="Git基础Commit对象"></p> <h2 id="4总结">4、总结</h2> <ol> <li>提交是我们经常使用的Git动作，每次提交操作都指向一个树对象，同时会产生一个<code>commit</code>对象。<br /> 即：一个<code>commit</code>对象包含了一个<code>tree</code>对象，这个<code>tree</code>对象记录了在那个时间点，项目包含了什么文件夹和什么文件。</li> <li>一个提交对象可以有一个或者多个父提交。</li> <li>每次<code>commit</code>操作都会基于当前索引文件index新建<code>tree</code>对象。那么当前索引文件，是在上次提交的基础上更新来的，所以每次提交产生的<code>commit</code>对象，与其他的<code>commit</code>对象，都有前后关系或者称为父子关系。</li> <li>对于我们来说，不需要直接访问<code>blob</code>对象和<code>tree</code>对象，我们直接访问<code>commit</code>对象就可以了。<br /> 即：<code>commit</code>对象对应的<code>tree</code>对象下面，又包含了小的<code>tree</code>对象和<code>blob</code>对象，子的<code>tree</code>对象一层层展开，最后叶子节点就是一个个<code>blob</code>对象，也就是一个个文件。</li> </ol> <blockquote> <p>到这里，我们就能够清楚的了解，什么叫一个Git版本。<code>tree</code>对象才是一次项目版本的快照，提交对象是对<code>tree</code>对象的一次封装。</p> <p>即：</p> <ul> <li>项目的快照就是一个树对象。</li> <li>项目的版本就是一个提交对象。</li> </ul> <p>而且Git的每一个版本，存储的不是增量，而存储的是当前项目的快照。同时<code>objects</code>目录中相当于存放了项目的所有历史记录，回滚就相当的方便了，找到对应的<code>commit</code>对象的hash就可以了。</p> </blockquote> <h2 id="5练习">5、练习</h2> <p>请问下图中包含多少个<code>tree</code>对象和<code>blob</code>对象？</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/04824b7f00f79e7ae6f9a6a1ea8f2525.jpg" alt="Git基础Commit对象"></p> <p>一共包含两个<code>tree</code>对象，一个<code>blob</code>对象，一个<code>commit</code>对象。</p> <p>说明：</p> <ul> <li>一个<code>commit</code>对象一定对应一个<code>tree</code>对象（这个<code>tree</code>对象应该是一个完整项目仓库的快照）</li> <li><code>doc</code>目录下有一个<code>blob</code>对象，也就是<code>readme</code>文件。</li> </ul> <h2 id="6本文用到的命令总结">6、本文用到的命令总结</h2> <p>Git底层命令：</p> <ul> <li><code>git commit-tree</code>：生成一个<code>commit</code>对象。</li> <li><code>git cat-file -t 键</code>：查看Git对象的类型。</li> <li><code>git cat-file -p 键</code>：查看Git对象的内容。</li> </ul> <blockquote> <p>参考：</p> <ul> <li>https://blog.csdn.net/songyuequan/article/details/85862415</li> <li>https://www.cnblogs.com/jasongrass/p/10582465.html</li> </ul> </blockquote> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3251.htm">C语言：float、double表示范围</a></p>
                                                <p>下一个：<a href="/html/category/article-3253.htm">微服务架构介绍</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6038.htm" title="动物疫苗企业名单公示最新（动物疫苗生产厂家排名）">动物疫苗企业名单公示最新（动物疫苗生产厂家排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-4390.htm" title="襄阳市养狗（襄阳市养犬）">襄阳市养狗（襄阳市养犬）</a></li>
                        <li class="py-2"><a href="/html/category/article-6083.htm" title="动物疫苗的正确使用方法视频教程全集（动物疫苗制作流程）">动物疫苗的正确使用方法视频教程全集（动物疫苗制作流程）</a></li>
                        <li class="py-2"><a href="/html/category/article-6913.htm" title="动物医院需要几个执业兽医师证书 动物医院需要几个执业兽医师证书呢">动物医院需要几个执业兽医师证书 动物医院需要几个执业兽医师证书呢</a></li>
                        <li class="py-2"><a href="/html/category/article-6127.htm" title="宠物粮生产配方 宠物粮生产配方大全">宠物粮生产配方 宠物粮生产配方大全</a></li>
                        <li class="py-2"><a href="/html/category/article-6082.htm" title="动物医院的英文单词是什么（动物医院英文怎么写）">动物医院的英文单词是什么（动物医院英文怎么写）</a></li>
                        <li class="py-2"><a href="/html/category/article-4315.htm" title="1970年农历8月16日出生命运（1970年阴历8月16）">1970年农历8月16日出生命运（1970年阴历8月16）</a></li>
                        <li class="py-2"><a href="/html/category/article-4391.htm" title="足球100分2021（难以置信）足球100分陆姝，吴岚，足球100分，">足球100分2021（难以置信）足球100分陆姝，吴岚，足球100分，</a></li>
                        <li class="py-2"><a href="/html/category/article-6959.htm" title="申贤俊老婆图片（这都可以）申贤俊老婆结婚照，演员阳光，申贤俊，">申贤俊老婆图片（这都可以）申贤俊老婆结婚照，演员阳光，申贤俊，</a></li>
                        <li class="py-2"><a href="/html/category/article-4424.htm" title="动物疫苗龙头瑞普生物（瑞普生物禽流感疫苗）">动物疫苗龙头瑞普生物（瑞普生物禽流感疫苗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">59</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>