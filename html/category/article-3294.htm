<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3294.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>安装Docker、Harbor、Jenkins、Gitlab - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">安装Docker、Harbor、Jenkins、Gitlab</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>文章目录</h3> <ul> <li>系统平台信息</li> <li>依赖</li> <li> <ul> <li>Docker</li> <li> <ul> <li> <ul> <li>设置存储库</li> </ul> </li> <li>Docker-Compose</li> </ul> </li> <li>Go</li> <li>Java</li> <li>Maven</li> <li>Gitlab</li> <li> <ul> <li>安装</li> <li>配置</li> <li>启动</li> <li>使用Gitlab</li> <li> <ul> <li>[New project]->[Create blank project]</li> <li>Mac配置ssh登录</li> </ul> </li> </ul> </li> <li>Jenkins</li> <li> <ul> <li>安装</li> <li>配置</li> <li>修改镜像源</li> <li>启动</li> <li>登录Jenkins</li> <li>管理插件</li> <li>全局配置</li> <li> <ul> <li>[Manage Jenkins]->[Global Tool Configuration]</li> <li>[Manage Jenkins]->[Configure System]->[Publish over SSH]</li> </ul> </li> <li>在Jenkins容器内使用docker</li> </ul> </li> <li>Harbor</li> <li> <ul> <li>下载</li> <li>安装</li> <li>拉取/推送镜像</li> </ul> </li> </ul> </li> </ul> </div> <h1> 系统平台信息</h1> <p>OS: Linux Mint 20.3 Una</p> <p>Kernel Release: 5.13.0-35-generic</p> <p>Hardware Platform: x86_64</p> <p>CPU Model Name: Intel® Xeon® CPU E5-2680 v3 @ 2.50GHz</p> <p>CPU Cores: 48</p> <p>Main Memory: 125GB</p> <p>IP: 211.87.224.233</p> <h1> 依赖</h1> <h2> Docker</h2> <p>version 20.10.14</p> <p>旧版本的 Docker</p> <pre><code class="prism language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker.io containerd runc </code></pre> <h4> 设置存储库</h4> <pre><code class="prism language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> update  <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>     ca-certificates <span class="token punctuation">\</span>     <span class="token function">curl</span> <span class="token punctuation">\</span>     gnupg <span class="token punctuation">\</span>     lsb-release </code></pre> <pre><code class="prism language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> update </code></pre> <p>这里没有安装 docker-compose</p> <pre><code class="prism language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io </code></pre> <p>apt-cache madison docker-ce</p> <p>version = <code>5:20.10.16~3-0~ubuntu-focal</code></p> <pre><code>sudo apt-get install docker-ce=5:20.10.16~3-0~ubuntu-focal docker-ce-cli=5:20.10.16~3-0~ubuntu-focal containerd.io </code></pre> <pre><code>#1.配置阿里云的gpg curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -  #2.配置阿里云的docker镜像 sudo add-apt-repository "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"  #3.执行安装命令 sudo apt-get install docker-ce docker-ce-cli containerd.io </code></pre> <h3> Docker-Compose</h3> <p>docker-compose version 1.29.2</p> <p>安装</p> <pre><code class="prism language-shell"><span class="token function">sudo</span> <span class="token function">curl</span> -L <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>"</span> -o /usr/bin/docker-compose </code></pre> <p>加上可执行权限</p> <pre><code class="prism language-shell"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/bin/docker-compose </code></pre> <h2> Go</h2> <p>go version go1.17.7 linux/amd6</p> <h2> Java</h2> <p>openjdk version “1.8.0_312”</p> <p>path: /usr/lib/jvm/java-8-openjdk-amd64</p> <pre><code class="prism language-shell"><span class="token function">sudo</span> update-alternatives --config java </code></pre> <pre><code class="prism language-shell"><span class="token comment">#output</span> There are <span class="token number">3</span> choices <span class="token keyword">for</span> the alternative java <span class="token punctuation">(</span>providing /usr/bin/java<span class="token punctuation">)</span>.    Selection    Path                                            Priority   Status ------------------------------------------------------------ * <span class="token number">0</span>            /usr/lib/jvm/java-17-openjdk-amd64/bin/java      <span class="token number">1711</span>      auto mode   <span class="token number">1</span>            /usr/lib/jvm/java-11-openjdk-amd64/bin/java      <span class="token number">1111</span>      manual mode   <span class="token number">2</span>            /usr/lib/jvm/java-17-openjdk-amd64/bin/java      <span class="token number">1711</span>      manual mode   <span class="token number">3</span>            /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java   <span class="token number">1081</span>      manual mode  Press <span class="token operator"><</span>enter<span class="token operator">></span> to keep the current choice<span class="token punctuation">[</span>*<span class="token punctuation">]</span>, or <span class="token builtin class-name">type</span> selection number: </code></pre> <p><code>java -version</code> 检查</p> <h2> Maven</h2> <p>Apache Maven 3.8.5</p> <p>path: /opt/apache-maven-3.8.5</p> <ul> <li>jdk8编译插件配置</li> </ul> <pre><code class="prism language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>profile</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>id</span><span class="token punctuation">></span></span>jdk-8<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>id</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>activation</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>activeByDefault</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>jdk</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>jdk</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>activation</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>properties</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>maven.compiler.source</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>maven.compiler.target</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>profile</span><span class="token punctuation">></span></span> </code></pre> <ul> <li>maven仓库源</li> </ul> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation"><</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>name</span><span class="token punctuation">></span></span>Aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/central<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>mirror</span><span class="token punctuation">></span></span> </code></pre> <h2> Gitlab</h2> <p>使用docker安装 Gitlab</p> <h3> 安装</h3> <pre><code class="prism language-shell"><span class="token function">docker</span> search gitlab/ </code></pre> <pre><code class="prism language-shell"><span class="token function">docker</span> pull gitlab/gitlab-ce:latest </code></pre> <h3> 配置</h3> <pre><code class="prism language-shell"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /srv/gitlab <span class="token operator">&&</span> <span class="token builtin class-name">echo</span> <span class="token string">"export GITLAB_HOME=/srv/gitlab"</span> <span class="token operator">>></span> .profile <span class="token operator">&&</span> <span class="token builtin class-name">source</span> .profile </code></pre> <p>docker-compose.yml</p> <pre><code class="prism language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.6'</span> <span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">'gitlab/gitlab-ce:latest'</span>     <span class="token key atrule">container_name</span><span class="token punctuation">:</span> sdu<span class="token punctuation">-</span>weblab<span class="token punctuation">-</span>gitlab     <span class="token key atrule">restart</span><span class="token punctuation">:</span> always     <span class="token key atrule">hostname</span><span class="token punctuation">:</span> <span class="token string">'211.87.224.233'</span>     <span class="token key atrule">environment</span><span class="token punctuation">:</span>        <span class="token key atrule">GITLAB_OMNIBUS_CONFIG</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">         external_url 'http://211.87.224.233:8929'         gitlab_rails['gitlab_shell_ssh_port'] = 2224</span>     <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">'8929:8929'</span>       <span class="token punctuation">-</span> <span class="token string">'2224:22'</span>     <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">'$GITLAB_HOME/config:/etc/gitlab'</span>       <span class="token punctuation">-</span> <span class="token string">'$GITLAB_HOME/logs:/var/log/gitlab'</span>       <span class="token punctuation">-</span> <span class="token string">'$GITLAB_HOME/data:/var/opt/gitlab'</span> </code></pre> <p>注意点:</p> <p>external_url中的端口需要和ports映射的容器端口保持一致;</p> <p>gitlab_rails[‘gitlab_shell_ssh_port’]要和宿主机端口保持一致。</p> <h3> 启动</h3> <p>构建并启动</p> <pre><code class="prism language-shell"><span class="token function">docker-compose</span> -f ./docker-compose.yml up -d <span class="token comment"># 如果文件名为`docker-compose.yml`可以不指定-f</span> </code></pre> <p>强制重启</p> <pre><code class="prism language-shell"><span class="token function">docker-compose</span> up -d --force-recreate </code></pre> <p>重新构建并启动（反映yml的变化，一定是最新的）</p> <pre><code class="prism language-shell"><span class="token function">docker-compose</span> down <span class="token operator">&&</span> <span class="token function">docker-compose</span> up -d </code></pre> <p>注意：这个服务启动时间比较长，须等待一两分钟。</p> <p>检查是否成功运行：浏览器访问 http://211.87.224.233:8929 (这个8989是映射的宿主机port，当然你可以映射成其他端口)</p> <p>如果访问失败，注意云服务器的安全组或者firewall的端口开放情况（sudo ufw status）</p> <h3> 使用Gitlab</h3> <p>默认管理员账户：root</p> <p>查看配置文件得到密码</p> <pre><code class="prism language-shell"><span class="token comment"># 注意我们已经配置好数据卷映射了</span> <span class="token function">sudo</span> <span class="token function">cat</span> <span class="token variable">$GITLAB_HOME</span>/config/initial_root_password </code></pre> <p>可以再去修改一下密码（设置为： sduweblab）</p> <blockquote> <p>https://docs.gitlab.com/ee/install/docker.html</p> <p>https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template</p> </blockquote> <h4> [New project]->[Create blank project]</h4> <h4> Mac配置ssh登录</h4> <pre><code class="prism language-shell">jisongyang@SongyangJi-MacBookAir .ssh % <span class="token function">ssh</span> -p <span class="token number">2224</span> -T git@211.87.224.233 ssh: connect to <span class="token function">host</span> <span class="token number">211.87</span>.224.233 port <span class="token number">2224</span>: Connection refused </code></pre> <pre><code class="prism language-shell">jisongyang@SongyangJi-MacBookAir .ssh % <span class="token function">ssh</span> -T git@211.87.224.233 git@211.87.224.233's password: </code></pre> <h2> Jenkins</h2> <h3> 安装</h3> <p>jenkins: 2.346</p> <pre><code class="prism language-shell"><span class="token function">docker</span> pull jenkins/jenkins:latest </code></pre> <h3> 配置</h3> <p>docker-compse yml</p> <pre><code class="prism language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.6'</span> <span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">jenkins</span><span class="token punctuation">:</span>      <span class="token key atrule">image</span><span class="token punctuation">:</span> jenkins/jenkins<span class="token punctuation">:</span>latest     <span class="token key atrule">container_name</span><span class="token punctuation">:</span> sdu<span class="token punctuation">-</span>weblab<span class="token punctuation">-</span>jenkins<span class="token punctuation">-</span>latest     <span class="token key atrule">restart</span><span class="token punctuation">:</span> always     <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"18080:8080"</span>       <span class="token punctuation">-</span> <span class="token string">"50000:50000"</span>     <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/var/jenkins_home <span class="token comment"># jenkins:latest 的home目录，包括插件和配置等等</span>       <span class="token punctuation">-</span> <span class="token string">'$MAVEN_HOME:/opt/maven'</span>       <span class="token punctuation">-</span> <span class="token string">'$JAVA_HOME:/opt/java8'</span>       <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock       <span class="token punctuation">-</span> /usr/bin/docker<span class="token punctuation">:</span>/usr/bin/docker       <span class="token punctuation">-</span> /etc/docker/daemon.json<span class="token punctuation">:</span>/etc/docker/daemon.json </code></pre> <p>由于jenkins承担了打包的任务，因此将宿主机的jdk和maven挂载上去（另一种做法是自定义一个包含jdk和maven的jenkins镜像，有待尝试）。</p> <p>(其中有关docker的配置后面再解释)</p> <h3> 修改镜像源</h3> <p>否则大概率下载插件会失败！</p> <pre><code class="prism language-shell"><span class="token function">vim</span> data/hudson.model.UpdateCenter.xml </code></pre> <pre><code class="prism language-xml"><span class="token prolog"><?xml version='1.1' encoding='UTF-8'?></span> <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>sites</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>site</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>id</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>id</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>url</span><span class="token punctuation">></span></span>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>url</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>site</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation"></</span>sites</span><span class="token punctuation">></span></span> </code></pre> <h3> 启动</h3> <p>启动之后，查看日志发现写数据卷的时候权限不够。（有可能）</p> <pre><code class="prism language-shell"><span class="token function">sudo</span> <span class="token function">chmod</span> -R <span class="token number">777</span> data/ </code></pre> <p>给足data文件夹权限。(奇怪的是，docker-compose restart的时候还是要发现写权限不够)</p> <p>检查是否启动成功，访问 http://211.87.224.233:18080/</p> <p><strong>进入容器</strong></p> <pre><code class="prism language-shell"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it sdu-weblab-jenkins <span class="token function">bash</span> </code></pre> <h3> 登录Jenkins</h3> <pre><code class="prism language-shell"><span class="token comment"># 查看管理员日志密码（查看文件 or 使用docker-compose logs -f 查看日志）</span> <span class="token function">cat</span> data/secrets/initialAdminPassword <span class="token comment"># 可能没有文件读权限</span> </code></pre> <p>admin: f991e76fb99b4e3993ccdb52a9eaa8f7</p> <h3> 管理插件</h3> <p>入口：[Manage Jenkins]->[System Configuration]->[Manage Plugins]</p> <p><strong>必备插件</strong></p> <ul> <li>Git Parameter</li> <li>Publish Over SSH</li> <li>Gitlab</li> <li>Pipeline</li> </ul> <h3> 全局配置</h3> <h4> [Manage Jenkins]->[Global Tool Configuration]</h4> <p>配置jdk和maven的home。<br /> 其中MAVEN_HOME配置为<code>/opt/maven</code>; JAVA_HOME配置为<code>/opt/java8</code>（不错这两个文件夹其实是从宿主机映射过来的，其真实路径分别为宿主机的<code>$MAVEN_HOME</code>、<code>JAVA_HOME</code>，也就是<code>/opt/apache-maven-3.8.5</code>、<code>/usr/lib/jvm/java-8-openjdk-amd64</code>）</p> <h4> [Manage Jenkins]->[Configure System]->[Publish over SSH]</h4> <p>配置远程发布的机器，这里为了方便就配置本机即可。（这里在配置auth校验的时候最好使用密码校验，配置的私钥话可能因为不合规导致失败）</p> <h3> 在Jenkins容器内使用docker</h3> <p>两种方案，一种是在Jenkins镜像里就有docker，另一种是使用宿主机的docker。</p> <p>这里我们采取后者。</p> <blockquote> <p>参考 https://www.dockone.io/article/431</p> </blockquote> <p>这里只讲操作不讲原因和原理。</p> <p>第一步修改权限：</p> <pre><code class="prism language-shell"><span class="token builtin class-name">cd</span> /var/run <span class="token function">sudo</span> <span class="token function">chown</span> root:root docker.sock <span class="token operator">&&</span> <span class="token function">sudo</span> <span class="token function">chmod</span> o+rw docker.sock </code></pre> <p>第二步修改jenkins的docker-compose.yml</p> <pre><code class="prism language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.6'</span> <span class="token key atrule">services</span><span class="token punctuation">:</span>    <span class="token key atrule">jenkins</span><span class="token punctuation">:</span>      <span class="token key atrule">image</span><span class="token punctuation">:</span> jenkins/jenkins<span class="token punctuation">:</span>latest     <span class="token key atrule">container_name</span><span class="token punctuation">:</span> sdu<span class="token punctuation">-</span>weblab<span class="token punctuation">-</span>jenkins<span class="token punctuation">-</span>latest     <span class="token key atrule">restart</span><span class="token punctuation">:</span> always     <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"18080:8080"</span>       <span class="token punctuation">-</span> <span class="token string">"50000:50000"</span>     <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/var/jenkins_home <span class="token comment"># jenkins:latest 的home目录，包括插件和配置等等</span>       <span class="token punctuation">-</span> <span class="token string">'$MAVEN_HOME:/opt/maven'</span>       <span class="token punctuation">-</span> <span class="token string">'$JAVA_HOME:/opt/java8'</span>       <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock       <span class="token punctuation">-</span> /usr/bin/docker<span class="token punctuation">:</span>/usr/bin/docker       <span class="token punctuation">-</span> /etc/docker/daemon.json<span class="token punctuation">:</span>/etc/docker/daemon.json </code></pre> <p>重点就是挂载宿主机三个文件即可，至于这里为什么mount这三个就足够了，不做解释。</p> <p>记住重启一下</p> <pre><code>docker-compose up -d </code></pre> <p>检查：</p> <pre><code class="prism language-shell">jsy@wzai:~$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it a6d580bfb4e1 <span class="token function">bash</span> jenkins@a6d580bfb4e1:/$ jenkins@a6d580bfb4e1:/$ jenkins@a6d580bfb4e1:/$ <span class="token function">docker</span> version </code></pre> <h2> Harbor</h2> <h3> 下载</h3> <pre><code class="prism language-shell"><span class="token function">wget</span> https://github.com/goharbor/harbor/releases/download/v2.5.0/harbor-offline-installer-v2.5.0.tgz </code></pre> <h3> 安装</h3> <p><strong>解压</strong></p> <pre><code class="prism language-shell"><span class="token function">tar</span> -xzvf harbor-offline-installer-v2.5.0.tgz -C ./ </code></pre> <p>解压结果</p> <pre><code class="prism language-shell">jsy@wzai:~/devops$ <span class="token function">ls</span> harbor/ common.sh  harbor.v2.5.0.tar.gz  harbor.yml.tmpl  install.sh  LICENSE  prepare </code></pre> <p><strong>编辑配置文件</strong></p> <pre><code class="prism language-shell"><span class="token function">cp</span> harbor.yml.tmpl harbor.yml </code></pre> <p>修改hostname为主机ip，将htts相关内容注释掉（暂时不需要使用到https）、修改admin密码、修改http端口号。</p> <pre><code>hostname: 211.87.224.233  http:   # port for http, default is 80. If https enabled, this port will redirect to https port   port: 8930    harbor_admin_password: admin </code></pre> <p>安装：</p> <pre><code class="prism language-shell">./prepare <span class="token operator">&&</span> <span class="token function">sudo</span> ./install.sh </code></pre> <p>install过程分为这么几步：</p> <pre><code>[Step 0]: checking if docker is installed ... [Step 1]: checking docker-compose is installed ... [Step 2]: loading Harbor images ... [Step 3]: preparing environment ... [Step 4]: preparing harbor configs ... </code></pre> <p>安装完毕后检查一下：</p> <pre><code class="prism language-shell">jsy@wzai:~/devops/harbor$ <span class="token function">sudo</span> <span class="token function">docker-compose</span> <span class="token function">ps</span>       Name                    Command                 State                  Ports ---------------------------------------------------------------------------------------------- harbor-core         /harbor/entrypoint.sh          Up <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span> harbor-db           /docker-entrypoint.sh <span class="token number">96</span> <span class="token number">13</span>    Up <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span> harbor-jobservice   /harbor/entrypoint.sh          Up <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span> harbor-log          /bin/sh -c /usr/local/bin/     Up <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>   <span class="token number">127.0</span>.0.1:1514-<span class="token operator">></span><span class="token number">10514</span>/tcp                     <span class="token punctuation">..</span>. harbor-portal       nginx -g daemon off<span class="token punctuation">;</span>           Up <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span> nginx               nginx -g daemon off<span class="token punctuation">;</span>           Up <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>   <span class="token number">0.0</span>.0.0:8930-<span class="token operator">></span><span class="token number">8080</span>/tcp,:::89                                                                   <span class="token number">30</span>-<span class="token operator">></span><span class="token number">8080</span>/tcp redis               redis-server /etc/redis.conf   Up <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span> registry            /home/harbor/entrypoint.sh     Up <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span> registryctl         /home/harbor/start.sh          Up <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span> </code></pre> <p>浏览器访问检查</p> <h3> 拉取/推送镜像</h3> <p>下一步使用docker login到私服，需要将私服的htp地址配置到docker的不安全register中；</p> <pre><code class="prism language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/docker/daemon.json </code></pre> <p>写入</p> <pre><code class="prism language-json"><span class="token punctuation">{<!-- --></span>   <span class="token string-property property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"211.87.224.233:8930"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> </code></pre> <p>必须重启docker服务</p> <pre><code class="prism language-shell"><span class="token function">sudo</span> systemctl restart <span class="token function">docker</span> </code></pre> <p>镜像名称要求：私服地址/项目名/镜像名:版本</p> <pre><code class="prism language-shell"><span class="token comment"># docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span> <span class="token function">docker</span> tag IMAGE_ID 私服地址/项目名/镜像名:版本 </code></pre> <p><strong>举例</strong></p> <pre><code class="prism language-shell"><span class="token function">docker</span> tag hello-world <span class="token variable">$HARBOR_URL</span>/sdu-weblab/hello-world <span class="token comment"># 配置一下HARBOR_URL环境变量</span> </code></pre> <p>检查一下</p> <pre><code class="prism language-shell"><span class="token operator">></span> <span class="token function">docker</span> images  <span class="token comment"># 211.87.224.233:8930/sdu-weblab/hello-world   latest             feb5d9fea6a5   7 months ago   13.3kB</span> </code></pre> <pre><code class="prism language-shell"><span class="token comment"># 先登录后推送</span> <span class="token function">docker</span> login -u admin -p admin <span class="token variable">$HARBOR_URL</span> <span class="token function">docker</span> push <span class="token number">211.87</span>.224.233:8930/sdu-weblab/hello-world </code></pre> <p>推送成功</p> <pre><code class="prism language-shell">jsy@wzai:~$ <span class="token function">docker</span> push <span class="token number">211.87</span>.224.233:8930/sdu-weblab/hello-world Using default tag: latest The push refers to repository <span class="token punctuation">[</span><span class="token number">211.87</span>.224.233:8930/sdu-weblab/hello-world<span class="token punctuation">]</span> e07ee1baac5f: Pushed latest: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: <span class="token number">525</span> </code></pre> <p>拉取镜像也是一样的。</p> <pre><code class="prism language-shell"><span class="token comment"># 先删除本地的</span> <span class="token function">docker</span> image <span class="token function">rm</span> <span class="token number">211.87</span>.224.233:8930/sdu-weblab/hello-world <span class="token comment"># 直接粘贴浏览器的命令</span> <span class="token function">docker</span> pull <span class="token number">211.87</span>.224.233:8930/sdu-weblab/hello-world@sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 </code></pre> <blockquote> <p>https://github.com/jenkinsci/docker/blob/master/README.md</p> </blockquote></div> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3293.htm">Go增删改查 ——mysql</a></p>
                                                <p>下一个：<a href="/html/category/article-3295.htm">Vue刷新页面的三种方式</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-8108.htm" title="都别拦着我表情包图片（学到了）">都别拦着我表情包图片（学到了）</a></li>
                        <li class="py-2"><a href="/html/category/article-8292.htm" title="宠物用品一件代发货（宠物用品一件代发货源网）">宠物用品一件代发货（宠物用品一件代发货源网）</a></li>
                        <li class="py-2"><a href="/html/category/article-7832.htm" title="喜剧总动员贾玲冬花是哪一集（喜剧总动员）干货满满，">喜剧总动员贾玲冬花是哪一集（喜剧总动员）干货满满，</a></li>
                        <li class="py-2"><a href="/html/category/article-6959.htm" title="申贤俊老婆图片（这都可以）申贤俊老婆结婚照，演员阳光，申贤俊，">申贤俊老婆图片（这都可以）申贤俊老婆结婚照，演员阳光，申贤俊，</a></li>
                        <li class="py-2"><a href="/html/category/article-7695.htm" title="猫抓了出血了可以不打疫苗吗猫（猫抓了一下出了点血不打疫苗可以吗）">猫抓了出血了可以不打疫苗吗猫（猫抓了一下出了点血不打疫苗可以吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7648.htm" title="动物医院卡通画（动物医院动画片）">动物医院卡通画（动物医院动画片）</a></li>
                        <li class="py-2"><a href="/html/category/article-7051.htm" title="开个宠物食品加工厂要多少钱呢 开个宠物食品加工厂要多少钱呢">开个宠物食品加工厂要多少钱呢 开个宠物食品加工厂要多少钱呢</a></li>
                        <li class="py-2"><a href="/html/category/article-7786.htm" title="宠物领养机构名称大全（宠物领养机构名称大全最新）">宠物领养机构名称大全（宠物领养机构名称大全最新）</a></li>
                        <li class="py-2"><a href="/html/category/article-8246.htm" title="济南狗狗领养免费平台有哪些（济南狗狗领养免费平台有哪些公司）">济南狗狗领养免费平台有哪些（济南狗狗领养免费平台有哪些公司）</a></li>
                        <li class="py-2"><a href="/html/category/article-7556.htm" title="动物疫苗打一次管多长时间啊多少钱 动物疫苗打一次管多长时间啊多少钱啊">动物疫苗打一次管多长时间啊多少钱 动物疫苗打一次管多长时间啊多少钱啊</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>