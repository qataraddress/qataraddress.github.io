<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3278.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>async-validator 源码学习笔记validate 方法 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">async-validator 源码学习笔记validate 方法</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p data-track="1"><span style="font-size: 1.5em;">一、validate 介绍</span></p> <p data-track="4">validate 是 async-validator 的核心方法，不仅需要掌握它的使用，也需要了解它的原理。</p> <p class="pgc-h-arrow-right" data-track="9">使用</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">validator.validate( source, [options], callback ) .then(()</span>=&gt;<span style="color: rgba(0, 0, 0, 1)">{}) .</span><span style="color: rgba(0, 0, 255, 1)">catch</span>( ({errors, fields}) =&gt; {})</pre> </div> <p>参数</p> <ul> <li data-track="14">source 是需要验证的对象</li> <li data-track="15">options 是描述验证的处理选项的对象</li> <li data-track="16">callback 校验完成的回调函数</li> </ul> <p data-track="12">返回值是一个 promise 对象</p> <ul> <li data-track="17">then 是校验通过执行。</li> <li data-track="18">catch 校验失败执行。</li> <li data-track="19">errors 是 error 的数组，fields 是一个对象，包含监听对象和 error 的数组。</li> </ul> <p data-track="5">validate 方法校验的流程为：</p> <div class="pgc-img"><img decoding="async" src="https://p26.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/c86f5b74fc02419aafa47349409359c8?from=pc" alt="async-validator 源码学习笔记（六）：validate 方法" class="syl-page-img"/></p> <p class="pgc-img-caption"> </div> <p data-track="25">源码是如何定义 validate 方法的呢？</p> <h2 class="pgc-h-arrow-right" data-track="21">二、validate 源码解读</h2> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)"> 参数：  source_ 即 source ：校验的对象。  o 即 options ：描述验证处理选项。  oc 即 callback：验证完成的回调函数。</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)"> _proto.validate</span>=<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> validate(source_, o, oc) { ...</span><span style="color: rgba(0, 0, 255, 1)">var</span> source =<span style="color: rgba(0, 0, 0, 1)"> source_;</span><span style="color: rgba(0, 0, 255, 1)">var</span> options =<span style="color: rgba(0, 0, 0, 1)"> o;</span><span style="color: rgba(0, 0, 255, 1)">var</span> callback =<span style="color: rgba(0, 0, 0, 1)"> oc;  ...</span><span style="color: rgba(0, 0, 255, 1)">return</span> asyncMap(series, options,<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (data, doIt) {   ....  },</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (results) {   complete(results);  }, source); };</span></pre> </div> <p data-track="23">validate 方法前半部分主要是在构造一个完整的 series 对象，返回的是 asyncMap 方法。我们来看看 validate 方法内部的几个方法，分别作用是什么。</p> <p data-track="31">参数处理</p> <div class="cnblogs_code"> <pre>_proto.validate =<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> validate(source_, o, oc) { ...</span><span style="color: rgba(0, 0, 255, 1)">var</span> source =<span style="color: rgba(0, 0, 0, 1)"> source_;</span><span style="color: rgba(0, 0, 255, 1)">var</span> options =<span style="color: rgba(0, 0, 0, 1)"> o;</span><span style="color: rgba(0, 0, 255, 1)">var</span> callback =<span style="color: rgba(0, 0, 0, 1)"> oc;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> options 是可选参数</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果 options 是函数时，说明第二个是回调函数，options 是空对象</span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">typeof</span> options === 'function'<span style="color: rgba(0, 0, 0, 1)">) {   callback</span>=<span style="color: rgba(0, 0, 0, 1)"> options;   options</span>=<span style="color: rgba(0, 0, 0, 1)"> {};  }  ... };</span></pre> </div> <p data-track="20">检查校验规则</p> <p data-track="36">检查校验规则是否为空，为空的时候立即执行回调。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 255, 1)">this</span>.rules || Object.keys(<span style="color: rgba(0, 0, 255, 1)">this</span>.rules).length === 0<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (callback) {   callback(</span><span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">, source);  }</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> Promise.resolve(source); }</span></pre> </div> <h3 data-track="32">complete 函数</h3> <p data-track="40">complete 函数主要是为了整合 errors 数组和 fields 对象，然后用 callback 回调函数把它们返回。</p> <div class="cnblogs_code"> <pre>_proto.validate =<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> validate(source_, o, oc) {  ...</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> complete(results) {</span><span style="color: rgba(0, 0, 255, 1)">var</span> errors =<span style="color: rgba(0, 0, 0, 1)"> [];</span><span style="color: rgba(0, 0, 255, 1)">var</span> fields =<span style="color: rgba(0, 0, 0, 1)"> {};</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 定义 add 方法，给 errors 添加元素 error</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> add(e) {</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (Array.isArray(e)) {</span><span style="color: rgba(0, 0, 255, 1)">var</span><span style="color: rgba(0, 0, 0, 1)"> _errors;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 给 errors 添加 error</span>     errors = (_errors =<span style="color: rgba(0, 0, 0, 1)"> errors).concat.apply(_errors, e);    }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {     errors.push(e);    }   }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 迭代 resaults 把 resaults 中的每个 error 都加入 errors</span><span style="color: rgba(0, 0, 255, 1)">for</span> (<span style="color: rgba(0, 0, 255, 1)">var</span> i = 0; i &lt; results.length; i++<span style="color: rgba(0, 0, 0, 1)">) {   add(results[i]);   }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果最后结果 errors 为空，就返回 null</span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">errors.length) {    callback(</span><span style="color: rgba(0, 0, 255, 1)">null</span><span style="color: rgba(0, 0, 0, 1)">, source);   }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">把 errors 中相同 field 的 error 合并，转换为对象的形式</span>    fields =<span style="color: rgba(0, 0, 0, 1)"> convertFieldsError(errors);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> errors fields 回调传出参数</span><span style="color: rgba(0, 0, 0, 1)">   callback(errors, fields);   }  }</span><span style="color: rgba(0, 0, 255, 1)">return</span> asyncMap(series, options,<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (data, doIt) {    ....   },</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (results) {   complete(results);  }, source); };</span></pre> </div> <h3 class="syl-line-pure-english" data-track="37">options.message</h3> <p data-track="44">messsage 主要是定义检验失败后的错误提示信息，官方提供了一个默认模板，我们也可以进行定制化，此处的 options.message 就是来处理到底使用哪个的?根据情况到底是使用默认还是合并。</p> <div class="cnblogs_code"> <pre>_proto.validate =<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> validate(source_, o, oc) {  ...</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果 options 中有 message 属性</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (options.messages) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建一个 message ，使用的是默认</span><span style="color: rgba(0, 0, 255, 1)">var</span> messages$1 =<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.messages();</span><span style="color: rgba(0, 0, 255, 1)">if</span> (messages$1 ===<span style="color: rgba(0, 0, 0, 1)"> messages) {    messages$</span>1 =<span style="color: rgba(0, 0, 0, 1)"> newMessages();   }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 将options 的 message 与默认的 message 合并</span>    deepMerge(messages$1<span style="color: rgba(0, 0, 0, 1)">, options.messages);    options.messages</span>= messages$1<span style="color: rgba(0, 0, 0, 1)">;   }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> options 没有 message 属性</span>    options.messages =<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.messages();   }</span><span style="color: rgba(0, 0, 255, 1)">return</span> asyncMap(series, options,<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (data, doIt) {    ....   },</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (results) {     complete(results);   }, source); };</span></pre> </div> <h3 data-track="42">series 对象</h3> <p data-track="47">生成的 serise 对象，目的是为了统一最终的数据格式。</p> <div class="cnblogs_code"> <pre>_proto.validate =<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> validate(source_, o, oc) {  ...</span><span style="color: rgba(0, 0, 255, 1)">var</span> series =<span style="color: rgba(0, 0, 0, 1)"> {};</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> keys 是 rule 的所有键</span><span style="color: rgba(0, 0, 255, 1)">var</span> keys = options.keys || Object.keys(<span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.rules);  keys.forEach(</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (z) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> arr 存放 rules[z] 的一个数组</span><span style="color: rgba(0, 0, 255, 1)">var</span> arr =<span style="color: rgba(0, 0, 0, 1)"> _this2.rules[z];</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> value 存放 source[z] 是一个值或对象</span><span style="color: rgba(0, 0, 255, 1)">var</span> value =<span style="color: rgba(0, 0, 0, 1)"> source[z];   arr.forEach(</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (r) {</span><span style="color: rgba(0, 0, 255, 1)">var</span> rule =<span style="color: rgba(0, 0, 0, 1)"> r;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 当有transform属性而且是个函数时，要提前把值转换</span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">typeof</span> rule.transform === 'function'<span style="color: rgba(0, 0, 0, 1)">) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 浅拷贝下，打破引用</span><span style="color: rgba(0, 0, 255, 1)">if</span> (source ===<span style="color: rgba(0, 0, 0, 1)"> source_) {      source</span>=<span style="color: rgba(0, 0, 0, 1)"> _extends({}, source);     }     value</span>= source[z] =<span style="color: rgba(0, 0, 0, 1)"> rule.transform(value);    }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 浅拷贝打破引用</span><span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">typeof</span> rule === 'function'<span style="color: rgba(0, 0, 0, 1)">) {     rule</span>=<span style="color: rgba(0, 0, 0, 1)"> {      validator: rule      };     }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {      rule</span>=<span style="color: rgba(0, 0, 0, 1)"> _extends({}, rule);     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Fill validator. Skip if nothing need to validate</span>     rule.validator =<span style="color: rgba(0, 0, 0, 1)"> _this2.getValidationMethod(rule);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 异常处理</span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">rule.validator) {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;      }     rule.field</span>=<span style="color: rgba(0, 0, 0, 1)"> z;     rule.fullField</span>= rule.fullField ||<span style="color: rgba(0, 0, 0, 1)"> z;     rule.type</span>=<span style="color: rgba(0, 0, 0, 1)"> _this2.getType(rule);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 生成完整的 series</span>     series[z] = series[z] ||<span style="color: rgba(0, 0, 0, 1)"> [];     series[z].push({     rule: rule,     value: value,     source: source,     field: z    });   });  });</span><span style="color: rgba(0, 0, 255, 1)">return</span> asyncMap(series, options,<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (data, doIt) {    ....   },</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (results) {       complete(results);   }, source); };</span></pre> </div> <h3 class="syl-line-pure-english" data-track="46">asyncMap</h3> <p data-track="48">asyncMap 作为一个返回函数，不得不说它又是什么内容呢？</p> <p data-track="51">异步迭代用的 asyncMap 函数并没有多长，它主要实现两个功能，第一是决定是串行还是并行的执行单步校验，第二个功能是实现异步，把整个迭代校验过程封装到一个 promise 中，实现了整体上的异步。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> asyncMap(objArr, option, func, callback, source) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果option.first选项为真，说明第一个error产生时就要报错</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)"> (option.first) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> pending 是一个promise</span><span style="color: rgba(0, 0, 255, 1)">var</span> _pending =<span style="color: rgba(0, 0, 255, 1)">new</span> Promise(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (resolve, reject) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 定义一个函数next，这个函数先调用callback，参数是errors</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 再根据errors的长度决定resolve还是reject</span><span style="color: rgba(0, 0, 255, 1)">var</span> next =<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> next(errors) {     callback(errors);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> reject的时候，返回一个AsyncValidationError的实例</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 实例化时第一个参数是errors数组，第二个参数是对象类型的errors</span><span style="color: rgba(0, 0, 255, 1)">return</span> errors.length ? reject(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);    };</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 把对象扁平化为数组flattenArr</span><span style="color: rgba(0, 0, 255, 1)">var</span> flattenArr =<span style="color: rgba(0, 0, 0, 1)"> flattenObjArr(objArr);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 串行</span><span style="color: rgba(0, 0, 0, 1)">   asyncSerialArray(flattenArr, func, next);   });</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 捕获error</span>   _pending["catch"](<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (e) {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> e;   });</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> _pending;   }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 如果option.first选项为假，说明所有的error都产生时才报错</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 当指定字段的第一个校验规则产生error时调用callback，不再继续处理相同字段的校验规则。</span><span style="color: rgba(0, 0, 255, 1)">var</span> firstFields = option.firstFields ===<span style="color: rgba(0, 0, 255, 1)">true</span> ? Object.keys(objArr) : option.firstFields ||<span style="color: rgba(0, 0, 0, 1)"> [];</span><span style="color: rgba(0, 0, 255, 1)">var</span> objArrKeys =<span style="color: rgba(0, 0, 0, 1)"> Object.keys(objArr);</span><span style="color: rgba(0, 0, 255, 1)">var</span> objArrLength =<span style="color: rgba(0, 0, 0, 1)"> objArrKeys.length;</span><span style="color: rgba(0, 0, 255, 1)">var</span> total = 0<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">var</span> results =<span style="color: rgba(0, 0, 0, 1)"> [];</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 这里定义的函数next和上面的类似，只不过多了total的判断</span><span style="color: rgba(0, 0, 255, 1)">var</span> pending =<span style="color: rgba(0, 0, 255, 1)">new</span> Promise(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (resolve, reject) {</span><span style="color: rgba(0, 0, 255, 1)">var</span> next =<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> next(errors) {       results.push.apply(results, errors);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 只有全部的校验完才能执行最后的callback和reject</span>       total++<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">if</span> (total ===<span style="color: rgba(0, 0, 0, 1)"> objArrLength) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 这个callback和reject/resolve是这个库既能回调函数又能promise的核心</span><span style="color: rgba(0, 0, 0, 1)">        callback(results);</span><span style="color: rgba(0, 0, 255, 1)">return</span> results.length ? reject(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> AsyncValidationError(results, convertFieldsError(results))) : resolve(source);       }     };</span><span style="color: rgba(0, 0, 255, 1)">if</span> (!<span style="color: rgba(0, 0, 0, 1)">objArrKeys.length) {       callback(results);       resolve(source);     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 当firstFields中指定了该key时，说明该字段的第一个校验失败产生时就停止并调用callback</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 所以是串行的asyncSerialArray</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 没有指定该key，说明该字段的校验error需要都产生，就并行asyncParallelArray</span>     objArrKeys.forEach(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (key) {</span><span style="color: rgba(0, 0, 255, 1)">var</span> arr =<span style="color: rgba(0, 0, 0, 1)"> objArr[key];</span><span style="color: rgba(0, 0, 255, 1)">if</span> (firstFields.indexOf(key) !== -1<span style="color: rgba(0, 0, 0, 1)">) {         asyncSerialArray(arr, func, next);       }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {         asyncParallelArray(arr, func, next);       }     });   });</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 捕获error，添加错误处理</span>   pending["catch"](<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> (e) {</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> e;   });</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 返回promise实例</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> pending; }</span></pre> </div> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3277.htm">Python并发编程之多进程</a></p>
                                                <p>下一个：<a href="/html/category/article-3279.htm">微信小程序的自定义导航栏组件和部分数据处理方法</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3445.htm" title="基于YARN HA集群的Spark HA集群">基于YARN HA集群的Spark HA集群</a></li>
                        <li class="py-2"><a href="/html/category/article-3392.htm" title="Python置换操作浅析(a, b=b, a)【Python】">Python置换操作浅析(a, b=b, a)【Python】</a></li>
                        <li class="py-2"><a href="/html/category/article-3402.htm" title="微信小程序自定义顶部导航栏封装">微信小程序自定义顶部导航栏封装</a></li>
                        <li class="py-2"><a href="/html/category/article-3415.htm" title="浏览器禁用Cookie,基于Cookie的会话跟踪机制失效的解决的方法">浏览器禁用Cookie,基于Cookie的会话跟踪机制失效的解决的方法</a></li>
                        <li class="py-2"><a href="/html/category/article-3381.htm" title="vue3 setup如何使用props">vue3 setup如何使用props</a></li>
                        <li class="py-2"><a href="/html/category/article-3404.htm" title="【Spring】spring的反射机制详解">【Spring】spring的反射机制详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3397.htm" title="「Spring Boot 系列」05. Spring Boot Profiles（多环境配置）">「Spring Boot 系列」05. Spring Boot Profiles（多环境配置）</a></li>
                        <li class="py-2"><a href="/html/category/article-3410.htm" title="innoDB如何解决幻读详解">innoDB如何解决幻读详解</a></li>
                        <li class="py-2"><a href="/html/category/article-4315.htm" title="1970年农历8月16日出生命运（1970年阴历8月16）">1970年农历8月16日出生命运（1970年阴历8月16）</a></li>
                        <li class="py-2"><a href="/html/category/article-3412.htm" title="sql 如何交换一个字符两侧字符的顺序_中级数据分析-SQL简单查询">sql 如何交换一个字符两侧字符的顺序_中级数据分析-SQL简单查询</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>