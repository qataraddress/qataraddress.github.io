<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3148.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>ASP.NET Core 在 IIS 下的两种部署模式详解 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">ASP.NET Core 在 IIS 下的两种部署模式详解</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p>KestrelServer最大的优势体现在它的跨平台的能力，如果ASP.NET CORE应用只需要部署在Windows环境下，IIS也是不错的选择。ASP.NET CORE应用针对IIS具有两种部署模式，它们都依赖于一个IIS针对ASP.NET CORE Core的扩展模块。本文提供的示例演示已经同步到《<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/artech/p/inside-asp-net-core-6.html"  rel="nofollow">ASP.NET Core 6框架揭秘-实例演示版</a>》）</p> <blockquote> <p>一、ASP.NET CORE Core Module<br /> 二、 In-Process部署模式<br /> 三、Out-of-Process部署模式<br /> 四、&lt;aspnetcore&gt;配置</p> </blockquote> <h1><font size="4">一、ASP.NET CORE Core Module</font></h1> <p>IIS其实也是按照管道的方式来处理请求的，但是IIS管道和ASP.NET CORE中间件管道有本质的不同。对于部署在IIS中的Web应用来说，从最初接收到请求到最终将响应发出去，这段处理流程被细分为一系列固定的步骤，每个都具有一个或者两个（前置+后置）对应的事件或者回调。我们可以利用自定义的Module注册相应的事件或回调在适当的时机接管请求，并按照自己希望的方式对它进行处理。</p> <p>IIS提供了一系列原生（Native）的Module，我们也可以使用任意.NET语言编写托管的Module，整合IIS和ASP.NET CORE 的这个ASP.NET CORE Core Module就是一个原生的Module。它利用注册的事件将请求从IIS管道中拦截下来，并转发给ASP.NET CORE管道进行处理。相应的安装包可以从https://dotnet.microsoft.com/permalink/dotnetcore-current-windows-runtime-bundle-installer下载。</p> <h1 id="s1805"><font size="4">二、 In-Process部署模式</font></h1> <p>ASP.NET CORE在IIS下有In-Process和Out-of-Process两种部署模式。In-Process模式下的ASP.NET CORE应用运行在IIS的工作进程w3wp.exe中（如果采用IIS Express，工作进程为iisexpress.exe）。如图18-7所示，ASP.NET CORE应用在这种模式下使用的服务器类型是IISHttpServer，上述的ASP.NET CORE Core Module会将原始的请求转发给这个服务器，并将后者生成响应转交给IIS服务器进行回复。</p> <p><img decoding="async" alt="ASP.NET Core Module in the in-process hosting scenario" src="http://img.555519.xyz/uploads3/20220510/95a7c542a6fde3f2babe5bca976ea609.jpg"><br />图1 In-Process部署模式</p> <p>In-Process是默认采用的部署模式，所以我们不需要为此做任何设置，接下来我们就来演示一下具体的部署方式。我们在IIS的默认站点（Defaut Web Site）创建一个名为WebApp的应用，并将映射的物理路径设置为“C:\App”。然后我们创建一个空的ASP.NET CORE程序，并编写了如下这个将当前进程名称作为响应内容的演示程序。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span> System.Diagnostics; var app = WebApplication.Create(args); app.Run(context =&gt; context.Response.WriteAsync(Process.GetCurrentProcess().ProcessName)); app.Run();</pre> </div> <p>然后我们在Visual Studio的解决方案视图右键选择该项目，在弹出的菜单中选择“发布（Publish）”选项，创建一个指向“C:\App”的Publish Profile，然后执行这个Profile完成发布工作。应用发布也可以执行命令行“dotnet publish”来完成。应用部署好之后，我们利用浏览器采用地址“http://localhost/webapp”访问部署好的应用，从图2所示的输出结果可以看出ASP.NET CORE应用实际上就运行在IIS的工作进程中。</p> <p><a href="https://img2022.cnblogs.com/blog/19327/202203/19327-20220331080622045-2134420693.jpg" rel="nofollow" class="fancybox" data-fancybox-group="button"><img decoding="async" width="240" height="99" title="clip_image004" style="border: 0 currentColor; border-image: none; display: inline; background-image: none" alt="clip_image004" src="http://img.555519.xyz/uploads3/20220510/fc986b93ff7cf6569e0e8e9ba4dbebc6.jpg"></a></p> <p>图2 In-Process模式下的进程名称</p> <p>如果我查看此时的部署目录（“C:\App”），会发现生成的程序集和配置文件。应用既然部署在IIS中，那么具体的配置自然定义在web.config中，如下所示的就是这个文件的内容。我们会发现所有的请求（path="*" verb="*"）都被映射到“AspNetCoreModuleV2”这个Module上，这就是上面介绍的ASP.NET CORE Core Module。至于这个Module如果启动ASP.NET CORE管道并与之交互，则由后面的&lt;aspNetCore&gt;配置节来控制，可以看到它将表示部署模式的hostingModel属性设置为“inprocess”。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">&lt;?</span>xml version="1.0" encoding="utf-8"<span style="color: rgba(0, 0, 255, 1)">?&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">configuration</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">location</span><span style="color: rgba(255, 0, 0, 1)">path</span>=<span style="color: rgba(0, 0, 255, 1)">"."</span><span style="color: rgba(255, 0, 0, 1)">inheritInChildApplications</span>=<span style="color: rgba(0, 0, 255, 1)">"false"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">system.webServer</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">handlers</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">add</span><span style="color: rgba(255, 0, 0, 1)">name</span>=<span style="color: rgba(0, 0, 255, 1)">"aspNetCore"</span><span style="color: rgba(255, 0, 0, 1)">path</span>=<span style="color: rgba(0, 0, 255, 1)">"*"</span><span style="color: rgba(255, 0, 0, 1)">verb</span>=<span style="color: rgba(0, 0, 255, 1)">"*"</span><span style="color: rgba(255, 0, 0, 1)">modules</span>=<span style="color: rgba(0, 0, 255, 1)">"AspNetCoreModuleV2"</span><span style="color: rgba(255, 0, 0, 1)">resourceType</span>=<span style="color: rgba(0, 0, 255, 1)">"Unspecified"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">handlers</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">aspNetCore</span><span style="color: rgba(255, 0, 0, 1)">processPath</span>=<span style="color: rgba(0, 0, 255, 1)">"dotnet"</span><span style="color: rgba(255, 0, 0, 1)">arguments</span>=<span style="color: rgba(0, 0, 255, 1)">".\App.dll"</span><span style="color: rgba(255, 0, 0, 1)">stdoutLogEnabled</span>=<span style="color: rgba(0, 0, 255, 1)">"false"</span><span style="color: rgba(255, 0, 0, 1)">stdoutLogFile</span>=<span style="color: rgba(0, 0, 255, 1)">".\logs\stdout"</span><span style="color: rgba(255, 0, 0, 1)">hostingModel</span>=<span style="color: rgba(0, 0, 255, 1)">"<font color="#ff0000" size="4"><strong>inprocess</strong></font>"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">system.webServer</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">location</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">configuration</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 128, 0, 1)">&lt;!--ProjectGuid: 243DF55D-2E11-481F-AA7A-141C2A75792D--&gt;</span></pre> </div> <p>In-Process模式会注册如下这个IISHttpServer，对应的配置选项定义在IISServerOptions中。如果具有同步读写请求和响应主体内容的需要，我们需要将AllowSynchronousIO属性（默认为False）设置为True。如果将AutomaticAuthentication属性返回True（默认值），认证用户将自动赋值给HttpContext上下文的User属性。我们可以利用MaxRequestBodyBufferSize（默认为1,048,576）和MaxRequestBodySize属性（默认为30,000,000）设置接收请求主体的缓冲区的容量，和最大请求主体的字节数。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span> IISHttpServer : IServer, IDisposable {<span style="color: rgba(0, 0, 255, 1)">public</span> IFeatureCollection Features {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> IISHttpServer(IISNativeApplication nativeApplication, IHostApplicationLifetime applicationLifetime,IAuthenticationSchemeProvider authentication, IOptions&lt;IISServerOptions&gt; options, ILogger&lt;IISHttpServer&gt; logger);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">unsafe</span> Task StartAsync&lt;TContext&gt;(IHttpApplication&lt;TContext&gt; application, CancellationToken cancellationToken);<span style="color: rgba(0, 0, 255, 1)">public</span> Task StopAsync(CancellationToken cancellationToken); }</pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> IISServerOptions {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> 	AllowSynchronousIO {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> 	AutomaticAuthentication {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span>? 	AuthenticationDisplayName {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">int</span> 	        MaxRequestBodyBufferSize {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">long</span>? 	MaxRequestBodySize {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; } }</pre> </div> <p>针对IISHttpServer的注册实现在IWebHostBuilder接口如下这个UseIIS扩展方法中。由于这个方法并没有提供一个Action&lt;IISServerOptions&gt;委托参数对IISServerOptions配置选项进行设置，所以我们不得不采用原始的对它进行设置。由于IHostBuider接口ConfigureWebHostDefaults扩展方法内部会调用这个方法, 我们并不需要为此做额外的工作。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">class</span> WebHostBuilderIISExtensions {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span> IWebHostBuilder UseIIS(<span style="color: rgba(0, 0, 255, 1)">this</span> IWebHostBuilder hostBuilder); }</pre> </div> <h1 id="s1806"><font size="4">三、Out-of-Process部署模式</font></h1> <p>ASP.NET CORE应用在IIS中还可以采用Out-of -Process模式进行部署。如图3所示，在这种部署下，采用KestrelServer的ASP.NET CORE应用运行在独立的dotnet.exe进程中。当IIS接受到针对目标应用的请求时，如果目标应用所在的进程并未启动，ASP.NET CORE Core Module还负责执行dotnet命令激活此进程，相当于充当了WAS（Windows Activation Service）的作用。</p> <p><img decoding="async" alt="ASP.NET Core Module in the out-of-process hosting scenario" src="http://img.555519.xyz/uploads3/20220510/ec813522645f180efb6c242e1c41fc4d.jpg"><br />图3 Out-of-Process部署模式</p> <p>在激活ASP.NET CORE承载进程之前，ASP.NET CORE Core Module会选择一个可用的端口号，该端口号和当前应用的路径（该路径将作用ASP.NET CORE应用的PathBase）被写入环境变量，对应的环境变量名称分别为“<font color="#ff0000">ASPNETCORE_PORT</font>”和“<font color="#ff0000">ASPNETCORE_APPL_PATH</font>”。以Out-of-Process模式部署的ASP.NET CORE应用只会接收IIS转发给它的请求，为了能够过滤其它来源的请求，ASP.NET CORE Core Module会生成一个Token并写入环境变量“<font color="#ff0000">ASPNETCORE_TOKEN</font>”。后续转发的请求会利用一个报头“MS-ASPNETCORE-TOKEN”传递此Token，ASP.NET CORE应用会校验是否与之前生成的Token匹配。</p> <p>ASP.NET CORE Core Module还会利用环境变量传递其他一些设置，认证方案会写入环境变量“<font color="#ff0000">ASPNETCORE_IIS_HTTPAUTH</font>”，另一个“<font color="#ff0000">ASPNETCORE_IIS_WEBSOCKETS_SUPPORTED</font>”环境变量用来设置针对Web Socket的支持状态。由于这些环境变量名称的前缀都是“ASPNETCORE_”，所以它们会作为默认配置源。KestrelServer最终会绑定到基于该端口的本地终结点（“localhost”）进行监听。由于监听地址是由ASP.NET CORE Core Module控制的，所以它只需要将请求往该地址进行转发，最终将接收到响应交给IIS返回即可。由于这里涉及本地回环网络（Loopback）的访问，其性能自然不如In-Process部署模式。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">&lt;?</span>xml version="1.0" encoding="utf-8"<span style="color: rgba(0, 0, 255, 1)">?&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">configuration</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">location</span><span style="color: rgba(255, 0, 0, 1)">path</span>=<span style="color: rgba(0, 0, 255, 1)">"."</span><span style="color: rgba(255, 0, 0, 1)">inheritInChildApplications</span>=<span style="color: rgba(0, 0, 255, 1)">"false"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">system.webServer</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">handlers</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">add</span><span style="color: rgba(255, 0, 0, 1)">name</span>=<span style="color: rgba(0, 0, 255, 1)">"aspNetCore"</span><span style="color: rgba(255, 0, 0, 1)">path</span>=<span style="color: rgba(0, 0, 255, 1)">"*"</span><span style="color: rgba(255, 0, 0, 1)">verb</span>=<span style="color: rgba(0, 0, 255, 1)">"*"</span><span style="color: rgba(255, 0, 0, 1)">modules</span>=<span style="color: rgba(0, 0, 255, 1)">"AspNetCoreModuleV2"</span><span style="color: rgba(255, 0, 0, 1)">resourceType</span>=<span style="color: rgba(0, 0, 255, 1)">"Unspecified"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">handlers</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">aspNetCore</span><span style="color: rgba(255, 0, 0, 1)">processPath</span>=<span style="color: rgba(0, 0, 255, 1)">"dotnet"</span><span style="color: rgba(255, 0, 0, 1)">arguments</span>=<span style="color: rgba(0, 0, 255, 1)">".\App.dll"</span><span style="color: rgba(255, 0, 0, 1)">stdoutLogEnabled</span>=<span style="color: rgba(0, 0, 255, 1)">"false"</span><span style="color: rgba(255, 0, 0, 1)">stdoutLogFile</span>=<span style="color: rgba(0, 0, 255, 1)">".\logs\stdout"</span><span style="color: rgba(255, 0, 0, 1)">hostingModel</span>=<span style="color: rgba(0, 0, 255, 1)">"<font color="#ff0000" size="4"><strong>outofprocess</strong></font>"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">system.webServer</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">location</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">configuration</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre> </div> <p>我们在上面演示了In-Process的部署方式，现在我们直接修改配置文件web.config，按照上面的方式将&lt;aspNetCore&gt;配置节的hostingModel属性设置为“outofprocess”，部署的应用就自动切换到Out-of-Process。此时再次以相同的方式访问部署的应用，我们会发现浏览器上显示的进程名称变成了“dotnet”。</p> <p><a href="https://img2022.cnblogs.com/blog/19327/202203/19327-20220331080622714-234320873.jpg" rel="nofollow" class="fancybox" data-fancybox-group="button"><img decoding="async" width="240" height="98" title="clip_image008" style="border: 0 currentColor; border-image: none; display: inline; background-image: none" alt="clip_image008" src="http://img.555519.xyz/uploads3/20220510/1445424619fe6a2b51c994eef465e3be.jpg"></a></p> <p>图4 Out-of-Process模式下的进程名称</p> <p>部署模式可以直接定义在项目文件中，如果按照如下的方式将AspNetCoreHostingModel属性设置为“OutOfProcess”，那么发布后生成的web.config中针对部署模式的设置将随之改变。该属性默认值为“InProcess”，我们也可以显式进行设置。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">Project</span><span style="color: rgba(255, 0, 0, 1)">Sdk</span>=<span style="color: rgba(0, 0, 255, 1)">"Microsoft.NET.Sdk.Web"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">PropertyGroup</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">TargetFramework</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>net6.0<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">TargetFramework</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">Nullable</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>enable<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">Nullable</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">ImplicitUsings</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>enable<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">ImplicitUsings</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">NoDefaultLaunchSettingsFile</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span>true<span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">NoDefaultLaunchSettingsFile</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><font color="#ff0000"><strong> &lt;AspNetCoreHostingModel&gt;OutOfProcess&lt;/AspNetCoreHostingModel&gt;</strong></font><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">PropertyGroup</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">Project</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre> </div> <p>为了进一步验证上述的这一系列环境变量是否存在，如下所示的演示程序会将以“ASPNETCORE_”为前缀的环境变量作为响应内容输出来。除此之外，作为响应输出的还有进程名称、请求的PathBase和“MS-ASPNETCORE-TOKEN”报头。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span> System.Diagnostics;<span style="color: rgba(0, 0, 255, 1)">using</span> System.Text;  var app = WebApplication.Create(args); app.Run(HandleAsync); app.Run();  Task HandleAsync(HttpContext httpContext) {     var request = httpContext.Request;     var configuration = httpContext.RequestServices.GetRequiredService&lt;IConfiguration&gt;();     var builder =<span style="color: rgba(0, 0, 255, 1)">new</span> StringBuilder();     builder.AppendLine($"<span style="color: rgba(139, 0, 0, 1)">Process: {Process.GetCurrentProcess().ProcessName}</span>");     builder.AppendLine($"<span style="color: rgba(139, 0, 0, 1)">MS-ASPNETCORE-TOKEN: {request.Headers[</span>"MS-ASPNETCORE-TOKEN"<span style="color: rgba(139, 0, 0, 1)">]}</span>");     builder.AppendLine($"<span style="color: rgba(139, 0, 0, 1)">PathBase: {request.PathBase}</span>");     builder.AppendLine("<span style="color: rgba(139, 0, 0, 1)">Environment Variables</span>");<span style="color: rgba(0, 0, 255, 1)">foreach</span> (<span style="color: rgba(0, 0, 255, 1)">string</span> key<span style="color: rgba(0, 0, 255, 1)">in</span> Environment.GetEnvironmentVariables().Keys)     {<span style="color: rgba(0, 0, 255, 1)">if</span> (key.StartsWith("<span style="color: rgba(139, 0, 0, 1)">ASPNETCORE_</span>"))         {             builder.AppendLine($"<span style="color: rgba(139, 0, 0, 1)">\t{key}={Environment.GetEnvironmentVariable(key)}</span>");         }     }<span style="color: rgba(0, 0, 255, 1)">return</span> httpContext.Response.WriteAsync(builder.ToString()); }</pre> </div> <p>应用重新发布之后，再次利用浏览器访问后回得到如图5所示的结果。我们可以从这里找到上述的环境变量，请求携带的“MS-ASPNETCORE-TOKEN”报头正好与对应环境变量的值一致，应用在IIS中的虚拟目录作为了应用路径被写入环境变量并成为请求的PathBase。如果站点提供了HTTPS终结点，其端口还会写入“ASPNETCORE_ANCM_HTTPS_PORT”这个环境变量，这是为了实现针对HTTPS终结点的重定向而设计的。</p> <p><a href="https://img2022.cnblogs.com/blog/19327/202203/19327-20220331080623457-2138931774.png" rel="nofollow" class="fancybox" data-fancybox-group="button"><img fetchpriority="high" decoding="async" width="461" height="221" title="image" style="border: 0 currentColor; border-image: none; display: inline; background-image: none" alt="image" src="http://img.555519.xyz/uploads3/20220510/a08a16a79fb979a361e9fbfa85fe9e23.jpg"></a><br />图5 Out-of-Process模式下环境变量</p> <p>Out-of-Process部署的大部分实现都是由如下这个IISMiddleware中间件来完成的，IISOptions为对应的配置选项。IISMiddleware中间件完成了针对“配对Token”的验证过滤非IIS转发的请求。如果IISOptions配置选项的ForwardClientCertificate属性返回True（默认值），此中间件会从请求报头“<font color="#ff0000">MS-ASPNETCORE-CLIENTCERT</font>”中提取客户端证书，并将它保存到ITlsConnectionFeature特性中。该中间件还会将当前Windows账号对应的WindowsPrincipal对象附加到HttpContext上下文的特性集合中，如果IISOptions配置选项的AutomaticAuthentication属性返回True（默认值），该对象会直接赋值给HttpContext上下文的User属性。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> IISMiddleware {<span style="color: rgba(0, 0, 255, 1)">public</span> IISMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IOptions&lt;IISOptions&gt; options,<span style="color: rgba(0, 0, 255, 1)">string</span> pairingToken, IAuthenticationSchemeProvider authentication, IHostApplicationLifetime applicationLifetime);<span style="color: rgba(0, 0, 255, 1)">public</span> IISMiddleware(RequestDelegate next, ILoggerFactory loggerFactory, IOptions&lt;IISOptions&gt; options,<span style="color: rgba(0, 0, 255, 1)">string</span> pairingToken,<span style="color: rgba(0, 0, 255, 1)">bool</span> isWebsocketsSupported, IAuthenticationSchemeProvider authentication, IHostApplicationLifetime applicationLifetime);<span style="color: rgba(0, 0, 255, 1)">public</span> Task Invoke(HttpContext httpContext);<span style="color: rgba(0, 0, 255, 1)">public</span> Task Invoke(HttpContext httpContext) }</pre> </div> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> IISOptions {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> AutomaticAuthentication {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">string</span>? AuthenticationDisplayName {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">bool</span> ForwardClientCertificate {<span style="color: rgba(0, 0, 255, 1)">get</span>;<span style="color: rgba(0, 0, 255, 1)">set</span>; } }</pre> </div> <p>IIS利用WAS根据请求激活工作进程w3wp.exe。如果站点长时间未曾访问，它还会自动关闭工作进程。如果工作进程都关闭了，承载ASP.NET CORE应用的dotnet.exe进程自然也应该关闭。为了关闭应用承载进程，ASP.NET CORE Core Module会发送一个特殊的请求，该请求携带一个值为“<font color="#ff0000">shutdown</font>”的“<font color="#ff0000">MS-ASPNETCORE-EVENT</font>”报头，IISMiddleware中间件在接收到该请求时会利用注入的IHostApplicationLifetime对象关闭当前应用。如果不支持WebSocket，该中间件还会将代表“可升级到双向通信”的IHttpUpgradeFeature特性删除。将应用路径设置为请求的PathBase也是由这个中间件完成的。由于IISMiddleware中间件所作的实际上是对HttpContext上下文进行初始化的工作，所以它必须优先执行才有意义，为了将此中间件置于管道的前端，如下这个IISSetupFilter被定义出来完成对该中间件的注册。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">internal</span><span style="color: rgba(0, 0, 255, 1)">class</span> IISSetupFilter : IStartupFilter {<span style="color: rgba(0, 0, 255, 1)">internal</span> IISSetupFilter(<span style="color: rgba(0, 0, 255, 1)">string</span> pairingToken, PathString pathBase,<span style="color: rgba(0, 0, 255, 1)">bool</span> isWebsocketsSupported);<span style="color: rgba(0, 0, 255, 1)">public</span> Action&lt;IApplicationBuilder&gt; Configure(Action&lt;IApplicationBuilder&gt; next); }</pre> </div> <p>IISSetupFilter最终是通过IWebHostBuilder接口如下这个UseIISIntegration扩展方法进行注册的。这个方法还负责从当前配置和环境变量提取端口号，并完成监听地址的注册。由于KestrelServer默认会选择注册到服务器上的终结点，所以该方法会利用配置将IServerAddressesFeature特性的PreferHostingUrls属性设置为True，这里设置的监听地址才会生效。这个方法还会根据当前IIS站点的设置对IISOptions作相应设置。由于IHostBuider接口ConfigureWebHostDefaults扩展方法内部也会调用这个方法，我们并不需要为此做额外的工作。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">class</span> WebHostBuilderIISExtensions {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span> IWebHostBuilder UseIISIntegration(<span style="color: rgba(0, 0, 255, 1)">this</span> IWebHostBuilder hostBuilder); }</pre> </div> <h1><font size="4">四、&lt;aspnetcore&gt;配置</font></h1> <p>不论是采用何种部署模式，相关的配置都定义在部署目录下的web.config配置文件，它提供的针对ASP.NET CORE Core Module的映射使我们能够将ASP.NET CORE应用部署在IIS中。在web.config中，与ASP.NET CORE应用部署相关的配置定义在&lt;aspNetCore&gt;配置节中。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">aspNetCore</span><span style="color: rgba(255, 0, 0, 1)">processPath</span> 		=<span style="color: rgba(0, 0, 255, 1)">"dotnet"</span><span style="color: rgba(255, 0, 0, 1)">arguments</span> 			=<span style="color: rgba(0, 0, 255, 1)">".\App.dll"</span><span style="color: rgba(255, 0, 0, 1)">stdoutLogEnabled</span> 		=<span style="color: rgba(0, 0, 255, 1)">"false"</span><span style="color: rgba(255, 0, 0, 1)">stdoutLogFile</span> 		=<span style="color: rgba(0, 0, 255, 1)">".\logs\stdout"</span><span style="color: rgba(255, 0, 0, 1)">hostingModel</span>		=<span style="color: rgba(0, 0, 255, 1)">"outofprocess"</span><span style="color: rgba(255, 0, 0, 1)">forwardWindowsAuthToken</span>	=<span style="color: rgba(0, 0, 255, 1)">"true"</span><span style="color: rgba(255, 0, 0, 1)">processesPerApplication</span>	=<span style="color: rgba(0, 0, 255, 1)">"10"</span><span style="color: rgba(255, 0, 0, 1)">rapidFailsPerMinute</span>	=<span style="color: rgba(0, 0, 255, 1)">"5"</span><span style="color: rgba(255, 0, 0, 1)">requestTimeout</span>		=<span style="color: rgba(0, 0, 255, 1)">"00:02:00"</span><span style="color: rgba(255, 0, 0, 1)">shutdownTimeLimit</span>		=<span style="color: rgba(0, 0, 255, 1)">"60"</span><span style="color: rgba(255, 0, 0, 1)">startupRetryCount</span>		=<span style="color: rgba(0, 0, 255, 1)">"3"</span><span style="color: rgba(255, 0, 0, 1)">startupTimeLimit</span>		=<span style="color: rgba(0, 0, 255, 1)">"60"</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">environmentVariables</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">environmentVariable</span><span style="color: rgba(255, 0, 0, 1)">name</span> =<span style="color: rgba(0, 0, 255, 1)">"ASPNETCORE_ENVIRONMENT"</span><span style="color: rgba(255, 0, 0, 1)">value</span> =<span style="color: rgba(0, 0, 255, 1)">"Development"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">environmentVariables</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">handlerSettings</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">handlerSetting</span><span style="color: rgba(255, 0, 0, 1)">name</span> =<span style="color: rgba(0, 0, 255, 1)">"stackSize"</span><span style="color: rgba(255, 0, 0, 1)">value</span> =<span style="color: rgba(0, 0, 255, 1)">"2097152"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">handlerSetting</span><span style="color: rgba(255, 0, 0, 1)">name</span> =<span style="color: rgba(0, 0, 255, 1)">"debugFile"</span><span style="color: rgba(255, 0, 0, 1)">value</span> =<span style="color: rgba(0, 0, 255, 1)">".\logs\aspnetcore-debug.log"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;</span><span style="color: rgba(128, 0, 0, 1)">handlerSetting</span><span style="color: rgba(255, 0, 0, 1)">name</span> =<span style="color: rgba(0, 0, 255, 1)">"debugLevel"</span><span style="color: rgba(255, 0, 0, 1)">value</span> =<span style="color: rgba(0, 0, 255, 1)">"FILE,TRACE"</span><span style="color: rgba(0, 0, 255, 1)">/&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">handlerSettings</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span><span style="color: rgba(0, 0, 255, 1)">&lt;/</span><span style="color: rgba(128, 0, 0, 1)">aspNetCore</span><span style="color: rgba(0, 0, 255, 1)">&gt;</span></pre> </div> <p>上面这段XML片段包含了完整的&lt;aspNetCore&gt;配置属性，下表对这些配置进行了简单的说明。设置的文件可以采用绝对路径和相对于部署目录（通过 “.”表示）的相对路径。</p> <table border="1" cellspacing="0" cellpadding="0"> <tbody> <tr> <td width="200" valign="top"> <p><strong>属性</strong></p> </td> <td width="800" valign="top"> <p><strong>含　　义</strong></p> </td> </tr> <tr> <td width="143"> <p>processPath</p> </td> <td width="431" valign="top"> <p>ASP.NET CORE应用启动命令所在路径，必需。</p> </td> </tr> <tr> <td width="143"> <p>arguments</p> </td> <td width="431" valign="top"> <p>ASP.NET CORE应用启动传入的参数，可选。</p> </td> </tr> <tr> <td width="143"> <p>stdoutLogEnabled</p> </td> <td width="431" valign="top"> <p>是否将stdout 和stderr输出到 stdoutLogFile属性指定的文件，默认为False。</p> </td> </tr> <tr> <td width="143"> <p>stdoutLogFile</p> </td> <td width="431" valign="top"> <p>作为stdout 和stderr输出的日志文件，默认为“ aspnetcore-stdout”。</p> </td> </tr> <tr> <td width="143"> <p>hostingModel</p> </td> <td width="431" valign="top"> <p>部署模式，“inprocess/InProcess”或者“outofprocess/OutOfProcess”（默认值）。</p> </td> </tr> <tr> <td width="143"> <p>forwardWindowsAuthToken</p> </td> <td width="431" valign="top"> <p>是否转发Windows认证令牌，默认为True。</p> </td> </tr> <tr> <td width="143"> <p>processesPerApplication</p> </td> <td width="431" valign="top"> <p>承载ASP.NET CORE应用的进程（ processPath）数，默认为1。该配置对In-Process模式无效。</p> </td> </tr> <tr> <td width="143"> <p>rapidFailsPerMinute</p> </td> <td width="431" valign="top"> <p>ASP.NET CORE应用承载进程（ processPath）每分钟允许崩溃的次数，默认为10，超过此数量将不再试图重新启动它。</p> </td> </tr> <tr> <td width="143"> <p>requestTimeout</p> </td> <td width="431" valign="top"> <p>请求处理超时时间，默认为2分钟。</p> </td> </tr> <tr> <td width="143"> <p>startupRetryCount</p> </td> <td width="431" valign="top"> <p>ASP.NET CORE应用承载进程启动重试次数，默认为2次。</p> </td> </tr> <tr> <td width="143"> <p>startupTimeLimit</p> </td> <td width="431" valign="top"> <p>ASP.NET CORE应用承载进程启动超时时间（单位为秒），默认为120秒。</p> </td> </tr> <tr> <td width="143"> <p>environmentVariables</p> </td> <td width="431" valign="top"> <p>设置环境变量。</p> </td> </tr> <tr> <td width="143"> <p>handlerSettings</p> </td> <td width="431" valign="top"> <p>为ASP.NET CORE Core Module提供额外的配置。</p> </td> </tr> </tbody> </table> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3147.htm">ELK日志保留7天-索引生命周期策略</a></p>
                                                <p>下一个：<a href="/html/category/article-3149.htm">vue电商后台管理系统保姆级教程 主页布局和功能实现</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3382.htm" title="SpringBoot + H2内置数据库">SpringBoot + H2内置数据库</a></li>
                        <li class="py-2"><a href="/html/category/article-3398.htm" title="在MySQL中，SERIAL和AUTO_INCREMENT有什么区别？">在MySQL中，SERIAL和AUTO_INCREMENT有什么区别？</a></li>
                        <li class="py-2"><a href="/html/category/article-4315.htm" title="1970年农历8月16日出生命运（1970年阴历8月16）">1970年农历8月16日出生命运（1970年阴历8月16）</a></li>
                        <li class="py-2"><a href="/html/category/article-3383.htm" title="Vue简单实现自定义拖拽">Vue简单实现自定义拖拽</a></li>
                        <li class="py-2"><a href="/html/category/article-4345.htm" title="国产机油品牌有哪些牌子(国产润滑油十大名牌)">国产机油品牌有哪些牌子(国产润滑油十大名牌)</a></li>
                        <li class="py-2"><a href="/html/category/article-3388.htm" title="springboot的定时任务">springboot的定时任务</a></li>
                        <li class="py-2"><a href="/html/category/article-3402.htm" title="微信小程序自定义顶部导航栏封装">微信小程序自定义顶部导航栏封装</a></li>
                        <li class="py-2"><a href="/html/category/article-4090.htm" title="设计模式学习笔记责任链模式实现及在Filter中的应用详解">设计模式学习笔记责任链模式实现及在Filter中的应用详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3405.htm" title="vue实现消息向上无缝滚动效果_vue.js_">vue实现消息向上无缝滚动效果_vue.js_</a></li>
                        <li class="py-2"><a href="/html/category/article-3391.htm" title="基于知名微服务框架go-micro开发gRPC应用程序">基于知名微服务框架go-micro开发gRPC应用程序</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>