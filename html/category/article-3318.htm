<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3318.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>C++ atomic 和 memory ordering - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">C++ atomic 和 memory ordering</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p>如果不使用任何同步机制（例如 mutex 或 atomic），在多线程中读写同一个变量，那么，程序的结果是难以预料的。简单来说，编译器以及 CPU 的一些行为，会影响到程序的执行结果：</p> <ul> <li>即使是简单的语句，C++ 也不保证是原子操作。</li> <li>CPU 可能会调整指令的执行顺序。</li> <li>在 CPU cache 的影响下，一个 CPU 执行了某个指令，不会立即被其它 CPU 看见。</li> </ul> <p>利用 C++ 的<code>atomic<T></code> 能完成对象的原子的读、写以及RMW（read-modify-write），而参数<code>std::memory_order</code> 规定了如何围绕原子对象的操作进行排序。<code>memory order</code> 内存操作顺序其实是<strong>内存一致性模型</strong> (Memory Consistency Model)，解决处理器的<code>write</code> 操作什么时候能够影响到其他处理器，或者说解决其他处理处理器什么时候能够观测到当且<strong>写CPU/写线程</strong> 写入内存的值，有了 memory odering，我们就能知道其他处理器是怎么观测到<code>store</code> 指令的影响的。</p> <p>一致模型有很多种，在 Wikipedia 里面搜索<em>Consistency model</em> 即可看到，目前 C++ 所用到有 Sequential Consistency 和 Relaxed Consistency 以及 Release consistency。</p> <h2 id="memory--operation-ordering">Memory  Operation Ordering</h2> <p>我们所编写的程序会定义一系列的<code>load</code> 和<code>store</code> 操作，也就是<code>Program ordering</code>，这些 load 和 store 的操作应用在内存上就有了内存操作序(memory operation ordering)，一共有四种内存操作顺序的限制，不同的内存一致模型需要保持不同级别的操作限制，其中<code>W</code> 代表写，<code>R</code> 代表读：</p> <ul> <li><code>W -> R</code>：写入内存地址 X 的操作必须比在后面的程序定义序列的读取地址 Y 之前提交 (commit), 以至于当读取内存地址 Y 的时候，写入地址 X 的影响已经能够在读取Y时被观测到。</li> <li><code>R -> R</code>: 读取内存地址 X 的操作必须在后序序列中的读取内存地址 Y 的操作之前提交。</li> <li><code>R -> W</code>：读取内存地址 X 的操作必须在后序序列中读取内存地址 Y 的操作之前提交。</li> <li><code>W -> W</code>：写入内存地址 X 的操作必须在后续序列中写入内存地址 Y 的操作之前提交。</li> </ul> <p>提交的意思可以理解为，后面的操作需要等前面的操作完全执行完才能进行下一个操作。</p> <h2 id="sequential-consistency">Sequential consistency</h2> <p>序列一致是<strong>Leslie Lamport</strong> 提出来的，如果熟悉分布式共识算法<strong>Paxos</strong> ，那么应该不陌生这位大科学家，而序列一致的定义是：</p> <p>the result of any execution is the same as-if （任何一种执行结果都是相同的就好像）</p> <ol> <li>the operations of all threads are executed in some sequential order （所有线程的操作都在某种次序下执行）</li> <li>the operations of each thread appear in this sequence in the order specified by their program （在全局序列中的，各个线程内的操作顺序由程序指定的一致）</li> </ol> <p>组合起来：全局序列中的操作序列要和线程所指定的操作顺序要对应，最终的结果是所有线程指定顺序操作的排列，不能出现和程序指定顺序组合不出来的结果。</p> <p>怎么做会违反 sequcential consistency（SC）？也就是 SC 的反例是什么？</p> <ul> <li>乱序执行 （out-of-order)</li> <li>内存访问重叠，写A的过程中读取A，宽于计算机word的，64位机器写128位变量</li> </ul> <p>更加形象的理解可以从内存的角度来看：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/01dfa7afa1ba23f41af8cdba61bacda5.jpg" alt="C++ atomic 和 memory ordering"></p> <p>所有的处理器都按照<code>program order</code> 发射<code>load</code> 和<code>store</code> 的操作，而内存一个地一个地从上面 4 个处理器中读取指令，并且仅当完成一个操作后才会去执行下一个操作，类似于多个<code>producer</code> 一个<code>consumer</code> 的情况。</p> <p><s>（Lamport 一句话，让我为他理解了一下午）</s></p> <p>SC 需要保持所有的内存操作序（memory operation ordering），也是最严格的一种，并且 SC 是 c++<code>atomic<T></code> 默认的以一种内存模型，对应<code>std::memory_order_seq_cst</code>，可以看到标准库中的函数定义将其设置为了默认值：</p> <pre><code class="language-c++">    bool     load(memory_order __m = memory_order_seq_cst) const noexcept     { return _M_base.load(__m); }</code></pre> <h2 id="relaxed-consistency">Relaxed Consistency</h2> <p>松弛内存序，对应的<code>std::memory_order_relaxed</code>，在 cppreference 上的说明是："不保证同步操作，不会将一定的顺序强加到并发内存访问上，只保证原子性和修改顺序一致性"，并且通常用于计数器，比如<code>shared_ptr</code> 的引用计数。</p> <p>松弛内存序不再保证<strong>W -> R</strong>，不相互依赖的读写操作可以在 write 之前或者在同一时间段并行处理。（读内存并不是想象中的那么简单，有内存寻址过程，将内存数据映射到 cache block，发送不合法位用于缓存替换）</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/6cb0fed3e9c36f1474e08c788bc31ed7.jpg" alt="C++ atomic 和 memory ordering"></p> <p>好处是什么？性能，执行命令的写操作的延迟都被抹去了，cpu 能够更快的执行完一段带有读写的指令序列。</p> <p>具体实现是通过在 cpu 和 cache 之间加入一个<strong>write buffer</strong>，如下图：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a046204cca2956b80a5eb879f9475631.jpg" alt="C++ atomic 和 memory ordering"></p> <p>处理器<code>Write</code> 命令将会发送到<code>Write Buffer</code>，而<code>Read</code> 命令就直接能访问 cache，这样可以省去写操作的延迟。<code>Write Buffer</code> 还有一个细节问题，放开<strong>W -> R</strong> 的限制是当<code>Write</code> 和<code>Read</code> 操作内存地址不是同一个的时候，R/W 才能同时进行甚至 R 能提前到 W 之前，但如果<code>Write Buffer</code> 中有一个<code>Read</code> 所依赖的内存地址就存在问题，<code>Read</code> 需要等在<code>Write buffer</code> 中的<code>Write</code> 执行完成才能继续吗？只需要<code>Read</code> 能直接访问这个<code>Write Buffer</code>，如下（注：这里的<code>Load</code>通常和<code>Read</code>等意，<code>Store</code>和<code>Write</code>等意）：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c1802812061d47fe5d612a57a2dc8a60.jpg" alt="C++ atomic 和 memory ordering"></p> <h2 id="release-consistency">Release Consistency</h2> <p>在这种一致性下，所有的 memory operation ordering 都将不再维护，是最激进的一种内存一致模型，进入临界区叫做<code>Acquire</code> ，离开临界区叫做<code>Release</code>。所有的<code>memory operation ordering</code> 都将不再维护，处理器支持特殊的同步操作，所有的内存访问指令必须在<code>fence</code> 指令发送之前完成，在<code>fench</code> 命令完成之前，其他所有的命令都不能开始执行。</p> <p>Intel x86/x64 芯片在硬件层面提供了 total store ordering 的能力，如果软件要求更高级别的一致性模型，处理器提供了三种指令：</p> <ul> <li>mm_lfence：load fence，等待所有 load 完成</li> <li>mm_sfence：store fence，等待所有 store 完成</li> <li>mm_mfence：完全读写屏障</li> </ul> <p>而在 ARM 架构上，提供的是一种非常松弛（very relaxed）内存一致模型。</p> <p>PS. 曾经有个公司做出了支持 Sequential Consistency 的硬件，但是最终还是败给了市场。</p> <h2 id="acquirerelease">Acquire/Release</h2> <p>Acquire/release 对应<code>std::memory_order_acquire</code> 和<code>std::memory_order_acquire</code>，它们的语义解释如下：</p> <ul> <li>Acquire：如果一个操作 X 带有 acquire 语义，那么在操作 X 后的所有<code>load/store</code> 指令都不会被重排序到操作 X 之前，其他处理器会在看到操作X后序操作的影响之前看到操作 X 的影响，也就是必须先看到 X 的影响，再是后续操作的影响。</li> <li>Relase：如果一个操作 X 带有 release 语义，那么在操作 X 之前的所有<code>load/store</code> 指令操作都不会被重排序到操作 X 之后，其他处理器会先看到操作 X 之前的操作。</li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/3936ac4961c3ad05a2eaf1a6c6411799.jpg" alt="C++ atomic 和 memory ordering"></p> <p>Acquire/Release 常用在互斥锁(mutex lock)和自旋锁(spin lock)，获得一个锁和释放一个锁需要分别使用 Acquire 和 Release 语义防止指令操作被重排出临界区而造成的数据竞争，Acquire/Release 用在互斥锁上其实还解释了为什么线程执行完临界区后，对临界区的数据更改对于其他线程是可见的，而不是仅仅缓存在<code>cache</code> 中。</p> <h2 id="acquireconsume">Acquire/Consume</h2> <p>Acquire/Consume 对应<code>std::memory_order_acquire</code> 和<code>std::memory_order_consume</code>，两种内存模型的组合仅有 consume 不同于 release，不同点在于，假设原子操作 X， Release 会防止 X 之前的所有指令不会被重排到 X 之后，而 Consume 只能保证依赖的变量不会被重排到 X 之后，引入了依赖关系。</p> <p>但是在 cppreference 上面写着，“释放消费顺序的规范正在修订中，而且暂时不鼓励使用<code>memory_order_consume</code>&nbsp;。”，所以暂时不对其做深入的研究。</p> <h2 id="volatile">Volatile</h2> <p>volatile 关键词通常会被拿出来说，因为通常会在并发编程中被错误使用：</p> <p>volatile 的翻译是“不稳定的，易发生变化的”，编译器会始终读取 volatile 修饰的变量，不会将变量的值优化掉，但是这不是用在线程同步的工具，而是一种错误行为，cppreference上面写道：“volatile 访问不建立线程间同步，volatile 访问不是原子的，且不排序内存，非 volatile 内存访问可以自由地重排到 volatile 访问前后。”（Visual Studio 是个例外）。</p> <p>volatile 变量的作用是用在非常规内存上的内存操作，常规内存在处理器不去操作的时候是不会发生变化的，但是像非常规内存如内存映射I/O的内存，实际上是在和外围设备做串口通信，所以不能省去。（《modern effective c++》）</p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3317.htm">大数据学习之初学者必知的十大机器学习算法</a></p>
                                                <p>下一个：<a href="/html/category/article-3319.htm">Linux服务器执行命令报 nohup: redirecting stderr to stdout 错误</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4424.htm" title="动物疫苗龙头瑞普生物（瑞普生物禽流感疫苗）">动物疫苗龙头瑞普生物（瑞普生物禽流感疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6729.htm" title="可以自己买疫苗去宠物店打吗（可以自己买疫苗去宠物店打吗现在）">可以自己买疫苗去宠物店打吗（可以自己买疫苗去宠物店打吗现在）</a></li>
                        <li class="py-2"><a href="/html/category/article-6912.htm" title="自制川贝枇杷膏的做法(蜜炼川贝枇杷膏的做法)">自制川贝枇杷膏的做法(蜜炼川贝枇杷膏的做法)</a></li>
                        <li class="py-2"><a href="/html/category/article-6083.htm" title="动物疫苗的正确使用方法视频教程全集（动物疫苗制作流程）">动物疫苗的正确使用方法视频教程全集（动物疫苗制作流程）</a></li>
                        <li class="py-2"><a href="/html/category/article-7142.htm" title="鹌鹑蛋烧排骨的做法家常做法(鹌鹑蛋烧排骨的做法大全)">鹌鹑蛋烧排骨的做法家常做法(鹌鹑蛋烧排骨的做法大全)</a></li>
                        <li class="py-2"><a href="/html/category/article-4536.htm" title="申请动物诊疗机构需要具备哪些条件和要求的条件（申办动物诊疗许可证的条件）">申请动物诊疗机构需要具备哪些条件和要求的条件（申办动物诊疗许可证的条件）</a></li>
                        <li class="py-2"><a href="/html/category/article-6682.htm" title="中国动物疫苗市场现状 中国动物疫苗市场现状分析">中国动物疫苗市场现状 中国动物疫苗市场现状分析</a></li>
                        <li class="py-2"><a href="/html/category/article-4500.htm" title="汝州汝窑10大品牌(汝州汝瓷哪家好)">汝州汝窑10大品牌(汝州汝瓷哪家好)</a></li>
                        <li class="py-2"><a href="/html/category/article-5976.htm" title="发放动物疫苗简报 发放动物疫苗简报范文">发放动物疫苗简报 发放动物疫苗简报范文</a></li>
                        <li class="py-2"><a href="/html/category/article-6821.htm" title="瑞派宠物医院价格表（瑞派宠物医院贵吗）">瑞派宠物医院价格表（瑞派宠物医院贵吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>