<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3304.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>右值引用，移动语义，完美转发 - Qatar Address</title>
        <link rel="icon" href="/assets/website/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/website/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/website/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/website/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/website/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/qataraddress/fontello.css">
    <link href="/assets/website/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/style.css">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-md-4 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">右值引用，移动语义，完美转发</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<blockquote> <p>文章预先发布于：pokpok.ink</p> </blockquote> <h2 id="名词解释">名词解释</h2> <ul> <li> <p>移动语义：用不那么昂贵的操作代替昂贵的复制操作，也使得只支持移动变得可能，比如 unique_ptr，将数据的所有权移交给别人而不是多者同时引用。</p> </li> <li> <p>完美转发：目标函数会收到转发函数完全相同类似的实参。</p> </li> <li> <p>右值引用：是这两个机制的底层语言机制，形式是 Type&&，能够引用到“不再使用”的数据，直接用于对象的构造</p> </li> </ul> <p>要注意的是，形参一定是左值，即使类型是右值引用：</p> <pre><code class="language-c++">void f(Widget&& w) {     /* w 在作用域内就是一个左值。 */ }</code></pre> <p>实现移动语意和完美转发的重要工具就是<code>std::move</code> 和<code>std::forward</code>，<code>std::move</code> 和<code>std::forward</code> 其实都是强制类型转换函数，<code>std::move</code> 无条件将实参转换为右值，而<code>std::forward</code> 根据实参的类型将参数类型转化为左值或者右值到目标函数。</p> <h2 id="移动语义">移动语义</h2> <p><code>std::move(v)</code> 相当于<code>static_cast<T&&>(v)</code>，强制将类型转化为需要类型的右值，move 的具体实现为：</p> <pre><code class="language-c++">template<typename T> typename remove_reference<T>::type&& move(T&& param) {     using ReturnType = typename remove_reference<T>::type&&;     return static_cast<ReturnType>(param); }</code></pre> <ol> <li> <p>其中<code>typename remove_reference<T>::type&&</code> 作用就是为了解决是当入参数是<code>reference to lvalue</code> 的时候，返回类型<code>ReturnType</code>会因为<code>引用折叠</code>被推导为<code>T&</code>，<code>remove_reference<T>::type</code> 就是为了去除推导出的模版参数 T 的引用，从到强制得到<code>T&&</code>。</p> </li> <li> <p>如果没有<code>remove_reference<T></code>，而是用<code>T&&</code> 来代替函数返回值以及<code>static_cast<></code>，就会有下面的推导规则：</p> <ul> <li>如果入参是<code>lvalue</code>，那么<code>T</code> 就会被推导成为<code>T&</code>，参数<code>param</code> 的类型就变成了<code>T& &&</code>，再通过<code>引用折叠</code>的规则，推导最终结果为<code>T&</code>，而根据表达式的value category 规则，如果一个函数的返回值类型是左值引用，那么返回值的类型为左值，那么<code>std::move(v)</code> 就不能实现需要的功能，做到强制右值转换。</li> <li>如果入参是<code>rvalue</code>，那么<code>T</code> 会被直接推导成<code>T</code>，参数<code>param</code> 的类型也就变成了<code>T&&</code>，函数返回的类型(type)也是<code>T&&</code>，返回的值类别也是右值。</li> </ul> </li> <li> <p>此外，在 c++14 能直接将<code>typename remove_reference<T>::type&&</code> 替换为<code>remove_reference_t<T>&&</code>。</p> </li> </ol> <h2 id="完美转发">完美转发</h2> <p><code>std::forward<T>(v)</code> 的使用场景用于函数需要转发不同左值或者右值的场景，假设有两个重载函数：</p> <pre><code class="language-c++">void process(const Widget& lvalArg); void process(Widget&& rvalArg);</code></pre> <p>有一个函数<code>LogAndProcess</code> 会根据<code>param</code> 左值或者右值的不同来区分调用不同函数签名的<code>process</code> 函数：</p> <pre><code class="language-c++">template<typename T> void LogAndProcess(T&& param) {     // DoSomething     logging(param);      process(std::forward<T>(param)); }</code></pre> <p>这样使用<code>LogAndProcess</code> 的时候就能区分：</p> <pre><code class="language-c++">Widget w; LogAndProcess(w); // call process(const Widget&); LogAndProcess(std::move(w)); // call process(Widget&&);</code></pre> <p>这里就有 emplace_back 一种常见的用错的情况，在代码中也经常看见，如果要将某个不用的对象<code>a</code>放到<code>vector</code>中：</p> <pre><code class="language-c++">class A { 	A(A&& a) {} };  A a; std::vector<A> vec; vec.push_back(a);</code></pre> <p>如果使用<code>push_back</code> 就会造成一次拷贝，常见的错误做法是将其替换为<code>vector::emplace_back()</code>：</p> <pre><code class="language-c++">vec.emplace_back(a);</code></pre> <p>但是<code>emplace_back</code> 的实现有<code>std::forward</code> 根据实参数做转发，实参<code>a</code> 实际上是个<code>lvaue</code>，转发到构造函数时得到的也是左值的 a，就相当于调用赋值拷贝构造：</p> <pre><code class="language-c++">vec[back()] = a;</code></pre> <p>解决方法其实只需要调用<code>std::move</code> 做一次右值转换即可，就能完成数据的移动。</p> <pre><code class="language-c++">vec.emplace_back(std::move(a));</code></pre> <h2 id="万能引用和右值引用">万能引用和右值引用</h2> <p>万能引用和右值引用最大的区别在于万能引用会涉及模板的推导。但并不是说函数参数中有模板参数就是万能引用，例如<code>std::vector::push_back()</code> 的函数签名是<code>push_back(T&& x)</code>， 但是<code>T</code> 的类型在<code>std::vector<T></code> 声明的时候就已经确定了，在调用<code>push_back</code> 的时候不会涉及类型推导，而<code>std::vector</code> 的<code>emplace_back</code> 是确实存在推导的。另外即使类型是<code>T&&</code>，但是如果有<code>const</code> 修饰得到<code>const T&&</code>，那么也不是一个合格的万能引用。</p> <p>对于万能引用，如果是入参是右值引用，模版参数<code>T</code> 的推导结果还是<code>T</code>，而不是<code>T&&</code>，这不是右值引用的特殊性，而是左值引用的特殊性，<br /> 模板函数的函数参数列表中包含<code>forwarding reference</code> 且相应的实参是一个<code>lvalue</code> 的情况时，模版类型会被推导为左值引用。<code>forwarding reference</code> 是 C++ 标准中的词，翻译叫转发引用；《<em>modern effective c++</em>》的作者 Scott Meyers 将这种引用称之为万能引用（universal reference）。</p> <h2 id="右值引用的重载">右值引用的重载</h2> <p>有了右值引用后，就能通过<code>std::move</code> 将左值转换为右值，完成目标对象的移动构造，省去大对象的拷贝，但是如果传递的参数是个左值，调用者不希望入参被移动，数据被移走，那就需要提供一个左值引用的版本，因为右值引用无法绑定左值。假设大对象是一个<code>string</code>，就会写出下面这种函数签名：</p> <pre><code class="language-c++">void f(const std::string& s); void f(string&& s);</code></pre> <p>一个参数没问题，我们学会了左值和右值的区别并给出了不同的函数重载，但是如果参数是两个 string，情况就变得复杂的，针对不同的情况，就需要提供四种函数签名和实现：</p> <pre><code class="language-c++">void f(const std::string& s1, const std::string& s2); void f(const std::string& s1, string&& s s2); void f(string&& s s1, const std::string& s2); void f(string&& s s1, string&& s s2);</code></pre> <p>如果参数进一步增加，编码就会越来越复杂，遇到这种情况就可以使用万能引用处理，在函数体内对string做<code>std::forward()</code>即可：</p> <pre><code class="language-c++">template<typename T1, typename T2> void f(T1&& s1, T2&& s2);</code></pre> <h2 id="万能引用的重载">万能引用的重载</h2> <p>万能引用存在一个问题，过于贪婪而导致调用的函数不一定是想要的那个，假设<code>f()</code> 除了要处理左值和右值的 string 外，还有可能需要处理一个整形，例如<code>int</code>，就会有下面这种方式的重载。</p> <pre><code class="language-c++">// 万能引用版本的 f()，处理左值右值 template<typename T> void f(T&& s) {     std::cout << "f(T&&)" << std::endl; }  // 整数类型版本的 f()，处理整形 void f(int i)  {     std::cout << "f(int)" << std::endl; }</code></pre> <p>如果用不同的整型去调用<code>f()</code>，就会发生问题：</p> <pre><code class="language-c++">int i1; f(i1); // output: f(int)  size_t i2; f(i2); // output: f(T&&)</code></pre> <ul> <li>如果参数是一个<code>int</code>，那么一切正常，调用<code>f(int)</code>的版本，因为c++规定，如果一个常规函数和一个模板函数具备相同的匹配性，优先使用常规函数。</li> <li>但是如果入参是个<code>size_t</code>，那么就出现问题了，<code>size_t</code> 的类型和<code>int</code> 并不相等，需要做一些转换才能变成<code>int</code>，那么就会调用到万能引用的版本。</li> </ul> <p>如何限制万能引用呢？</p> <p>1、标签分派：根据万能引用推导的类型，<code>f(T&&)</code> 新增一个形参变成<code>f(T&&, std::true_type)</code>和<code>f(T&&, std::false_type)</code>，调用<code>f(args, std::is_integral<T>())</code> 就能正确分发到不同的<code>f()</code> 上。<br /> 2、模板禁用：<code>std::enable_if</code> 能强制让编译器使得某种模板不存在一样，称之为禁用，底层机制是<code>SFINAE</code></p> <p><code>std::_enable_if</code> 的正确使用方法为：</p> <pre><code class="language-c++">template<typename T,         typename = typename std::enable_if<condition>::type> void f(T param) {  }</code></pre> <p>应用到前面的例子上，希望整型只调用<code>f(int)</code>而 string 会调用<code>f(T&&)</code>，就会有：</p> <pre><code class="language-c++">void f(int i) {     std::cout << "f(int)" << std::endl; }  template<typename T,          typename = typename std::enable_if<             std::is_same<                 typename std::remove_reference<T>::type,                  std::string>::value             >::type         > void f(T&& s) {     std::cout << "f(T&&)" << std::endl; }</code></pre> <p>模板的内容看上去比较长，其实只是在<code>std::enable_if</code>的<code>condition</code>内希望入参的类型为<code>string</code>，无论左值和右值，这样就完成了一个万能引用的正确重载。</p> <h2 id="引用折叠">引用折叠</h2> <p>在c++中，引用的引用是非法的，但是编译器可以推导出引用的引用的引用再进行折叠，通过这种机制实现移动语义和完美转发。</p> <p>模板参数<code>T</code>的推导规则有一点就是，如果传参是个左值，<code>T</code>的推导类型就是<code>T&</code>，如果传参是个右值，那么<code>T</code>推导结果就是<code>T</code>（不变）。引用的折叠规则也很简单，当编译器出现引用的引用后，结果会变成单个引用，在两个引用中，任意一个的推导结果为左值引用，结果就是左值引用，否则就是右值引用。</p> <h2 id="返回值优化rvo">返回值优化(RVO)</h2> <p>编译器如果要在一个按值返回的函数省略局部对象的复制和移动，需要满足两个条件：</p> <ol> <li>局部对象的类型和返回值类型相同</li> <li>返回的就是局部对象本身</li> </ol> <p>如果在<code>return</code>的时候对局部变量做<code>std::move()</code>，那么就会使得局部变量的类型和返回值类型不匹配，原本可以只构造一次的操作，变成了需要构造一次加移动一次，限制了编译器的发挥。</p> <p>另外，如果不满足上面的条件二，按值返回的局部对象是不确定的，编译器也会将返回值当作右值处理，所以对于按值返回局部变量这种情况，并不需要实施<code>std::move()</code>。</p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3303.htm">Java-GUI编程之事件处理</a></p>
                                                <p>下一个：<a href="/html/category/article-3305.htm">vue日期格式处理详解</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    
<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-10501.htm" title="领养宠物原主人反悔（领养的宠物不合适能不能退回）">领养宠物原主人反悔（领养的宠物不合适能不能退回）</a></li>
                        <li class="py-2"><a href="/html/category/article-9718.htm" title="宠物疫苗妙三多多久打一次（妙三多狗狗疫苗）">宠物疫苗妙三多多久打一次（妙三多狗狗疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-10178.htm" title="兰州哪里有宠物店?（兰州卖宠物的地方在哪）">兰州哪里有宠物店?（兰州卖宠物的地方在哪）</a></li>
                        <li class="py-2"><a href="/html/category/article-9995.htm" title="加工狗粮的机器需要多少钱一台（加工狗粮的机器需要多少钱?）">加工狗粮的机器需要多少钱一台（加工狗粮的机器需要多少钱?）</a></li>
                        <li class="py-2"><a href="/html/category/article-10317.htm" title="小奶猫10元一只在哪买（小奶猫哪里买）">小奶猫10元一只在哪买（小奶猫哪里买）</a></li>
                        <li class="py-2"><a href="/html/category/article-9673.htm" title="北京去哪领养狗 北京去哪领养狗狗">北京去哪领养狗 北京去哪领养狗狗</a></li>
                        <li class="py-2"><a href="/html/category/article-9672.htm" title="猫三联三针还是两针好（猫三联三针还是两针好呢）">猫三联三针还是两针好（猫三联三针还是两针好呢）</a></li>
                        <li class="py-2"><a href="/html/category/article-9857.htm" title="动物疫苗碰到人的皮肤有害吗会传染吗视频（动物疫苗对人体有害吗）">动物疫苗碰到人的皮肤有害吗会传染吗视频（动物疫苗对人体有害吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-9627.htm" title="炖青鱼的做法简单又好吃(炖青鱼的做法大全)">炖青鱼的做法简单又好吃(炖青鱼的做法大全)</a></li>
                        <li class="py-2"><a href="/html/category/article-10547.htm" title="宠物领养证如何办理流程视频教学大全（宠物领养证如何办理流程视频教学大全图片）">宠物领养证如何办理流程视频教学大全（宠物领养证如何办理流程视频教学大全图片）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">46</span> <a href="/html/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/website/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/website/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/website/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>