<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3205.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>【SpringBoot实战】核心配置和注解 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">【SpringBoot实战】核心配置和注解</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h2 id="前言">前言</h2> <p>SpringBoot核心配置在springboot中有非常重要的作用，我们可是使用核心配置文件进行一些基础功能的定义，属性值的注入等。springboot支持两种格式的核心配置文件，一种是properties和yaml，properties采用传统的键值对方式，但是相比于yaml优先级更高，yaml采用采用树状结构，使用缩进进行关系判断。<br /> 注解可以说是springboot的一大特点，采用注解极大的简化了spring的配置问题。</p> <h2 id="环境搭建">环境搭建</h2> <p>我们采用上篇博客简单spring initializr方式创建springboot项目，可参考https://www.cnblogs.com/hjk-airl/p/16081134.html</p> <h3 id="applicationproperties和applicationyaml">application.properties和application.yaml</h3> <p>application.properties和application.yaml作用是一样的，对于不同的人群有不一样的偏好，可采用不同的方式，看个人喜好。</p> <ul> <li>我们在resources文件夹下创建一个application.yaml文件，方便同时对别两种方式的不同，因为我们在创建项目的时候application.properties已经创建，所以只需要创建yaml就行。</li> <li>步骤（右键resources->new->file->输入application.yaml)一定要是这个文件名，不然springboot不识别，创建完成后可以看到这个文件的图标和application.properties文件一样。</li> </ul> <h4 id="springboot基本系统属性配置">springBoot基本系统属性配置</h4> <p>我们先修改一下端口号看一下，我们知道默认的端口号是8080，我们修改为8081然后运行。</p> <pre><code>server.port=8081</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/caf95deae8490f534a8a757920b585ca.jpg" alt="【SpringBoot实战】核心配置和注解"></p> <p>在这值得注意的是当我们同时存在application.properties和application.yaml时，并且两者都有内容时，会优先使用properties文件，我们在application.properties文件内容删除或者注释掉在application.yaml里输入</p> <pre><code>server:   port: 8082</code></pre> <p>我们可以在配置文件里配置一些基本信息如jdbc的环境变量，和开启松散绑定，开启什么什么缓存的配置等。</p> <pre><code>spring:   datasource:     driver-class-name: com.mysql.jdbc.Driver     password: 123456     username: root</code></pre> <p>我们还可以配置一些自己类的属性。<br /> 我们创建一个Person类，我们在加@ConfigurationProperties时idea可能会爆红，但是对程序影响，我们可以先在pom.xml里加一个依赖,如果还爆红那就把idea关闭在重新打开。</p> <pre><code>	<dependency>             <groupId>org.springframework.boot</groupId>             <artifactId>spring-boot-configuration-processor</artifactId>         </dependency></code></pre> <pre><code>package com.hjk.springboot01.pojo;  import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component;  @Component //将Person类作为Bean注入Sprng容器 @ConfigurationProperties(prefix = "person") public class Person {     private String name;     private String address;      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public String getAddress() {         return address;     }      public void setAddress(String address) {         this.address = address;     }      @Override     public String toString() {         return "Person{" +                 "name='" + name + '\'' +                 ", address='" + address + '\'' +                 '}';     } }</code></pre> <p>然后在编辑controller类</p> <pre><code>package com.hjk.springboot01.controller;  import com.hjk.springboot01.pojo.Person; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController;  @RestController public class PersonController {      @Autowired     public Person person;      @GetMapping("/person")     public String getPerson(){         System.out.println(person.toString());         return person.toString();     }  }</code></pre> <p>最后我们在核心配置文件application.properties或者application.yaml里编写想要配置的东西，我没配置Person的属性。<br /> application.properties</p> <pre><code>person.name='hjk' person.address='中国'</code></pre> <p>application.yaml<br /> 还是那个问题，如果你同时存在properties和yaml文件，并且两者都有同种属性，那么会优先使用properties里面的。</p> <pre><code>person:   name: hjk   address: hahaha</code></pre> <p>最后我们访问当本地url可以在控制台看到输出。<br /><mark>对比两种注入方式</mark></p> <table> <thead> <tr> <th>对比点</th> <th>@Configuration</th> <th>@Value</th> </tr> </thead> <tbody> <tr> <td>底层框架</td> <td>springboot</td> <td>spring</td> </tr> <tr> <td>功能</td> <td>批量注入配置文件属性</td> <td>单个注入</td> </tr> <tr> <td>setter方法</td> <td>需要</td> <td>不需要</td> </tr> <tr> <td>复制类型注入</td> <td>支持</td> <td>不支持</td> </tr> <tr> <td>松散绑定</td> <td>支持</td> <td>不支持</td> </tr> <tr> <td>JSR303数据校验</td> <td>支持</td> <td>不支持</td> </tr> <tr> <td>SpEL表达式</td> <td>不支持</td> <td>支持</td> </tr> </tbody> </table> <h3 id="自定义配置">自定义配置</h3> <p>如果使用@PropertySource和@Configuration注解实现，@PropertySource注解可以指定自定义配置文件的名称，@Configuration注解可以将实现类指定为自定义配置类，如果需要将自定义配置文件中的属性值注入实体类属性，可以使@ConfigurationProperties或@Value注入属性值</p> <ul> <li>自定义配置文件,我们创建文件My.properties<br /> 并且在里面输入</li> </ul> <pre><code>my.name=hjk my.address=hehehe</code></pre> <p>修改Person类</p> <pre><code>package com.hjk.springboot01.pojo;  import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.boot.context.properties.EnableConfigurationProperties; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource;  @Configuration @PropertySource("classpath:My.properties") @EnableConfigurationProperties(Person.class) @ConfigurationProperties(prefix = "my") public class Person {     private String name;     private String address;      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     }      public String getAddress() {         return address;     }      public void setAddress(String address) {         this.address = address;     }      @Override     public String toString() {         return "Person{" +                 "name='" + name + '\'' +                 ", address='" + address + '\'' +                 '}';     } }</code></pre> <table> <thead> <tr> <th>@Configuration</th> <th>表示自定义配置类，这个类会作为bean组件添加到spring容器种</th> </tr> </thead> <tbody> <tr> <td>@PropertySource</td> <td>指定自定义配置文件的位置和名称</td> </tr> <tr> <td>@ConfigurationProperties</td> <td>将配置类中以指定开头的属性值注入配置类属性</td> </tr> <tr> <td>@EnableConfigurationProperties</td> <td>开启配置的属性注入功能，配合@ConfigurationProperties使用</td> </tr> </tbody> </table> <h3 id="使用profile进行多环境配置">使用Profile进行多环境配置</h3> <p>在实际开发中，应用程序通常需要部署到不同的环境中，比如开发环境、测试环境、生产环境。不同的环境可能需要不同的配置，针对这种情况，显然手动修改配置文件适应不同开发环境很不现实，这样我们就可以使用项目的多环境配置。</p> <h4 id="使用profile进行多环境配置-1">使用Profile进行多环境配置</h4> <p>使用Profile进行多环境配置命名必须是固定格式。</p> <pre><code>application-dev.properties application-test.properties application-prod.properties</code></pre> <p>如果想使用上述对应环境的配置文件，需要在全局配置文件里开启指定的配置文件即可。<br /> 有两种方式：<br /> 第一种：在控制台输入</p> <pre><code>java -jar xxx.jar --spring.profiles.active=dev</code></pre> <p>第二种：在application.properties或者yaml中开启</p> <pre><code>spring.profiles.active=dev</code></pre> <hr/> <ul> <li>使用注解@Profile进行多环境配置，这里就不写了。</li> </ul> <h2 id="总结">总结</h2> <p>主要记录了springboot的核心配置和相关注解，包括全局配置使用，配置文件属性值的注入、springboot自定义配置、多环境配置，这些都是需要我们掌握的基本技能。</p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3204.htm">DDL —— 数据定义语言</a></p>
                                                <p>下一个：<a href="/html/category/article-3206.htm">使用 Eslint +  husky + lint-staged + Prettier 提高前端项目质量、统一项目代码风格</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4090.htm" title="设计模式学习笔记责任链模式实现及在Filter中的应用详解">设计模式学习笔记责任链模式实现及在Filter中的应用详解</a></li>
                        <li class="py-2"><a href="/html/category/article-4345.htm" title="国产机油品牌有哪些牌子(国产润滑油十大名牌)">国产机油品牌有哪些牌子(国产润滑油十大名牌)</a></li>
                        <li class="py-2"><a href="/html/category/article-4536.htm" title="申请动物诊疗机构需要具备哪些条件和要求的条件（申办动物诊疗许可证的条件）">申请动物诊疗机构需要具备哪些条件和要求的条件（申办动物诊疗许可证的条件）</a></li>
                        <li class="py-2"><a href="/html/category/article-3778.htm" title="vue 的ESlint .eslintrc.js 文件 常用配置和注释">vue 的ESlint .eslintrc.js 文件 常用配置和注释</a></li>
                        <li class="py-2"><a href="/html/category/article-6038.htm" title="动物疫苗企业名单公示最新（动物疫苗生产厂家排名）">动物疫苗企业名单公示最新（动物疫苗生产厂家排名）</a></li>
                        <li class="py-2"><a href="/html/category/article-4425.htm" title="动物机体注射疫苗后产生的抗体通常存在哪里? 动物机体注射疫苗后产生的抗体通常存在哪里">动物机体注射疫苗后产生的抗体通常存在哪里? 动物机体注射疫苗后产生的抗体通常存在哪里</a></li>
                        <li class="py-2"><a href="/html/category/article-6039.htm" title="宠福鑫宠物医院通州店（宠福鑫动物医院亦庄完全分院）">宠福鑫宠物医院通州店（宠福鑫动物医院亦庄完全分院）</a></li>
                        <li class="py-2"><a href="/html/category/article-4465.htm" title="重庆哪里可以领养宠物猫的地方（重庆领养猫在哪领养）">重庆哪里可以领养宠物猫的地方（重庆领养猫在哪领养）</a></li>
                        <li class="py-2"><a href="/html/category/article-4117.htm" title="搭建vue3.0+Element Plus项目">搭建vue3.0+Element Plus项目</a></li>
                        <li class="py-2"><a href="/html/category/article-6170.htm" title="宠物领养需求分析论文怎么写（宠物领养需求分析论文怎么写范文）">宠物领养需求分析论文怎么写（宠物领养需求分析论文怎么写范文）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">37</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>