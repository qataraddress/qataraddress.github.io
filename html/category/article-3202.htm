<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3202.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>使用aspnetcore前后端分离开发，你一定要知道这个 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">使用aspnetcore前后端分离开发，你一定要知道这个</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h1 id="前言">前言</h1> <p>用过Vue单页面应用开发的，一定都知道<code>Vue-router</code>这个路由组件，它支持<code>hash</code>和<code>history</code>两种模式。</p> <h2 id="html5-history-模式">HTML5 History 模式</h2> <p><code>vue-router</code>&nbsp;默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p> <p>如果不想要很丑的 hash，我们可以用路由的<strong>history 模式</strong>，这种模式充分利用<code>history.pushState</code>&nbsp;API 来完成 URL 跳转而无须重新加载页面。</p> <pre><code>const router = new VueRouter({   mode: 'history',   routes: [...] })</code></pre> <p>当你使用 history 模式时，URL 就像正常的 url，例如<code>http://yoursite.com/user/id</code>，也好看！<br /> 不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问<code>http://oursite.com/user/id</code>&nbsp;就会返回 404，这就不好看了。</p> <p>所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个<code>index.html</code>&nbsp;页面，这个页面就是你 app 依赖的页面。</p> <h1 id="aspnetcore使用vuerouter-history模式如何生产部署">aspnetcore使用Vuerouter history模式如何生产部署</h1> <p>今天我们的目的就是如何使用<code>history</code>模式，让url地址更加简洁美观，为了更完整的演示，从头手把手演示一遍。</p> <h2 id="创建vue项目">创建vue项目</h2> <p>首先安装<code>nodejs</code>，然后执行下面的npm命令创建vue3项目，跟着提示选择是或否即可完成项目的创建。本次创建的项目名称为<code>vue-project</code></p> <pre><code>npm init vue@3</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/b1102ff2304c93217055262504135019.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"></p> <h2 id="创建aspnetcore的webapi项目">创建aspnetcore的webapi项目</h2> <p>如下图选择ASP.Net Core WebApi项目，项目名称为<code>TestHistory</code>，目录选择和上面Vue项目同属一个文件夹下。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/5a30a17a1233cb342801bbefa77c3b19.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"></p> <h2 id="配置history模式">配置History模式</h2> <h3 id="配置前端">配置前端</h3> <p>在<code>vscode</code>打开前端项目，找到router配置<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1924aa525825b3328458d1844a76d8c3.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"><br /> 由于这里创建的是Vue3项目模板，模板自动配置好的vuerouter4，<br /> 其实下面这种是一样的。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://router.vuejs.org/zh/api/#createwebhistory"  target="_blank" rel="nofollow">详情参考</a>,</p> <pre><code>const router = new VueRouter({   mode: 'history',   routes: [...] })</code></pre> <p>如果要使用<code>hash</code>模式，则使用<code>createWebHashHistory</code>函数创建。</p> <h3 id="配置后端">配置后端</h3> <p>如果我们的前端和后端用的是同一个域名，也就是部署在同一个目录下，则应该将前端编译后的Html页面使用<code>aspnetcore</code>的静态资源进行托管，而不是直接放到根目录下。<br /> 后端首先要添加<code>app.UseStaticFiles();</code>以支持静态资源托管，然后创建该中间件默认的静态资源文件目录<code>wwwroot</code>。</p> <h2 id="部署">部署</h2> <p>将webapi项目发布到本地<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/7329a4ea89580bcf7d84b5b9035815a4.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"><br /> vue项目执行<code>npm run build</code>编译前端代码，将<code>dist</code>目录下的文件拷贝到到webapi发布后的<code>wwwroot</code>目录下，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/34ec8a4a6b04552e137fef3035875a23.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"></p> <p>IIS新建一个站点，这里使用<code>8080</code>端口<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/1fa9d0e9559439e7bd75c9a5dd1840df.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"><br /> 别忘记安装<code>Hosting Bundle</code>。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a4ff8ad2e83138e185d12b12b0d1824d.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"></p> <p>如果一切顺利，打开<code>http://localhost:8080</code>你应该会看到这个页面。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/561e6a8309421142774dae2ed8b2b91c.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"><br /> 点击about还会显示下面这个页面，而且地址是<code>http://localhost:8080/about</code>,这不就是<code>history</code>模式的效果吗！<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/055ff79dac6aba140013fb35196e7eaf.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"><br /> 什么都没做，效果就达到了？</p> <p>别急的得意，在<code>http://localhost:8080/about</code>这个地址下，刷新下网页试试。<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/267f216dd502e40983a23098deaebca9.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"><br /> 卧槽，404了。</p> <p>先解释下为什么会这样，当你访问<code>http://localhost:8080</code>时由于iis默认是设置了默认文档</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/80b6d1057e87c7a31bb9fa6803391f17.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ffe2378a91fee7c38b7b9efe17c310ff.jpg" alt="使用aspnetcore前后端分离开发，你一定要知道这个"><br /> 当找不到你请求的资源时，它会尝试检查目录下的默认文档是否存在，按先后顺序检查，发现存在<code>index.html</code>所以就返回浏览器了，所以能够正常显示；当你点击about时，其实只是触发了页面的一个事件，页面有变化，url也变化了，但浏览器压根没刷新。当你手动刷新<code>http://localhost:8080/about</code>时，就向后端发起这个地址的Get请求，很明显，我们没有写任何<code>Controller</code>来匹配这个路由，<code>wwwroot</code>目录下也不存在<code>about/index.html</code>当然返回404了。</p> <h1 id="如何配置history模式而不导致404">如何配置history模式，而不导致404</h1> <p>Vuerouter官方文档给出了部分后端服务器的配置方式<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://v3.router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90"  target="_blank" rel="nofollow">后端配置例子</a><br /> 这里只展示aspnetcore常用的服务器</p> <h4 id="nginx">nginx</h4> <pre><code>location / {   try_files $uri $uri/ /index.html; }</code></pre> <h4 id="internet-information-services-iis">Internet Information Services (IIS)</h4> <ol> <li>安装<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.iis.net/downloads/microsoft/url-rewrite"  target="_blank" rel="nofollow">IIS UrlRewrite(opens new window)</a></li> <li>在你的网站根目录中创建一个<code>web.config</code>&nbsp;文件，内容如下：</li> </ol> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;configuration&gt;   &lt;system.webServer&gt;     &lt;rewrite&gt;       &lt;rules&gt;         &lt;rule name="Handle History Mode and custom 404/500" stopProcessing="true"&gt;           &lt;match url="(.*)" /&gt;           &lt;conditions logicalGrouping="MatchAll"&gt;             &lt;add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" /&gt;             &lt;add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" /&gt;           &lt;/conditions&gt;           &lt;action type="Rewrite" url="/" /&gt;         &lt;/rule&gt;       &lt;/rules&gt;     &lt;/rewrite&gt;   &lt;/system.webServer&gt; &lt;/configuration&gt;</code></pre> <p>nginx的由于没有环境，没有测试，应该没问题，配置也比较简单。<br /> iis的根据文档做一遍，<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.iis.net/downloads/microsoft/url-rewrite"  target="_blank" rel="nofollow">UrlRewrite</a>可以理解为是一个中间件，会对请求拦截，对符合规则的url进行路径重写，可行。</p> <p>当然我要做的不是上面的任何一种，因为我们的站点可能会部署到各种各样的服务器，每次换服务器都需要不同的配置来实现，很繁琐，既然我们aspnetcore拥有强大的中间件系统，为什么不让aspnetcore来做这件事呢，不再依赖不同服务器的配置方案，实现一次编码，到处运行，在之前的文章中有介绍过如何处理404<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/springhgui/p/16161134.html"  target="_blank" rel="nofollow">《ASP.NETCore统一处理404错误都有哪些方式？》</a><br /> 那我们就在404的处理逻辑里实现其实就好了。</p> <p>直接上代码</p> <pre><code class="language-c#">app.MapFallback(async (context) =&gt; {     var phpath = Path.Join(app.Environment.WebRootPath, context.Request.Path);     var name = Path.Combine(Path.GetDirectoryName(phpath)!, "index.html");     if (File.Exists(name))     {         context.Response.StatusCode = 200;         await context.Response.SendFileAsync(name);     } });</code></pre> <p>1.当进入404处理逻辑时，首先拼接访问路径<br /> 2.检查访问的路径所属的文件夹下是否存在<code>index.html</code>文件<br /> 3.当文件存在，则修改响应码，返回该文件。<br /> 4.不存在，什么也不干（这里其实可以做个友好提示页面）。<br /> 重新发布，测试，不管如何刷新，都能正常显示了。</p> <h1 id="源码">源码</h1> <p>Github上获取：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/SpringHgui/TestHistory"  target="_blank" rel="nofollow">https://github.com/SpringHgui/TestHistory</a></p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3201.htm">源码中的设计模式&#8211;装饰器模式_在线工具</a></p>
                                                <p>下一个：<a href="/html/category/article-3203.htm">JavaScript案例——04tab选项卡功能</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3378.htm" title="Django 之视图url参数获取">Django 之视图url参数获取</a></li>
                        <li class="py-2"><a href="/html/category/article-3397.htm" title="「Spring Boot 系列」05. Spring Boot Profiles（多环境配置）">「Spring Boot 系列」05. Spring Boot Profiles（多环境配置）</a></li>
                        <li class="py-2"><a href="/html/category/article-3384.htm" title="Parquet 之mapreduce">Parquet 之mapreduce</a></li>
                        <li class="py-2"><a href="/html/category/article-3371.htm" title="浅谈Vue3中watchEffect的具体用法_vue.js">浅谈Vue3中watchEffect的具体用法_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-3375.htm" title="Python中安装pandas出现问题总结">Python中安装pandas出现问题总结</a></li>
                        <li class="py-2"><a href="/html/category/article-3364.htm" title="如何在idea上部署tomcat&amp;项目">如何在idea上部署tomcat&amp;项目</a></li>
                        <li class="py-2"><a href="/html/category/article-3399.htm" title="获取java泛型真实类型的方式">获取java泛型真实类型的方式</a></li>
                        <li class="py-2"><a href="/html/category/article-3365.htm" title="Robinhood基于Apache Hudi的下一代数据湖实践">Robinhood基于Apache Hudi的下一代数据湖实践</a></li>
                        <li class="py-2"><a href="/html/category/article-3394.htm" title="C++编程——C++对象模型和this指针">C++编程——C++对象模型和this指针</a></li>
                        <li class="py-2"><a href="/html/category/article-3418.htm" title="序列化之@JsonComponent、@JsonInclude、@JsonSerialize、@JsonIgnore、JsonProperty区别与联系作用">序列化之@JsonComponent、@JsonInclude、@JsonSerialize、@JsonIgnore、JsonProperty区别与联系作用</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>