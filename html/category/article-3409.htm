<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3409.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Hyperledger Fabric 通道配置文件和容器环境变量详解 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">Hyperledger Fabric 通道配置文件和容器环境变量详解</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h2 id="摘要">摘要</h2> <p>Fabric 网络启动的过程中需要进行大量配置，新学时对各个配置的作用一无所知，这导致我曾在网络出问题时先对配置文件的内容进行排列组合后再祈祷它能在某个时刻顺利运行，因此掌握 fabric 各个配置项的含义至关重要。本文对 configtxgen 的配置文件 configtx.yaml 进行了详细的分析解释，对 peer 、 orderer 、 fabric-ca 容器的常用环境变量也给除了详细说明，其中某些配置由于比较罕见因此并没有展开介绍，直接使用默认值即可，会在将来用上时再更新。</p> <h2 id="准备介绍">准备介绍</h2> <p>Fabric 节点的主配置路径为<code>FABRIC_CFG_PATH</code> 环境变量所指向路径（默认为<code>/etc/hyperledger/fabric</code>）。在不显式指定配置路径时，会尝试从主配置路径下查找相关的配置文件。</p> <table> <thead> <tr> <th style="text-align: center">项</th> <th style="text-align: center">配置文件路径</th> <th style="text-align: center">说明</th> </tr> </thead> <tbody> <tr> <td style="text-align: center"><code>peer</code></td> <td style="text-align: center"><code>$FABRIC_CFG_PATH/core.yaml</code></td> <td style="text-align: center">指定 peer 节点运行时参数</td> </tr> <tr> <td style="text-align: center"><code>orderer</code></td> <td style="text-align: center"><code>$FABRIC_CFG_PATH/orderer.yaml</code></td> <td style="text-align: center">指定 orderer 节点运行时参数</td> </tr> <tr> <td style="text-align: center"><code>fabric-ca</code></td> <td style="text-align: center"><code>$FABRIC_CA_SERVER_HOME/fabric-ca-server-config.yaml</code></td> <td style="text-align: center">指定 CA 节点运行时参数</td> </tr> <tr> <td style="text-align: center"><code>configtxgen</code></td> <td style="text-align: center"><code>$FABRIC_CA_SERVER_HOME/configtx.yaml</code></td> <td style="text-align: center">指定 configtxgen 命令运行时参数</td> </tr> </tbody> </table> <p>通常 fabric 服务有两种启动方式，一种是直接通过二进制命令直接在主机根据配置文件启动节点，另一种是使用docker根据环境变量和默认配置文件启动节点，其中除了<code>configtxgen</code> 必须使用配置文件外，其余各服务都可以通过 docker 启动。因此本文将重点介绍<code>configtxgen</code> 的配置文件及其它服务的 docker 环境变量。</p> <h2 id="configtxyaml-详解">configtx.yaml 详解</h2> <p>transaction 的英文缩写是TX(表示交易)， configtx 表示交易配置，所以和交易相关的配置，如应用通道、锚节点、 Orderer 服务等，都是在 configtx.yaml文件中配置的。<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/hyperledger/fabric/blob/main/sampleconfig/configtx.yaml"  target="_blank" rel="nofollow">configtx.yaml</a> 文件由6个部分组成，其中前5个部分的配置都是为了在 Profiles 被引用，在 Profiles 中引用其它部分的同时可以覆盖特定配置，本节示例文件来自于<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/wefantasy/FabricLearn/blob/main/5_FabricNetworkByMultiHost/config/configtx.yaml"  target="_blank" rel="nofollow">configtx.yaml</a>。<sup class="footnote-ref"><a href="#fn1" id="fnref1" rel="nofollow">[1]</a></sup><sup class="footnote-ref"><a href="#fn2" id="fnref2" rel="nofollow">[2]</a></sup></p> <h3 id="organizations">Organizations</h3> <p><code>Organizations</code> 用来定义不同的组织，其中 MSP(Membership Service Provider) 是一个组织的身份标识，在fabric中组织是由<code>MSPID</code> 来唯一标识。</p> <pre><code class="language-yaml">Organizations:     - &amp;councilMSP           # 定义一个组织引用，类似于变量，可在Profile部分被引用；所有带 &amp; 符号的都是引用变量，使用 * 来引用         Name: councilMSP    # 组织名称         ID: councilMSP      # 组织ID         MSPDir: ../orgs/council.ifantasy.net/msp    # 组织MSP文件夹的路径         Policies:           # 组织策略             Readers:                 Type: Signature                 Rule: "OR('councilMSP.member')"             Writers:                 Type: Signature                 Rule: "OR('councilMSP.member')"             Admins:                 Type: Signature                 Rule: "OR('councilMSP.admin')"         # 此文件内的Orderer端口皆为容器内端口         OrdererEndpoints:   # 定义排序节点（可多个），客户端和对等点可以分别连接到这些orderer以推送transactions和接收区块。             - "orderer1.council.ifantasy.net:7051"             - "orderer2.council.ifantasy.net:7054"             - "orderer3.council.ifantasy.net:7057"         AnchorPeers:    # 定义锚节点，锚节点对外代表本组织通信             - Host: peer1.soft.ifantasy.net               Port: 7251</code></pre> <h3 id="capabilities">Capabilities</h3> <p><code>Capabilities</code> 定义了 fabric 程序要加入网络所必须支持的特性，通过定义通道的能力，就明确了不满足该能力要求的 fabric 程序，将无法处理交易，除非升级到对应的版本。</p> <pre><code class="language-yaml">Capabilities:     # Channel配置同时针对通道上的Orderer节点和Peer节点(设置为ture表明要求节点具备该能力)；     Channel: &amp;ChannelCapabilities         V2_0: true  # 要求Channel上的所有Orderer节点和Peer节点达到v2.0.0或更高版本      # Orderer配置仅针对Orderer节点，不限制Peer节点     Orderer: &amp;OrdererCapabilities         V2_0: true  # 要求所有Orderer节点升级到v2.0.0或更高版本     # Application配置仅应用于对等网络，不需考虑排序节点的升级     Application: &amp;ApplicationCapabilities         V2_0: true</code></pre> <h3 id="application">Application</h3> <p><code>Application</code> 定义了应用内的访问控制策略和参与组织。</p> <pre><code class="language-yaml">Application: &amp;ApplicationDefaults      # 干预 创建链码的系统链码 的函数访问控制策略     _lifecycle/CheckCommitReadiness: /Channel/Application/Writers       # CheckCommitReadiness 函数的访问策略     _lifecycle/CommitChaincodeDefinition: /Channel/Application/Writers  # CommitChaincodeDefinition 函数的访问策略     _lifecycle/QueryChaincodeDefinition: /Channel/Application/Writers   # QueryChaincodeDefinition 函数的访问策略     _lifecycle/QueryChaincodeDefinitions: /Channel/Application/Writers  # QueryChaincodeDefinitions 函数的访问策略      # 关于 生命周期系统链码（lscc） 的函数访问控制策略     lscc/ChaincodeExists: /Channel/Application/Readers              # getid 函数的访问策略     lscc/GetDeploymentSpec: /Channel/Application/Readers            # getdepspec 函数的访问策略     lscc/GetChaincodeData: /Channel/Application/Readers             # getccdata 函数的访问策略     lscc/GetInstantiatedChaincodes: /Channel/Application/Readers    # getchaincodes 函数的访问策略      # 关于 查询系统链码（qscc） 的函数访问控制策略     qscc/GetChainInfo: /Channel/Application/Readers         # GetChainInfo 函数的访问策略     qscc/GetBlockByNumber: /Channel/Application/Readers     # GetBlockByNumber 函数的访问策略     qscc/GetBlockByHash: /Channel/Application/Readers       # GetBlockByHash 函数的访问策略     qscc/GetTransactionByID: /Channel/Application/Readers   # GetTransactionByID 函数的访问策略     qscc/GetBlockByTxID: /Channel/Application/Readers       # GetBlockByTxID 函数的访问策略      # 关于 配置系统链码（cscc） 的函数访问控制策略     cscc/GetConfigBlock: /Channel/Application/Readers   # GetConfigBlock 函数的访问策略     cscc/GetChannelConfig: /Channel/Application/Readers # GetChannelConfig 函数的访问策略          # 关于 peer 节点的函数访问控制策略     peer/Propose: /Channel/Application/Writers                  # Propose 函数的访问策略     peer/ChaincodeToChaincode: /Channel/Application/Writers     # ChaincodeToChaincode 函数的访问策略      # 关于事件资源的访问策略     event/Block: /Channel/Application/Readers           # 发送区块事件的策略     event/FilteredBlock: /Channel/Application/Readers   # 发送筛选区块事件的策略          # 默认为空，在 Profiles 中定义     Organizations:     # 定义本层级的应用控制策略，路径为 /Channel/Application/&lt;PolicyName&gt;     Policies:         Readers:    # /Channel/Application/Readers             Type: ImplicitMeta             Rule: "ANY Readers"         Writers:             Type: ImplicitMeta             Rule: "ANY Writers"         Admins:             Type: ImplicitMeta             Rule: "MAJORITY Admins"         LifecycleEndorsement:             Type: ImplicitMeta             Rule: "MAJORITY Endorsement"         Endorsement:             Type: ImplicitMeta             Rule: "MAJORITY Endorsement"      Capabilities:         &lt;&lt;: *ApplicationCapabilities    # 引用上节 Capabilities 的 ApplicationCapabilities</code></pre> <h3 id="orderer">Orderer</h3> <p><code>Orderer</code> 定义了排序服务的相关参数，这些参数将用于创建创世区块或交易。</p> <pre><code class="language-yaml">Orderer: &amp;OrdererDefaults     OrdererType: etcdraft   # 排序服务算法，目前可用：solo，kafka，etcdraft     Addresses:              # 排序节点地址         - orderer1.soft.ifantasy.net:7051         - orderer2.web.ifantasy.net:7052         - orderer3.hard.ifantasy.net:7053     # 定义了 etcdRaft 排序类型被选择时的配置     EtcdRaft:         Consenters:         # 定义投票节点         - Host: orderer1.council.ifantasy.net           Port: 7051           ClientTLSCert: ../orgs/council.ifantasy.net/registers/orderer1/tls-msp/signcerts/cert.pem # 节点的TLS签名证书           ServerTLSCert: ../orgs/council.ifantasy.net/registers/orderer1/tls-msp/signcerts/cert.pem         - Host: orderer2.council.ifantasy.net           Port: 7054           ClientTLSCert: ../orgs/council.ifantasy.net/registers/orderer2/tls-msp/signcerts/cert.pem           ServerTLSCert: ../orgs/council.ifantasy.net/registers/orderer2/tls-msp/signcerts/cert.pem         - Host: orderer3.council.ifantasy.net           Port: 7057           ClientTLSCert: ../orgs/council.ifantasy.net/registers/orderer3/tls-msp/signcerts/cert.pem           ServerTLSCert: ../orgs/council.ifantasy.net/registers/orderer3/tls-msp/signcerts/cert.pem      # 区块打包的最大超时时间 (到了该时间就打包区块)     BatchTimeout: 2s     # 区块链的单个区块配置（orderer端切分区块的参数）     BatchSize:         MaxMessageCount: 10         # 一个区块里最大的交易数         AbsoluteMaxBytes: 99 MB     # 一个区块的最大字节数，任何时候都不能超过         PreferredMaxBytes: 512 KB   # 一个区块的建议字节数，如果一个交易消息的大小超过了这个值, 就会被放入另外一个更大的区块中      # 参与维护Orderer的组织，默认为空（通常在 Profiles 中再配置）     Organizations:     # 定义本层级的排序节点策略，其权威路径为 /Channel/Orderer/&lt;PolicyName&gt;     Policies:         Readers:    # /Channel/Orderer/Readers             Type: ImplicitMeta             Rule: "ANY Readers"         Writers:             Type: ImplicitMeta             Rule: "ANY Writers"         Admins:             Type: ImplicitMeta             Rule: "MAJORITY Admins"         BlockValidation:    # 指定了哪些签名必须包含在区块中，以便peer节点进行验证             Type: ImplicitMeta             Rule: "ANY Writers"     Capabilities:         &lt;&lt;: *OrdererCapabilities    # 引用上节 Capabilities 的 OrdererCapabilities</code></pre> <h3 id="channel">Channel</h3> <p><code>Channel</code> 定义要写入创世区块或配置交易的通道参数。</p> <pre><code class="language-yaml">Channel: &amp;ChannelDefaults     #   定义本层级的通道访问策略，其权威路径为 /Channel/&lt;PolicyName&gt;     Policies:         Readers:    # 定义谁可以调用 'Deliver' 接口             Type: ImplicitMeta             Rule: "ANY Readers"         Writers:    # 定义谁可以调用 'Broadcast' 接口             Type: ImplicitMeta             Rule: "ANY Writers"         # By default, who may modify elements at this config level         Admins:     # 定义谁可以修改本层策略             Type: ImplicitMeta             Rule: "MAJORITY Admins"      Capabilities:         &lt;&lt;: *ChannelCapabilities        # 引用上节 Capabilities 的 ChannelCapabilities</code></pre> <h3 id="profiles">Profiles</h3> <p><code>Profiles</code> 配置用于<code>configtxgen</code> 工具的配置入口，主要是引用其余五个部分的参数，其定义了一系列的配置模板，每个模板代表了特定应用场景下的自定义的通道配置，可以用来创建系统通道或应用通道。配置模板中可以包括<code>Application</code> 、<code>Capabilities</code> 、<code>Consortium</code> 、<code>Consortiums</code> 、<code>Policies</code> 、<code>Orderer</code> 等配置字段，根据使用目的不同，一般只包括部分字段。除了通道默认的配置，创建系统通道初始区块的模板一般需要包括<code>Orderer</code> 、<code>Consortiums</code> 字段信息（也可以包括<code>Applicaion</code> 字段定义初始应用通道配置）：</p> <pre><code class="language-yaml">Profiles:     # OrgsChannel用来生成channel配置信息，名字可以任意     # 需要包含Consortium和Applicatioon两部分。     OrgsChannel:         Consortium: SampleConsortium    # 通道所关联的联盟名称         &lt;&lt;: *ChannelDefaults         Orderer:             &lt;&lt;: *OrdererDefaults             Organizations:                 - *councilMSP             Capabilities: *OrdererCapabilities         Application:             &lt;&lt;: *ApplicationDefaults             Organizations:                 - *softMSP                 - *webMSP                 - *hardMSP             Capabilities:                 &lt;&lt;: *ApplicationCapabilities</code></pre> <h2 id="peer-配置详解">peer 配置详解</h2> <p>当 Peer 节点启动时，会按照优先级从高到低的顺序依次尝试从命令行参数、环境变量和配置文件中读取配置信息，当从环境变量中读入配置信息时，除了日志使用单独的<code>FABRIC_LOGGING_SPEC</code> 环境变量进行指定，其他都需要以<code>CORE_</code> 前缀开头，例如配置文件中的<code>peer.id</code> 项，对应环境变量<code>CORE_PEER_ID</code> 。</p> <p>Peer 节点默认的配置文件读取路径为<code>$FABRIC_CFG_PATH/core.yaml</code> ，如果没找到则尝试查找当前目录下的<code>./core.yaml</code> 文件，如果还没有找到则尝试查找默认的<code>/etc/hyperledger/fabric/core.yaml</code> 文件。在结构上，<code>core.yaml</code> 文件中可以分为<code>peer</code> 、<code>vm</code> 、<code>chaincode</code> 、<code>ledger</code> 、<code>operations</code> 、<code>metrics</code> 六大部分，<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/hyperledger/fabric/blob/main/sampleconfig/core.yaml"  target="_blank" rel="nofollow">core.yaml</a> 文件太过冗长在此不详细介绍，本节只介绍 Docker 环境下的常用环境变量（以后用到再更新），一个常用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/wefantasy/FabricLearn/blob/main/5_FabricNetworkByMultiHost/compose/docker-base.yaml"  target="_blank" rel="nofollow">示例配置</a> 如下<sup class="footnote-ref"><a href="#fn3" id="fnref3" rel="nofollow">[3]</a></sup>：</p> <pre><code class="language-yaml">  peer-base:     image: hyperledger/fabric-peer:${FABRIC_BASE_VERSION}     environment:       - FABRIC_LOGGING_SPEC=info       - CORE_PEER_ID=peer1.soft.ifantasy.net       - CORE_PEER_LISTENADDRESS=0.0.0.0:7251       - CORE_PEER_ADDRESS=peer1.soft.ifantasy.net:7251       - CORE_PEER_LOCALMSPID=softMSP       - CORE_PEER_MSPCONFIGPATH=${DOCKER_CA_PATH}/peer/msp       - CORE_PEER_TLS_ENABLED=true       - CORE_PEER_TLS_CERT_FILE=${DOCKER_CA_PATH}/peer/tls-msp/signcerts/cert.pem       - CORE_PEER_TLS_KEY_FILE=${DOCKER_CA_PATH}/peer/tls-msp/keystore/key.pem       - CORE_PEER_TLS_ROOTCERT_FILE=${DOCKER_CA_PATH}/peer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem       - CORE_PEER_GOSSIP_USELEADERELECTION=true       - CORE_PEER_GOSSIP_ORGLEADER=false       - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.soft.ifantasy.net:7251       - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock       - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_${DOCKER_NETWORKS}      working_dir: ${DOCKER_CA_PATH}/peer     volumes:       - /var/run:/host/var/run     networks:       - ${DOCKER_NETWORKS}</code></pre> <blockquote> <p>通常我们喜欢使用<code>extends</code> 方式分割通用容器，需要注意的是父容器的环境变量无法被子容器环境变量覆盖。<br /> 其中各项含义如下：</p> </blockquote> <ul> <li><code>FABRIC_LOGGING_SPEC</code> ：指定日志级别</li> <li><code>CORE_PEER_ID</code> ： Peer 在网络中的 ID 信息，用于辨识不同的节点</li> <li><code>CORE_PEER_LISTENADDRESS</code> ：服务监听的本地地址，本地有多个网络接口时可指定仅监听某个接口</li> <li><code>CORE_PEER_ADDRESS</code> ：对同组织内其他节点的监听连接地址。当服务在NAT设备上运行时，该配置可以指定服务对外宣称的可访问地址。如果是客户端，则作为其连接的 Peer 服务地址</li> <li><code>CORE_PEER_LOCALMSPID</code> ：Peer 所关联的 MSPID ，一般为所属组织名称，需要与通道配置内名称一致</li> <li><code>CORE_PEER_MSPCONFIGPATH</code> ：MSP 目录所在的路径，可以为绝对路径，或相对配置目录的路径</li> <li><code>CORE_PEER_TLS_ENABLED</code> ：是否开启 server 端 TLS 检查</li> <li><code>CORE_PEER_TLS_CERT_FILE</code> ：server 端使用的 TLS 证书路径</li> <li><code>CORE_PEER_TLS_KEY_FILE</code> ：server 端使用的 TLS 私钥路径</li> <li><code>CORE_PEER_TLS_ROOTCERT_FILE</code> ：server 端使用的根CA的证书，签发服务端的 TLS证书</li> <li><code>CORE_PEER_GOSSIP_USELEADERELECTION</code> ：是否允许节点之间动态进行组织的代表（leader）节点选举，通常情况下推荐开启</li> <li><code>CORE_PEER_GOSSIP_ORGLEADER</code> ：本节点是否指定为组织的代表节点，与useLeaderElection不能同时指定为true</li> <li><code>CORE_PEER_GOSSIP_EXTERNALENDPOINT</code> ：节点向组织外节点公开的服务地址，默认为空，代表不被其他组织所感知</li> <li><code>CORE_VM_ENDPOINT</code> ：docker daemon 的地址</li> <li><code>CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE</code> ：运行链码容器的网络</li> </ul> <h2 id="orderer-配置详解">orderer 配置详解</h2> <p>排序节点在 Fabric 网络中为 Peer 提供排序服务。与Peer节点类似，排序节点支持从命令行参数、环境变量或配置文件中读取配置信息。环境变量中配置需要以<code>ORDERER_</code> 前缀开头，例如，配置文件中的<code>general.ListenAddress</code> 项，对应到环境变量<code>ORDERER_GENERAL_LISTENADDRESS</code> 。节点默认的配置文件读取路径为<code>$FABRIC_CFG_PATH/orderer.yaml</code> ，如果没找到则尝试查找当前目录下的<code>./orderer.yaml</code> 文件，如果还没有找到则尝试查找默认的<code>/etc/hyperledger/fabric/orderer.yaml</code> 文件。在结构上，<code>orderer.yaml</code> 文件中一般包括<code>General</code> 、<code>FileLedger</code> 、<code>RAMLedger</code> 、<code>Kafka</code> 、<code>Debug</code> 、<code>Operations</code> 、<code>Metrics</code> 和<code>Consensus</code> 八大部分，<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/hyperledger/fabric/blob/main/sampleconfig/orderer.yaml"  target="_blank" rel="nofollow">orderer.yaml</a> 文件太过冗长再此不详细介绍，本节只介绍 Docker 环境下的常用环境变量（以后用到再更新），一个常用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/wefantasy/FabricLearn/blob/main/5_FabricNetworkByMultiHost/compose/docker-base.yaml"  target="_blank" rel="nofollow">示例配置</a> 如下<sup class="footnote-ref"><a href="#fn4" id="fnref4" rel="nofollow">[4]</a></sup>：</p> <pre><code class="language-yaml">  orderer-base:     image: hyperledger/fabric-orderer:${FABRIC_BASE_VERSION}     environment:       - ORDERER_HOME=${DOCKER_CA_PATH}/orderer       - ORDERER_HOST=orderer1.council.ifantasy.net       - ORDERER_GENERAL_LOCALMSPID=councilMSP       - ORDERER_GENERAL_LISTENPORT=7051       - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0       - ORDERER_GENERAL_BOOTSTRAPMETHOD=none       - ORDERER_CHANNELPARTICIPATION_ENABLED=true       # - ORDERER_GENERAL_GENESISMETHOD=file       # - ORDERER_GENERAL_GENESISFILE=${DOCKER_CA_PATH}/orderer/genesis.block       - ORDERER_GENERAL_LOCALMSPDIR=${DOCKER_CA_PATH}/orderer/msp       - ORDERER_GENERAL_LOGLEVEL=debug       - ORDERER_GENERAL_TLS_ENABLED=true       - ORDERER_GENERAL_TLS_CERTIFICATE=${DOCKER_CA_PATH}/orderer/tls-msp/signcerts/cert.pem       - ORDERER_GENERAL_TLS_PRIVATEKEY=${DOCKER_CA_PATH}/orderer/tls-msp/keystore/key.pem       - ORDERER_GENERAL_TLS_ROOTCAS=[${DOCKER_CA_PATH}/orderer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem]       - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=${DOCKER_CA_PATH}/orderer/tls-msp/signcerts/cert.pem       - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=${DOCKER_CA_PATH}/orderer/tls-msp/keystore/key.pem       - ORDERER_GENERAL_CLUSTER_ROOTCAS=[${DOCKER_CA_PATH}/orderer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem]       - ORDERER_ADMIN_TLS_ENABLED=true       - ORDERER_ADMIN_TLS_CERTIFICATE=${DOCKER_CA_PATH}/orderer/tls-msp/signcerts/cert.pem       - ORDERER_ADMIN_TLS_PRIVATEKEY=${DOCKER_CA_PATH}/orderer/tls-msp/keystore/key.pem       - ORDERER_ADMIN_TLS_ROOTCAS=[${DOCKER_CA_PATH}/orderer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem]       - ORDERER_ADMIN_TLS_CLIENTROOTCAS=[${DOCKER_CA_PATH}/orderer/tls-msp/tlscacerts/tls-council-ifantasy-net-7050.pem]       - ORDERER_ADMIN_LISTENADDRESS=0.0.0.0:8888       - ORDERER_METRICS_PROVIDER=prometheus       - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:9999       - ORDERER_DEBUG_BROADCASTTRACEDIR=data/logs     networks:       - ${DOCKER_NETWORKS}</code></pre> <p>其中各项含义如下：</p> <ul> <li><code>ORDERER_HOME</code> ：orderer 运行的根目录</li> <li><code>ORDERER_HOST</code> ：orderer 运行的主机</li> <li><code>ORDERER_GENERAL_LOCALMSPID</code> ： orderer 所关联的 MSPID ，一般为所属组织名称，需要与通道配置内名称一致</li> <li><code>ORDERER_GENERAL_LISTENPORT</code> ：服务绑定的监听端口</li> <li><code>ORDERER_GENERAL_LISTENADDRESS</code> ：服务绑定的监听地址，一般需要指定为所服务的特定网络接口的地址或全网（0.0.0.0）</li> <li><code>ORDERER_GENERAL_BOOTSTRAPMETHOD</code> ：获取引导块的方法，2.x版本中仅支持file或none</li> <li><code>ORDERER_CHANNELPARTICIPATION_ENABLED</code> ：是否提供参与通道的 API</li> <li><code>ORDERER_GENERAL_GENESISMETHOD</code> ：当 ORDERER_GENERAL_BOOTSTRAPMETHOD 为 file 时启用，指定创世区块类型</li> <li><code>ORDERER_GENERAL_GENESISFILE</code> ：指定创世区块位置</li> <li><code>ORDERER_GENERAL_LOCALMSPDIR</code> ：本地 MSP 文件路径</li> <li><code>ORDERER_GENERAL_LOGLEVEL</code> ：日志级别</li> <li><code>ORDERER_GENERAL_TLS_ENABLED</code> ：启用TLS时的相关配置</li> <li><code>ORDERER_GENERAL_TLS_CERTIFICATE</code> ：Orderer 身份证书</li> <li><code>ORDERER_GENERAL_TLS_PRIVATEKEY</code> ：Orderer 签名私钥</li> <li><code>ORDERER_GENERAL_TLS_ROOTCAS</code> ：信任的根证书</li> <li><code>ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE</code> ：双向TLS认证时，作为客户端证书的文件路径，如果没设置会使用 TLS.Certificate</li> <li><code>ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY</code> ：双向TLS认证时，作为客户端私钥的文件路径，如果没设置会使用 TLS.PrivateKey</li> <li><code>ORDERER_GENERAL_CLUSTER_ROOTCAS</code> ：信任的根证书</li> <li><code>ORDERER_ADMIN_TLS_ENABLED</code> ：是否启用 orderer 的管理服务面板</li> <li><code>ORDERER_ADMIN_TLS_CERTIFICATE</code> ：管理服务的证书</li> <li><code>ORDERER_ADMIN_TLS_PRIVATEKEY</code> ：管理服务的私钥</li> <li><code>ORDERER_ADMIN_TLS_ROOTCAS</code> ：管理服务的可信根证书</li> <li><code>ORDERER_ADMIN_TLS_CLIENTROOTCAS</code> ：管理服务客户端的可信根证书</li> <li><code>ORDERER_ADMIN_LISTENADDRESS</code> ：管理服务监听地址</li> <li><code>ORDERER_METRICS_PROVIDER</code> ：统计服务类型，可以为statsd(推送模式)，prometheus(拉取模式)，disabled</li> <li><code>ORDERER_OPERATIONS_LISTENADDRESS</code> ：RESTful 管理服务的监听地址</li> <li><code>ORDERER_DEBUG_BROADCASTTRACEDIR</code> ：广播请求的追踪路径</li> </ul> <h2 id="fabric-ca-配置详解">fabric-ca 配置详解</h2> <p>在 fabric 官方示例中，通常使用<code>cryptogen</code> 生成静态证书文件，但这种方式不适合用于生产环境，而 fabric-ca 可以在生产环境中为所有成员提供安全的证书服务。与其它类型节点类似， fabric-ca 支持从命令行参数、环境变量或配置文件中读取配置信息，且 fabric-ca 分为<code>fabric-ca-server</code> 和<code>fabric-ca-client</code> ，前者用于提供 CA 服务，后者用于向用户提供操作<code>fabric-ca-server</code> 的方法。一个常用<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/wefantasy/FabricLearn/blob/main/5_FabricNetworkByMultiHost/compose/docker-base.yaml"  target="_blank" rel="nofollow">示例配置</a> 如下：</p> <pre><code class="language-yaml">  ca-base:     image: hyperledger/fabric-ca:${FABRIC_CA_VERSION}     environment:       - FABRIC_CA_SERVER_HOME=${DOCKER_CA_PATH}/ca/crypto       - FABRIC_CA_SERVER_TLS_ENABLED=true       - FABRIC_CA_SERVER_DEBUG=true       - FABRIC_CA_SERVER_CSR_CN=council.ifantasy.net       - FABRIC_CA_SERVER_CSR_HOSTS=council.ifantasy.net     networks:       - ${DOCKER_NETWORKS}</code></pre> <p>其中各项内容含义如下：</p> <ul> <li><code>FABRIC_CA_SERVER_HOME</code> ：指定 fabric-ca-server 运行的根目录</li> <li><code>FABRIC_CA_SERVER_TLS_ENABLED</code> ：是否启用 TLS</li> <li><code>FABRIC_CA_SERVER_DEBUG</code> ：是否启用 debug 模式</li> <li><code>FABRIC_CA_SERVER_CSR_CN</code> ：指定证书主体的 cn 字段</li> <li><code>FABRIC_CA_SERVER_CSR_HOSTS</code> ：指定证书主体的 hosts 字段</li> </ul> <h2 id="参考">参考</h2> <hr class="footnotes-sep"/> <section class="footnotes"> <ol class="footnotes-list"> <li id="fn1" class="footnote-item"> <p>黑帽子技术.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/7077858591377457188"  target="_blank" rel="nofollow">Hyperledger Fabric 通道配置文件解析</a>. 掘金. [2022-03-22]<a href="#fnref1" class="footnote-backref" rel="nofollow">↩︎</a></p> </li> <li id="fn2" class="footnote-item"> <p>chainbees.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://sunkaiyuan.blog.csdn.net/article/details/121992226"  target="_blank" rel="nofollow">Fabric创建通道Channel的配置文件configtx.yaml详解</a>. CSDN. [2021-12-17]<a href="#fnref2" class="footnote-backref" rel="nofollow">↩︎</a></p> </li> <li id="fn3" class="footnote-item"> <p>黑帽子技术.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/7077858825524477988"  target="_blank" rel="nofollow">Hyperledger Fabric Peer 配置解析</a>. 掘金. [2022-03-22]<a href="#fnref3" class="footnote-backref" rel="nofollow">↩︎</a></p> </li> <li id="fn4" class="footnote-item"> <p>黑帽子技术.<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/7077857829670879262"  target="_blank" rel="nofollow">Hyperledger Fabric Orderer 配置解析</a>. 掘金. [2022-03-22]<a href="#fnref4" class="footnote-backref" rel="nofollow">↩︎</a></p> </li> </ol> </section> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3408.htm">Springboot @Order注解正确用法</a></p>
                                                <p>下一个：<a href="/html/category/article-3410.htm">innoDB如何解决幻读详解</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3408.htm" title="Springboot @Order注解正确用法">Springboot @Order注解正确用法</a></li>
                        <li class="py-2"><a href="/html/category/article-4390.htm" title="襄阳市养狗（襄阳市养犬）">襄阳市养狗（襄阳市养犬）</a></li>
                        <li class="py-2"><a href="/html/category/article-3392.htm" title="Python置换操作浅析(a, b=b, a)【Python】">Python置换操作浅析(a, b=b, a)【Python】</a></li>
                        <li class="py-2"><a href="/html/category/article-4345.htm" title="国产机油品牌有哪些牌子(国产润滑油十大名牌)">国产机油品牌有哪些牌子(国产润滑油十大名牌)</a></li>
                        <li class="py-2"><a href="/html/category/article-3413.htm" title="Centos7系统离线安装nginx步骤(亲测，超详细步骤)">Centos7系统离线安装nginx步骤(亲测，超详细步骤)</a></li>
                        <li class="py-2"><a href="/html/category/article-4090.htm" title="设计模式学习笔记责任链模式实现及在Filter中的应用详解">设计模式学习笔记责任链模式实现及在Filter中的应用详解</a></li>
                        <li class="py-2"><a href="/html/category/article-4089.htm" title="springboot 2.X Jar包部署到阿里云 配置SSL证书 启用HTTPS  通过域名访问">springboot 2.X Jar包部署到阿里云 配置SSL证书 启用HTTPS  通过域名访问</a></li>
                        <li class="py-2"><a href="/html/category/article-3445.htm" title="基于YARN HA集群的Spark HA集群">基于YARN HA集群的Spark HA集群</a></li>
                        <li class="py-2"><a href="/html/category/article-3399.htm" title="获取java泛型真实类型的方式">获取java泛型真实类型的方式</a></li>
                        <li class="py-2"><a href="/html/category/article-3397.htm" title="「Spring Boot 系列」05. Spring Boot Profiles（多环境配置）">「Spring Boot 系列」05. Spring Boot Profiles（多环境配置）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">19</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>