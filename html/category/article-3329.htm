<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3329.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>springboot：异步注解@Async的前世今生_在线工具 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">springboot：异步注解@Async的前世今生_在线工具</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<p><span style="font-size: 16px">在前边的文章中，和小伙伴一起认识了异步执行的好处，以及如何进行异步开发，对，就是使用@Async注解，在使用异步注解@Async的过程中也存在一些坑，不过通过正确的打开方式也可以很好的避免，今天想和大家分享下@Async的原理，开始前先温习下之前的文章哦，</span></p> <p><span style="font-size: 16px">springboot：异步调用@Async</span></p> <p><span style="font-size: 16px">springboot：使用异步注解@Async获取执行结果的坑</span></p> <p><span style="font-size: 16px">springboot：嵌套使用异步注解@Async还会异步执行吗</span></p> <h1><span style="font-size: 16px">一、引言</span></h1> <p><span style="font-size: 16px">在前边说到在使用@Async的时候，在一个类中两个@Async的方法嵌套使用会导致异步失败，下面把场景重现下，</span></p> <p><span style="font-size: 16px">AsyncContoller.java</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.controller;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.service.AsyncService; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.beans.factory.annotation.Autowired; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Controller; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.GetMapping; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.web.bind.annotation.ResponseBody; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.ExecutionException;  @Controller </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> AsyncController {     @Autowired     </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> AsyncService asyncService;     @GetMapping(</span>"/aysnc"<span style="color: rgba(0, 0, 0, 1)">)     @ResponseBody     </span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String asyncMethod(){         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {             Long start</span>=<span style="color: rgba(0, 0, 0, 1)">System.currentTimeMillis();             </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">调用method3方法，该方法中嵌套了一个异步方法</span>             String str3=<span style="color: rgba(0, 0, 0, 1)">asyncService.method3().get();             Long end</span>=<span style="color: rgba(0, 0, 0, 1)">System.currentTimeMillis();             System.out.println(</span>"执行时长:"+(end-<span style="color: rgba(0, 0, 0, 1)">start));         } </span><span style="color: rgba(0, 0, 255, 1)">catch</span> (ExecutionException |<span style="color: rgba(0, 0, 0, 1)"> InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> "hello @Async"<span style="color: rgba(0, 0, 0, 1)">;     } }</span></span></pre> </div> <p><span style="font-size: 16px">下面是method3方法</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.Async; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.AsyncResult; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Service; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.Future;  @Service @Async </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> AsyncService {     </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 第一个异步方法，睡眠10s返回字符串      *      * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>      <span style="color: rgba(0, 128, 0, 1)">*/</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Future<String><span style="color: rgba(0, 0, 0, 1)"> method() {         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {             Thread.sleep(</span>10 * 1000<span style="color: rgba(0, 0, 0, 1)">);         } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult("I am method"<span style="color: rgba(0, 0, 0, 1)">);     }      </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 第三个异步方法，在该异步方法中调用了另外一个异步方法      * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>      <span style="color: rgba(0, 128, 0, 1)">*/</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Future<String><span style="color: rgba(0, 0, 0, 1)"> method3(){         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">{<br>            //睡眠10s             Thread.sleep(</span>10*1000<span style="color: rgba(0, 0, 0, 1)">);             System.out.println(</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">);<br>            //method方法也是睡眠10s             </span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">.method();          }</span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult<>("two async method"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></span></pre> </div> <p><span style="font-size: 16px">上面便是method3方法，以及嵌套在method3方法中的method方法，这两个方法体上均没有标注@Async，只是在这个类上使用了@Async注解，那么该类中的所有方法都是异步的。</span></p> <p><span style="font-size: 16px">执行结果如下，</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px">2022-04-30 15:29:47.711  INFO 16836 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 4<span style="color: rgba(0, 0, 0, 1)"> ms com.example.myDemo.service.AsyncService@7e316231 执行时长:</span>20028</span></pre> </div> <p><span style="font-size: 16px">从上面可以看到整个方法的执行时长是20多秒，那么就说明这种<strong>同一个类中的嵌套调用，@Async是失效的</strong>。</span></p> <h1><span style="font-size: 16px">二、解决方式</span></h1> <h2><span style="font-size: 16px">1、把嵌套方法抽到另一个类中</span></h2> <p><span style="font-size: 16px">这种方式就是把嵌套的异步方法method抽取到另外一个类中，下面我们来看下，</span></p> <p><span style="font-size: 16px">OtherService.java</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.Async; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.AsyncResult; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Service; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.Future;  @Service @Async </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OtherAsyncService {     </span><span style="color: rgba(0, 0, 255, 1)">public</span> Future<String><span style="color: rgba(0, 0, 0, 1)"> method() {         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {             Thread.sleep(</span>10 * 1000<span style="color: rgba(0, 0, 0, 1)">);         } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult("I am method"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></span></pre> </div> <p><span style="font-size: 16px">那么AsyncService.java则变成下面的样子</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.beans.factory.annotation.Autowired; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.Async; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.AsyncResult; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.Future;  @Service @Async </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> AsyncService {     </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">注入OtherService</span> <span style="color: rgba(0, 0, 0, 1)">    @Autowired     </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> OtherAsyncService otherAsyncService;          </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 第三个异步方法，在该异步方法中调用了另外一个异步方法      * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>      <span style="color: rgba(0, 128, 0, 1)">*/</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Future<String><span style="color: rgba(0, 0, 0, 1)"> method3(){         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">{             Thread.sleep(</span>10*1000<span style="color: rgba(0, 0, 0, 1)">);             System.out.println(</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">);            </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">调用OtherAsyncService的method方法</span> <span style="color: rgba(0, 0, 0, 1)">            otherAsyncService.method();          }</span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult<>("two async method"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></span></pre> </div> <p><span style="font-size: 16px">下面看执行的结果，</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px">2022-04-30 15:44:18.914  INFO 16768 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5<span style="color: rgba(0, 0, 0, 1)"> ms com.example.myDemo.service.AsyncService@689927ef 执行时长:</span>10016</span></pre> </div> <p><span style="font-size: 16px">执行时长10s多点，符合预期。</span></p> <h2><span style="font-size: 16px">2、自己注入自己</span></h2> <p><span style="font-size: 16px">这种方式很有意思，我斗胆给它取名为“自己注入自己”，在AsyncService类中注入一个AsyncService的实例，如下</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.myDemo.service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.beans.factory.annotation.Autowired; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.Async; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.scheduling.annotation.AsyncResult; </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> org.springframework.stereotype.Service;  </span><span style="color: rgba(0, 0, 255, 1)">import</span><span style="color: rgba(0, 0, 0, 1)"> java.util.concurrent.Future;  @Service @Async </span><span style="color: rgba(0, 0, 255, 1)">public</span> <span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> AsyncService {    </span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">这里注入的是AsyncService的实例<br></span>    @Lazy <span style="color: rgba(0, 0, 0, 1)">    @Autowired     </span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> AsyncService otherAsyncService;     </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 第一个异步方法，睡眠10s返回字符串      *      * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>      <span style="color: rgba(0, 128, 0, 1)">*/</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Future<String><span style="color: rgba(0, 0, 0, 1)"> method() {         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)"> {             Thread.sleep(</span>10 * 1000<span style="color: rgba(0, 0, 0, 1)">);         } </span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult("I am method"<span style="color: rgba(0, 0, 0, 1)">);     }     </span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * 第三个异步方法，在该异步方法中调用了另外一个异步方法      * </span><span style="color: rgba(128, 128, 128, 1)">@return</span>      <span style="color: rgba(0, 128, 0, 1)">*/</span>     <span style="color: rgba(0, 0, 255, 1)">public</span> Future<String><span style="color: rgba(0, 0, 0, 1)"> method3(){         </span><span style="color: rgba(0, 0, 255, 1)">try</span><span style="color: rgba(0, 0, 0, 1)">{             Thread.sleep(</span>10*1000<span style="color: rgba(0, 0, 0, 1)">);             System.out.println(</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">);             otherAsyncService.method();          }</span><span style="color: rgba(0, 0, 255, 1)">catch</span><span style="color: rgba(0, 0, 0, 1)"> (InterruptedException e) {             e.printStackTrace();         }         </span><span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(0, 0, 255, 1)">new</span> AsyncResult<>("two async method"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></span></pre> </div> <p><span style="font-size: 16px">小伙伴们注意，我是在AsyncService类中又注入了一个AsyncService的实例，在method3方法中调用的是AsyncSerevice的方法method，要区别于下面的调用方式</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px"> <span style="color: rgba(0, 0, 255, 1)">this</span>.method();</span></pre> </div> <p><span style="font-size: 16px">下面看下执行结果，</span></p> <div class="cnblogs_code"> <pre><span style="font-size: 16px">2022-04-30 15:55:30.635  INFO 9788 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 5<span style="color: rgba(0, 0, 0, 1)"> ms com.example.myDemo.service.AsyncService@2ac186f8 执行时长:</span>10015</span></pre> </div> <p><span style="font-size: 16px">好了，我们看到执行时长为10s多点，也就是说异步是生效的，在这种方式中要注意<strong>注入的对象必须添加@Lazy注解，</strong>否则启动会报错哦。</span></p> <h1><span style="font-size: 16px">三、原理揭秘</span></h1> <p><span style="font-size: 16px">上面已经把嵌套使用的误区和解决方式已经总结完了，下面到了要揭开@Async面纱的时候了，最好的方式是debug，看下面@Async的debug的过程</span></p> <p><span style="font-size: 16px"><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/340695095f44d84449ec95ecf29327f8.jpg" alt="springboot：异步注解@Async的前世今生_在线工具"></span></p> <p><span style="font-size: 16px"> </span></p> <p><span style="font-size: 16px">可以看到在AsyncController中asyncService是一个代理对象，且使用的方式是cglib，那么也就是会把其中的方法进行代理，类似下面的代码</span></p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1); font-size: 16px">before(); method3(); after();</span></pre> </div> <p><span style="font-size: 16px">也就是对method3进行了代理，这里的代理指的是把mthod3方法封装成一个task，交给线程池去执行，那么在method3中的this.method()这句调用，也就是普通调用了，是同步的，为什么这样说，因为这里的this代表的是AsyncService这个实例对象，</span></p> <p><span style="font-size: 16px"><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/9b94c7c3b2308671170d4c8fb7775007.jpg" alt="springboot：异步注解@Async的前世今生_在线工具"></span></p> <p><span style="font-size: 16px">但是如果换成"自己注入自己的方式"，例如下图，</span></p> <p><span style="font-size: 16px"><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/ec017ba818769b82952329be5d406303.jpg" alt="springboot：异步注解@Async的前世今生_在线工具"></span></p> <p><span style="font-size: 16px">可以看到还是一个AsyncService的cglib代理对象，所以完美解决了嵌套调用的问题。</span></p> <h1><span style="font-size: 16px">四、总结</span></h1> <p><span style="font-size: 16px">本文分析了@Async注解的实现原理及如何使用正确使用嵌套调用，</span></p> <p><span style="font-size: 16px">1、@Async注解底层使用的是代理，标记为@Async所在的类在实际调用时是一个代理类；</span></p> <p><span style="font-size: 16px">2、合理使用@Async方法的嵌套，可以把嵌套方法抽到另外一个类中；</span></p> <p><span style="font-size: 16px">3、如果在本类中使用嵌套方法，那么需要自己注入自己，切记加上@Lazy注解；</span></p> <p><span style="font-size: 16px"> </span></p> <p><span style="font-size: 16px; background-color: rgba(255, 255, 255, 1); color: rgba(255, 0, 0, 1)"><strong>推荐阅读</strong></span></p> <p><span style="font-size: 16px">springboot：异步调用@Async</span></p> <p><span style="font-size: 16px">springboot：使用异步注解@Async获取执行结果的坑</span></p> <p><span style="font-size: 16px">springboot：嵌套使用异步注解@Async还会异步执行吗</span></p> <p><span style="font-size: 16px"><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/4c9168960190bc229a4cfced32748cd3.jpg" alt="springboot：异步注解@Async的前世今生_在线工具"></span></p> <p><span style="font-size: 16px"> </span></p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3328.htm">SpringBoot+Redis实现消息的发布与订阅的示例代码_java</a></p>
                                                <p>下一个：<a href="/html/category/article-3330.htm">golang关于panic的解析</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7787.htm" title="猫咪三针疫苗叫什么名字啊（猫咪三针疫苗大概多少钱）">猫咪三针疫苗叫什么名字啊（猫咪三针疫苗大概多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-7510.htm" title="宠物医师证可以自考自学吗（想考宠物执业医师资格证）">宠物医师证可以自考自学吗（想考宠物执业医师资格证）</a></li>
                        <li class="py-2"><a href="/html/category/article-7189.htm" title="徐阶比张居正多活一年（原创）徐阶和张居正谁更聪明，gannicus，张居正电视剧，">徐阶比张居正多活一年（原创）徐阶和张居正谁更聪明，gannicus，张居正电视剧，</a></li>
                        <li class="py-2"><a href="/html/category/article-6912.htm" title="自制川贝枇杷膏的做法(蜜炼川贝枇杷膏的做法)">自制川贝枇杷膏的做法(蜜炼川贝枇杷膏的做法)</a></li>
                        <li class="py-2"><a href="/html/category/article-6127.htm" title="宠物粮生产配方 宠物粮生产配方大全">宠物粮生产配方 宠物粮生产配方大全</a></li>
                        <li class="py-2"><a href="/html/category/article-7096.htm" title="哈尔滨农大动物医院电话号码（哈尔滨农大兽医院电话）">哈尔滨农大动物医院电话号码（哈尔滨农大兽医院电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-7419.htm" title="成都宠物领养平台领养可靠吗现在怎么样（成都宠物领养网免费）">成都宠物领养平台领养可靠吗现在怎么样（成都宠物领养网免费）</a></li>
                        <li class="py-2"><a href="/html/category/article-7142.htm" title="鹌鹑蛋烧排骨的做法家常做法(鹌鹑蛋烧排骨的做法大全)">鹌鹑蛋烧排骨的做法家常做法(鹌鹑蛋烧排骨的做法大全)</a></li>
                        <li class="py-2"><a href="/html/category/article-7464.htm" title="压力锅怎样做红烧肉的做法(用压力锅做红烧肉的做法窍门窍门)">压力锅怎样做红烧肉的做法(用压力锅做红烧肉的做法窍门窍门)</a></li>
                        <li class="py-2"><a href="/html/category/article-7143.htm" title="动物医院的面积不得小于多少公顷（动物医院的选址与布局实验报告）">动物医院的面积不得小于多少公顷（动物医院的选址与布局实验报告）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>