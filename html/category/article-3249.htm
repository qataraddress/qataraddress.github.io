<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3249.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Tensorflow 窗口时间序列数据的处理 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">Tensorflow 窗口时间序列数据的处理</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h1 id="tensorflow-时间序列数据的处理">Tensorflow 时间序列数据的处理</h1> <h2 id="数据集简介">数据集简介</h2> <p>数据来源：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.kaggle.com/competitions/ubiquant-market-prediction/data"  target="_blank" rel="nofollow">Kaggle&nbsp;Ubiquant Market Prediction</a></p> <p>数据集描述了多个投资项目在一个时间序列下的300个匿名特征（"f_0"至"f_299"）以及一个目标特征（"target"）。要求根据后续时间节点的匿名特征预测目标特征。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/7406dc20104fc154edc7d76dbdc68f4c.jpg" alt="Tensorflow 窗口时间序列数据的处理"></p> <p>本文的主要目标是构建特定长度的时间序列RNN网络训练和测试集。</p> <h2 id="训练集和验证集测试集的划分">训练集和验证集、测试集的划分</h2> <p>由于给出的要求是预测后续时间点的目标特征，模型的建立是基于过去的模式在将来依然存在。因此，对于这样的模型，跨时间划分训练集、验证集和测试集是合理的。数据集中给出了时间序号（"time_id"）从0开始至1219，共计3141410条。取其中百分之二作为测试集，从时间序号1201至1219。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ce42f0f5ade7172ea92321d508edb4c4.jpg" alt="Tensorflow 窗口时间序列数据的处理"></p> <h2 id="窗口序列数据的获取和应用">窗口序列数据的获取和应用</h2> <p>解决该问题的思路很简单。将该数据集中各投资项目视为独立的时间序列，可以先根据investment_id划分数据集，再在划分后的数据集上分别通过滑动窗口的方法获取定长的时间序列数据。</p> <p>但在实际应用中会遇到一些问题。首先，通过滑动窗口的方法获取的时间序列数据有较大的重复性。假设目标的时间序列长度为20，若将窗口序列数据集直接<strong>写入磁盘</strong>会占用原数据集近二十倍的空间。</p> <p>相对应的，在训练过程中完全采用<strong>实时计算</strong>获取窗口序列也不是一个可取的方法。计算窗口序列的过程会在每个epoch中重复执行，计算函数的效率直接影响到训练的速度。</p> <p>一个折中的方案是只将窗口序列中各时间点的数据在原数据集中对应的序号的记录下来作为序号数据集写入磁盘。在训练过程中通过读取原数据集和序号数据集生成batch。</p> <p>由于RNN网络允许不定长的时间序列作为输入，而非矩阵形式的批次回影响输入的效率，故通过全零填充未达到要求长度的窗口序列并为此在原数据集中插入一行全零行（注意：全零行的插入需要在标准化、归一化等预处理操作之后）。</p> <pre><code>MIN_LEN = 20 # 最小窗口序列长度，低于该长度的窗口序列会被全零行填充 FEATURE_NUM = 300 ZERO_INDEX = 3141410 # 全零行序号 def form_indexes(data,time_range): # data：原数据集 time_range:时间序列范围     id_list = sorted(data['investment_id'].unique())     if 0 in id_list:         id_list.remove(0)     indexes_list = []     for id in tqdm(id_list):                  sub_data = data[data['investment_id']==id].sort_values(by=['time_id'])         time_list = tuple(sorted(sub_data['time_id'].unique()))         for t in range(time_range[0],time_range[1]):             if t in time_list:                 i_t = time_list.index(t)                 temp = list(sub_data[max(i_t-MIN_LEN+1,0):i_t+1].index.values)                 indexes = [ZERO_INDEX]*(MIN_LEN-len(temp)) + temp     return indexes_list</code></pre> <p>在训练前构建窗口序列数据训练集和测试集（验证集）</p> <p>通过tf.data.Dataset的from_generator方法构建数据集的益处在于只有在数据被使用时（读取或预读取）才会运行生成器函数，不会占用过多内存，同时shuffle和分批次等操作都能较为简便的完成。</p> <pre><code>train_indexset= pd.read_parquet('trainindex.parquet') val_indexset= pd.read_parquet('valindex.parquet')  def gen_func(train_val_or_test): # 生成器函数     if train_val_or_test == 1:         for indexes in train_indexset.iterrows():             features = data.iloc[indexes[1].values].values[:,4:]             label = data.iloc[indexes[1].values[-1]]['target']             yield (features,label)     elif train_val_or_test == 2:         for indexes in val_indexset.iterrows():             features = data.iloc[indexes[1].values].values[:,4:]             label = data.iloc[indexes[1].values[-1]]['target']             yield (features,label)     else:         print("error input")         raise ValueError  # 指定输出的形状和数据类型 featureSpec = tf.TensorSpec(     shape=[MIN_LEN,FEATURE_NUM],     dtype=tf.dtypes.float32,     name=None )  labelSpec = tf.TensorSpec(     shape=[],     dtype=tf.dtypes.float32,     name=None )   train_data = tf.data.Dataset.from_generator(generator=gen_func,args=[1] ,output_signature=(featureSpec,labelSpec)) val_data = tf.data.Dataset.from_generator(generator=gen_func,args=[2] ,output_signature=(featureSpec,labelSpec))</code></pre> <p>以下模型和超参数只做展示用途所用，不具有指导意义。</p> <pre><code>MIN_LEN = 20 FEATURE_NUM = 300 BATCH_SIZE = 1000 EPOCH_NUM = 50   def build_RNNmodel():     model = tf.keras.models.Sequential(         [             tf.keras.layers.Masking(mask_value=0.,                                     input_shape=(MIN_LEN, FEATURE_NUM)),             tf.keras.layers.LSTM(1024,activation='tanh',                                 return_sequences=True,                                 dropout=0.5,                                 kernel_initializer=tf.initializers.TruncatedNormal(stddev=0.01),                                 ),             tf.keras.layers.LSTM(256,activation='tanh',                                 dropout=0.5,                                 kernel_initializer=tf.initializers.TruncatedNormal(stddev=0.01),                                 ),             tf.keras.layers.Dense(1,activation='relu')         ]     )     return model</code></pre> <pre><code>train_batchs = train_data.batch(batch_size=BATCH_SIZE).prefetch(BATCH_SIZE) val_batchs = val_data.batch(batch_size=BATCH_SIZE).prefetch(BATCH_SIZE) # 设置prefetch可以预读取后续批次数据提高运行速度  model = build_RNNmodel() model.compile(loss='mae', optimizer=tf.keras.optimizers.Adam(0.0001))  history = model.fit(train_batchs,epochs=EPOCH_NUM,validation_data=val_batchs)</code></pre> <p>这里只取了一部分整体数据的一部分作为演示，每个batch有1000条窗口序列，每个epoch有451个batch，运行一个epoch的时间约为530秒。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/aac534fb0f58f7c3443e5ad8be890674.jpg" alt="Tensorflow 窗口时间序列数据的处理"></p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3248.htm">Day02—Python的变量类型、变量命名、变量类型检查、变量类型转换、运算符</a></p>
                                                <p>下一个：<a href="/html/category/article-3250.htm">element UI 表格table多个数值进行排序筛选</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3376.htm" title="react18中react-redux状态管理的实现_React">react18中react-redux状态管理的实现_React</a></li>
                        <li class="py-2"><a href="/html/category/article-3446.htm" title="CSS3 弹性布局弹性流（flex-flow）属性详解和实例">CSS3 弹性布局弹性流（flex-flow）属性详解和实例</a></li>
                        <li class="py-2"><a href="/html/category/article-3445.htm" title="基于YARN HA集群的Spark HA集群">基于YARN HA集群的Spark HA集群</a></li>
                        <li class="py-2"><a href="/html/category/article-3422.htm" title="vue-cli项目添加骨架屏多种方式，自动生成骨架屏">vue-cli项目添加骨架屏多种方式，自动生成骨架屏</a></li>
                        <li class="py-2"><a href="/html/category/article-3408.htm" title="Springboot @Order注解正确用法">Springboot @Order注解正确用法</a></li>
                        <li class="py-2"><a href="/html/category/article-3409.htm" title="Hyperledger Fabric 通道配置文件和容器环境变量详解">Hyperledger Fabric 通道配置文件和容器环境变量详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3410.htm" title="innoDB如何解决幻读详解">innoDB如何解决幻读详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3384.htm" title="Parquet 之mapreduce">Parquet 之mapreduce</a></li>
                        <li class="py-2"><a href="/html/category/article-3392.htm" title="Python置换操作浅析(a, b=b, a)【Python】">Python置换操作浅析(a, b=b, a)【Python】</a></li>
                        <li class="py-2"><a href="/html/category/article-3374.htm" title="C语言多文件编程详解">C语言多文件编程详解</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>