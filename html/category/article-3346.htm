<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3346.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>基于.NetCore开发博客项目 StarBlog &#8211; (4) markdown博客批量导入_在线工具 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">基于.NetCore开发博客项目 StarBlog &#8211; (4) markdown博客批量导入_在线工具</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h2 id="系列文章">系列文章</h2> <ul> <li>基于.NetCore开发博客项目 StarBlog - (1) 为什么需要自己写一个博客？</li> <li>基于.NetCore开发博客项目 StarBlog - (2) 环境准备和创建项目</li> <li>基于.NetCore开发博客项目 StarBlog - (3) 模型设计</li> <li>基于.NetCore开发博客项目 StarBlog - (4) markdown博客批量导入</li> <li>...</li> </ul> <h2 id="前言">前言</h2> <p>上周介绍了博客的模型设计，现在模型设计好了，要开始导入数据了。</p> <p>我们要把一个文件夹内的所有markdown文件导入，目录结构作为文章的分类，文件名作为文章的标题，同时把文件的创建、更新日期作为文章的发表时间。</p> <p>大概的思路就是先用.Net的标准库遍历目录，用第三方的markdown解析库处理文章内容，然后通过ORM写入数据库。</p> <blockquote> <p>PS：明天就是五一劳动节了，祝各位无产阶级劳动者节日快乐~</p> </blockquote> <h2 id="相关技术">相关技术</h2> <ul> <li>文件IO相关API</li> <li>正则表达式</li> <li>ORM：FreeSQL</li> <li>markdown解析库：Markdig</li> </ul> <h2 id="开始写代码">开始写代码</h2> <p>我们首先从最关键的markdown内容解析、图片提取、标题处理说起。</p> <p>为了处理markdown内容，我搜了一下相关资料，发现.Net Core目前能用的只有<code>Markdig</code>这个库，由于还处在开发阶段，没有完整文档，只能边看github主页的一点点说明边自己结合例子来用。没办法，没别的好的选择，又懒得<s>（菜）</s>造轮子，只能将就了。</p> <p>Markdig官网地址：https://github.com/xoofx/markdig</p> <p>在<code>StarBlog.Migrate</code>项目里新建一个Class：<code>PostProcessor</code>，我们要在这个class里实现markdown文件相关的处理逻辑。</p> <p><code>PostProcessor.cs</code>的完整代码在这：https://github.com/Deali-Axy/StarBlog/blob/master/StarBlog.Migrate/PostProcessor.cs</p> <p>构造方法：</p> <pre><code class="language-c#">private readonly Post _post; private readonly string _importPath; private readonly string _assetsPath;  public PostProcessor(string importPath, string assetsPath, Post post) {     _post = post;     _assetsPath = assetsPath;     _importPath = importPath; }</code></pre> <p>其中</p> <ul> <li><code>Post</code>：我们上一篇里设计的文章模型</li> <li><code>importPath</code>：要导入的markdown文件夹路径</li> <li><code>assetsPath</code>：资源文件存放路径，用于存放markdown里的图片，本项目设置的路径是<code>StarBlog.Web/wwwroot/media/blog</code></li> </ul> <h3 id="文章摘要提取">文章摘要提取</h3> <p>文章摘要提取，我做了简单的处理，把markdown内容渲染成文本，然后截取前n个字形成摘要，代码如下：</p> <pre><code class="language-c#">public string GetSummary(int length) {     return _post.Content == null         ? string.Empty         : Markdown.ToPlainText(_post.Content).Limit(length); }</code></pre> <h3 id="文章状态和标题处理">文章状态和标题处理</h3> <p>之前在用本地markdown文件写博客的时候，出于个人习惯，我会在文件名里加上代表状态的前缀，例如未完成的文章是这样的：</p> <pre><code>（未完成）StarBlog博客开发笔记(4)：markdown博客批量导入</code></pre> <p>或者已完成但未发布，会加上<code>（未发布）</code></p> <p>等到发布之后，就把前缀去掉，所以在导入的时候，我要用正则表达式对这个前缀进行提取，让导入数据库的博客文章标题不要再带上前缀了。</p> <p>代码如下</p> <pre><code class="language-c#">public (string, string) InflateStatusTitle() {     const string pattern = @"^（(.+)）(.+)$";     var status = _post.Status ?? "已发布";     var title = _post.Title; 	if (string.IsNullOrEmpty(title)) return (status, $"未命名文章{_post.CreationTime.ToLongDateString()}");     var result = Regex.Match(title, pattern);     if (!result.Success) return (status, title);      status = result.Groups[1].Value;     title = result.Groups[2].Value;      _post.Status = status;     _post.Title = title;      if (!new[] { "已发表", "已发布" }.Contains(_post.Status)) {         _post.IsPublish = false;     }      return (status, title); }</code></pre> <p>逻辑很简单，判断标题是否为空（对文件名来说这不太可能，不过为了严谨一点还是做了），然后用正则匹配，匹配到了就把状态提取出来，没匹配到就默认<code>"已发布"</code>。</p> <h3 id="图片提取--替换">图片提取 & 替换</h3> <p>markdown内容处理比较复杂的就是这部分了，所以我之前就把这部分单独拿出来写了一篇文章来介绍，所以本文就不再重复太多，详情可以看我前面的这篇文章：C#解析Markdown文档，实现替换图片链接操作</p> <p>然后回到我们的博客项目，这部分的代码如下</p> <pre><code class="language-c#">public string MarkdownParse() {     if (_post.Content == null) {         return string.Empty;     }      var document = Markdown.Parse(_post.Content);      foreach (var node in document.AsEnumerable()) {         if (node is not ParagraphBlock { Inline: { } } paragraphBlock) continue;         foreach (var inline in paragraphBlock.Inline) {             if (inline is not LinkInline { IsImage: true } linkInline) continue;              if (linkInline.Url == null) continue;             if (linkInline.Url.StartsWith("http")) continue;              // 路径处理             var imgPath = Path.Combine(_importPath, _post.Path, linkInline.Url);             var imgFilename = Path.GetFileName(linkInline.Url);             var destDir = Path.Combine(_assetsPath, _post.Id);             if (!Directory.Exists(destDir)) Directory.CreateDirectory(destDir);             var destPath = Path.Combine(destDir, imgFilename);             if (File.Exists(destPath)) {                 // 图片重名处理                 var imgId = GuidUtils.GuidTo16String();                 imgFilename = $"{Path.GetFileNameWithoutExtension(imgFilename)}-{imgId}.{Path.GetExtension(imgFilename)}";                 destPath = Path.Combine(destDir, imgFilename);             }              // 替换图片链接             linkInline.Url = imgFilename;             // 复制图片             File.Copy(imgPath, destPath);              Console.WriteLine($"复制 {imgPath} 到 {destPath}");         }     }       using var writer = new StringWriter();     var render = new NormalizeRenderer(writer);     render.Render(document);     return writer.ToString(); }</code></pre> <p>实现的步骤大概是这样：</p> <ul> <li>用Markdig库的markdown解析功能</li> <li>把所有图片链接提取出来</li> <li>然后根据我们前面在构造方法中传入的<code>importPath</code>导入目录，去拼接图片的完整路径</li> <li>接着把图片复制到<code>assetsPath</code>里面</li> <li>最后把markdown中的图片地址替换为重新生成的图片文件名</li> </ul> <h3 id="小结">小结</h3> <p>目前这个方案处理大部分markdown中的图片都没问题，<strong>但是仍存在一个问题！</strong></p> <p><strong>图片文件名带空格时无法识别！</strong></p> <p>这个问题算是Markdig库的一个缺陷？吧，我尝试读了一下Markdig的代码想看看能不能fix一下，很遗憾我没读懂，所以暂时没有很好的办法，只能向官方提个issues了，这个库的更新很勤快，有希望让官方来修复这个问题。</p> <h2 id="遍历目录">遍历目录</h2> <p>前面说了关键的部分，现在来说一下比较简单的遍历目录文件，对文件IO用得很熟练的同学请跳过这部分~</p> <p>我用的是递归的方式来实现的，参考微软官方的一篇博客：https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/file-system/how-to-iterate-through-a-directory-tree</p> <p>关键代码如下，完整代码在这：https://github.com/Deali-Axy/StarBlog/blob/master/StarBlog.Migrate/Program.cs</p> <pre><code class="language-c#">void WalkDirectoryTree(DirectoryInfo root) {     Console.WriteLine($"正在扫描文件夹：{root.FullName}");      FileInfo[]? files = null;     DirectoryInfo[]? subDirs = null;      try {         files = root.GetFiles("*.md");     }     catch (UnauthorizedAccessException e) {         Console.WriteLine(e.Message);     }     catch (DirectoryNotFoundException e) {         Console.WriteLine(e.Message);     }      if (files != null) {         foreach (var fi in files) {             Console.WriteLine(fi.FullName);             // 处理文章的代码，省略         }     }      subDirs = root.GetDirectories();      foreach (var dirInfo in subDirs) {         if (exclusionDirs.Contains(dirInfo.Name)) {             continue;         }          if (dirInfo.Name.EndsWith(".assets")) {             continue;         }          WalkDirectoryTree(dirInfo);     } }</code></pre> <p>用的这个方法叫做“前序遍历”，即先处理目录下的文件，然后再处理目录下的子目录。</p> <p>递归的方法写起来比较简单，但是有一个缺陷是如果目录结构嵌套太多的话，可能会堆栈溢出，可以考虑换用基于<code>Stack<T></code>模式的遍历，不过作为博客的目录层级结构应该不会太多，所以我只用简单的~</p> <h2 id="写入数据库">写入数据库</h2> <p>本项目用到的ORM是FreeSQL，ORM操作在后续的网站开发中会有比较多的介绍，因此本文略过，文章数据写入数据库的代码很简单，可以直接看：https://github.com/Deali-Axy/StarBlog/blob/master/StarBlog.Migrate/Program.cs</p> <h2 id="结束">结束</h2> <p>OK，博客批量导入就介绍了这么多，几个麻烦的地方处理好之后也没啥难度了，有了文章数据之后，才能方便接下来开始开发博客网站~</p> <p>大概就这些了，下篇文章见~</p> <p>同时所有项目代码已经上传GitHub，欢迎各位大佬Star/Fork！</p> <ul> <li>博客后端+前台项目地址：https://github.com/Deali-Axy/StarBlog</li> <li>管理后台前端项目地址：https://github.com/Deali-Axy/StarBlog-Admin</li> </ul> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3345.htm">Docker镜像拉取报错：Error response from daemon: Get https://registry-1.docker.io/v2/</a></p>
                                                <p>下一个：<a href="/html/category/article-3347.htm">2、java mybatis 命名空间</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6729.htm" title="可以自己买疫苗去宠物店打吗（可以自己买疫苗去宠物店打吗现在）">可以自己买疫苗去宠物店打吗（可以自己买疫苗去宠物店打吗现在）</a></li>
                        <li class="py-2"><a href="/html/category/article-7419.htm" title="成都宠物领养平台领养可靠吗现在怎么样（成都宠物领养网免费）">成都宠物领养平台领养可靠吗现在怎么样（成都宠物领养网免费）</a></li>
                        <li class="py-2"><a href="/html/category/article-6082.htm" title="动物医院的英文单词是什么（动物医院英文怎么写）">动物医院的英文单词是什么（动物医院英文怎么写）</a></li>
                        <li class="py-2"><a href="/html/category/article-7373.htm" title="让猫挠了轻微出血不***有事吗血清蛋白（被猫抓伤有一点血要打蛋白吗）">让猫挠了轻微出血不***有事吗血清蛋白（被猫抓伤有一点血要打蛋白吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7280.htm" title="哈尔滨农业动物医院地址（哈尔滨农业动物医院地址电话）">哈尔滨农业动物医院地址（哈尔滨农业动物医院地址电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-6637.htm" title="领养宠物网 领养宠物网页设计代码">领养宠物网 领养宠物网页设计代码</a></li>
                        <li class="py-2"><a href="/html/category/article-7142.htm" title="鹌鹑蛋烧排骨的做法家常做法(鹌鹑蛋烧排骨的做法大全)">鹌鹑蛋烧排骨的做法家常做法(鹌鹑蛋烧排骨的做法大全)</a></li>
                        <li class="py-2"><a href="/html/category/article-7051.htm" title="开个宠物食品加工厂要多少钱呢 开个宠物食品加工厂要多少钱呢">开个宠物食品加工厂要多少钱呢 开个宠物食品加工厂要多少钱呢</a></li>
                        <li class="py-2"><a href="/html/category/article-7188.htm" title="宠物食品加工厂手续流程图片（宠物食品加工厂手续流程图片及价格）">宠物食品加工厂手续流程图片（宠物食品加工厂手续流程图片及价格）</a></li>
                        <li class="py-2"><a href="/html/category/article-6913.htm" title="动物医院需要几个执业兽医师证书 动物医院需要几个执业兽医师证书呢">动物医院需要几个执业兽医师证书 动物医院需要几个执业兽医师证书呢</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>