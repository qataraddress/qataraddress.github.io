<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3190.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>快速掌握AsyncI-新手入门 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">快速掌握AsyncI-新手入门</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h1>Python AsyncIO</h1> <blockquote> <p>asyncio是从Python 3.4+开始引入的标准库，从而支持async IO，协程(coroutine)。</p> </blockquote> <p>举个例子：假设有1个洗衣房，里面有10台洗衣机，有一个洗衣工在负责这10台洗衣机。那么洗衣房就相当于1个进程，洗衣工就相当1个线程。如果有10个洗衣工，就相当于10个线程，1个进程是可以开多线程的。这就是多线程！</p> <p>那么协程呢？先不急。大家都知道，洗衣机洗衣服是需要等待时间的，如果10个洗衣工，1人负责1台洗衣机，这样效率肯定会提高，但是不觉得浪费资源吗？明明1 个人能做的事，却要10个人来做。只是把衣服放进去，打开开关，就没事做了，等衣服洗好再拿出来就可以了。就算很多人来洗衣服，1个人也足以应付了，开好第一台洗衣机，在等待的时候去开第二台洗衣机，再开第三台，……直到有衣服洗好了，就回来把衣服取出来，接着再取另一台的（哪台洗好先就取哪台，所以协程是无序的）。这就是计算机的协程！洗衣机就是执行的方法。</p> <p><strong>当你程序中方法需要等待时间的话，就可以用协程，效率高，消耗资源少。</strong></p> <p>好了！现在来总结一下：</p> <p>洗衣房 ==> 进程</p> <p>洗衣工 ==> 线程</p> <p>洗衣机 ==> 方法（函数）</p> <h2>1. async await</h2> <p>函数前+async keyword时，实际上是创建了这个函数的wrapper，当调用这个函数时，实际上会返回一个coroutine object</p> <p>首先 正常使用async awit</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python"><span class="token operator"><</span>coroutine<span class="token builtin">object</span> main at<span class="token number">0x7feada389ec0</span><span class="token operator">></span> RuntimeWarning<span class="token punctuation">:</span> coroutine<span class="token string">'main'</span> was never awaited<span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> RuntimeWarning<span class="token punctuation">:</span> Enable tracemalloc to get the<span class="token builtin">object</span> allocation traceback</code></pre> <p>coroutine object与正常function不同，如果要等待coroutine object的执行结果，需要使用keyword<code>await</code>来等待coroutine完成返回的结果。我们来试试<code>await</code>:</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">await</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">File<span class="token string">"/Users/xxx/PycharmProjects/pythonProject/test_ansy.py"</span><span class="token punctuation">,</span> line<span class="token number">15</span><span class="token keyword">await</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">^</span> SyntaxError<span class="token punctuation">:</span><span class="token string">'await'</span> outside function</code></pre> <p>await 只能在async函数中使用。但是await要在async函数中使用，而要跑async函数，需要await等待返回结果。需要使用event-loop</p> <h2>2. Event-loop</h2> <blockquote> <p>Event-Loop是一个在程序中等待并分发事件或者消息的设计模式</p> </blockquote> <p><strong>Python coroutine需要跑在event-loop中</strong></p> <p>asyncio这个包中提供了一个asyncio.run的函数，可以作为coroutine的入口，<code>asyncio.run</code>会创建一个event-loop，然后将传递给他的coroutine object执行在这个event-loop上，通常<code>asyncio.run</code>这个函数在程序中只会被调用一次，作为coroutine的入口</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">Hello World</code></pre> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">await</span> foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"foo done"</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 当前coroutine放弃运行，等待5秒后返回</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up"</span><span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">Hello World I am foo wake up foo done</code></pre> <p><code>asyncio.new_event_loop()</code>来创建一个新的Event-Loop然后通过<code>loop.run_until_complete()</code>来启动一个coroutine</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token keyword">await</span> foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"foo done"</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up foo"</span><span class="token punctuation">)</span>  loop<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>new_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">Hello World I am foo wake up foo foo done</code></pre> <h2>3. task</h2> <p>当foo函数sleep的时候，我们不希望等待他结束，我们希望在此期间做一些别的事情，可以使用<code>asyncio.create_task</code>.asyncio.create_task 会获取当前正在运行的event-loop，然后再这个loop上schedule一个task。这个task会<strong>尽可能快的</strong>开始运行。Task是一个Future-like的object(Future后面会提到)，这个object上运行着一个coroutine，Task存在的意义在于让用户在Event-Loop上运行coroutine。那么为什么说是<strong>尽可能快的呢</strong>？先看接下来这个例子</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>     task<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"foo done"</span><span class="token punctuation">)</span><span class="token keyword">await</span> task<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up"</span><span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">Hello World foo done I am foo wake up</code></pre> <p>Surprise! “foo done"在"I am foo"之前被print了出来，这是因为create_task只是在Running Event-Loop上schedule了一个task，并没有立刻开始运行，因为main还没有暂停执行进入等待，也没执行结束，所以main会继续执行。当main执行到<code>await task</code>时，main暂停执行进入等待，下一个在Event-Loop上的task才开始执行，也就是foo。所以我们先看到了"foo done”，然后才是"I am foo"。接下来foo进入了sleep，暂停执行进入等待，而main()在等待foo的执行结果，Event-Loop上已经没有其他可以继续执行的task了，所以程序等待foo的<code>asyncio.sleep(1)</code>结束，最后print “wake up”。</p> <p>以上这种scheduling的方式叫做cooperative scheduling，一个Event-Loop在同一时间只运行一个Task。当一个Task awaits另一个Task(Future)完成时，当前Task会暂时停止执行，等待Future的结果，然后Event-Loop会让别的Task，Future callback(后面有提到)，或者IO开始执行。</p> <p>这里就要提到asyncio.Future的定义了。</p> <h2>Future</h2> <p><code>asyncio.create_task</code>的返回是task，task的定义是:</p> <pre><code class="prism language-python">asyncio<span class="token punctuation">.</span>tasks<span class="token keyword">class</span><span class="token class-name">Task</span><span class="token punctuation">(</span>Future<span class="token punctuation">[</span>_T<span class="token punctuation">]</span><span class="token punctuation">,</span> Generic<span class="token punctuation">[</span>_T<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre> <p>future是</p> <pre><code class="prism language-python">asyncio<span class="token punctuation">.</span>futures<span class="token keyword">class</span><span class="token class-name">Future</span><span class="token punctuation">(</span>Awaitable<span class="token punctuation">[</span>_T<span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">[</span>_T<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre> <p><strong>Task它继承了Future</strong>，Future代表一个async operation在未来的最终结果。要等待这个task完成返回最终结果，我们可以使用前面提到的<code>await</code> keyword，这是因为Future是<code>Awaitable</code>的。</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>     task<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">await</span> task<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"foo done"</span><span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up"</span><span class="token punctuation">)</span>  asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">Hello World I am foo wake up foo done</code></pre> <p>这里可以看到，main()中的<code>await task</code>让main等待foo执行结束后，才继续print “foo done”。</p> <p>你可能还想问，我们如何获取到task的返回结果呢？：</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     task_foo<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     task_bar<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      foo_res<span class="token operator">=</span><span class="token keyword">await</span> task_foo<span class="token keyword">await</span> task_bar<span class="token keyword">print</span><span class="token punctuation">(</span>foo_res<span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">"returns "</span><span class="token operator">+</span> text<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">for</span> i<span class="token keyword">in</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">I am foo<span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span> wake up<span class="token number">4</span><span class="token number">5</span><span class="token number">6</span><span class="token number">7</span><span class="token number">8</span><span class="token number">9</span> returns I am foo</code></pre> <p><code>res = await task</code> 可以让task的返回值被赋予到res上。</p> <p>Future同时也可以用来设置callback，当Future执行完成后，callback会被执行</p> <pre><code class="prism language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     task_foo<span class="token operator">=</span> asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>foo<span class="token punctuation">(</span><span class="token string">"I am foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     task_foo<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>callback<span class="token punctuation">)</span>     foo_res<span class="token operator">=</span><span class="token keyword">await</span> task_foo<span class="token keyword">print</span><span class="token punctuation">(</span>foo_res<span class="token punctuation">)</span><span class="token keyword">async</span><span class="token keyword">def</span><span class="token function">foo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wake up"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token string">"returns "</span><span class="token operator">+</span> text<span class="token keyword">def</span><span class="token function">callback</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Future has result:"</span><span class="token punctuation">,</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am callback"</span><span class="token punctuation">)</span>   asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> <pre><code class="prism language-python">I am foo wake up Future has result<span class="token punctuation">:</span> returns I am foo I am callback returns I am foo</code></pre> </div> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3189.htm">Python trino执行hive insert overwrite不生效的问题</a></p>
                                                <p>下一个：<a href="/html/category/article-3191.htm">C语言 模拟实现strlen函数详解_C 语言</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6127.htm" title="宠物粮生产配方 宠物粮生产配方大全">宠物粮生产配方 宠物粮生产配方大全</a></li>
                        <li class="py-2"><a href="/html/category/article-7050.htm" title="宠物粮市场前景分析图片 宠物粮市场前景分析图片大全">宠物粮市场前景分析图片 宠物粮市场前景分析图片大全</a></li>
                        <li class="py-2"><a href="/html/category/article-6913.htm" title="动物医院需要几个执业兽医师证书 动物医院需要几个执业兽医师证书呢">动物医院需要几个执业兽医师证书 动物医院需要几个执业兽医师证书呢</a></li>
                        <li class="py-2"><a href="/html/category/article-5591.htm" title="狗粮挣钱吗 狗粮赚钱吗">狗粮挣钱吗 狗粮赚钱吗</a></li>
                        <li class="py-2"><a href="/html/category/article-4571.htm" title="动物疫苗防疫站上班时间表（动物疫苗厂家电话）">动物疫苗防疫站上班时间表（动物疫苗厂家电话）</a></li>
                        <li class="py-2"><a href="/html/category/article-4391.htm" title="足球100分2021（难以置信）足球100分陆姝，吴岚，足球100分，">足球100分2021（难以置信）足球100分陆姝，吴岚，足球100分，</a></li>
                        <li class="py-2"><a href="/html/category/article-4425.htm" title="动物机体注射疫苗后产生的抗体通常存在哪里? 动物机体注射疫苗后产生的抗体通常存在哪里">动物机体注射疫苗后产生的抗体通常存在哪里? 动物机体注射疫苗后产生的抗体通常存在哪里</a></li>
                        <li class="py-2"><a href="/html/category/article-7189.htm" title="徐阶比张居正多活一年（原创）徐阶和张居正谁更聪明，gannicus，张居正电视剧，">徐阶比张居正多活一年（原创）徐阶和张居正谁更聪明，gannicus，张居正电视剧，</a></li>
                        <li class="py-2"><a href="/html/category/article-6682.htm" title="中国动物疫苗市场现状 中国动物疫苗市场现状分析">中国动物疫苗市场现状 中国动物疫苗市场现状分析</a></li>
                        <li class="py-2"><a href="/html/category/article-6637.htm" title="领养宠物网 领养宠物网页设计代码">领养宠物网 领养宠物网页设计代码</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>