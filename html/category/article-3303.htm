<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3303.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Java-GUI编程之事件处理 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">Java-GUI编程之事件处理</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h1 id="事件处理">事件处理</h1> <p>前面介绍了如何放置各种组件，从而得到了丰富多彩的图形界面，但这些界面还不能响应用户的任何操作。比如单击前面所有窗口右上角的“X”按钮，但窗口依然不会关闭。因为在 AWT 编程中 ，所有用户的操作，都必须都需要经过一套事件处理机制来完成，而 Frame 和组件本身并没有事件处理能力 。</p> <h2 id="gui事件处理机制">GUI事件处理机制</h2> <p><strong>定义：</strong></p> <p>	当在某个组件上发生某些操作的时候，会自动的触发一段代码的执行。</p> <p>在GUI事件处理机制中涉及到4个重要的概念需要理解：</p> <p><strong>事件源(Event Source)</strong> ：操作发生的场所，通常指某个组件，例如按钮、窗口等；<br /><strong>事件（Event）</strong>：在事件源上发生的操作可以叫做事件，GUI会把事件都封装到一个Event对象中，如果需要知道该事件的详细信息，就可以通过Event对象来获取。<br /><strong>事件监听器(Event Listener)</strong>:当在某个事件源上发生了某个事件，事件监听器就可以对这个事件进行处理。</p> <p><strong>注册监听</strong>：把某个事件监听器(A)通过某个事件(B)绑定到某个事件源(C)上，当在事件源C上发生了事件B之后，那么事件监听器A的代码就会自动执行。</p> <p><center><img decoding="async" src="https://pic.imgdb.cn/item/624cde5a239250f7c5ca9fe3.png" alt="Java-GUI编程之事件处理"/></center></p> <p><strong>使用步骤：</strong></p> <p>1.创建事件源组件对象；</p> <p>2.自定义类，实现XxxListener接口，重写方法；</p> <p>3.创建事件监听器对象(自定义类对象)</p> <p>4.调用事件源组件对象的addXxxListener方法完成注册监听</p> <p><strong>案例：</strong></p> <p>	完成下图效果，点击确定按钮，在单行文本域内显示 hello world:</p> <p><center><img decoding="async" src="https://pic.imgdb.cn/item/624cdf13239250f7c5cb7593.jpg" alt="Java-GUI编程之事件处理"/></center></p> <pre><code class="language-java">import java.awt.*; import java.awt.event.ActionListener; import java.awt.event.ActionEvent;  public class EventDemo1 {     Frame  frame = new Frame("这里测试事件处理");      //事件源     Button button = new Button("确定");      TextField tf = new TextField(30);     public void init(){         //注册监听         button.addActionListener(new MyActionListener());          //添加组件到frame中         frame.add(tf);         frame.add(button,BorderLayout.SOUTH);          //设置frame最佳大小并可见         frame.pack();         frame.setVisible(true);     }      //自定义事件监听器类     private  class MyActionListener implements ActionListener{          @Override         public void actionPerformed(ActionEvent e) {              System.out.println("用户点击了确定按钮");             tf.setText("hello world");         }     }          public static void main(String[] args) {         new EventDemo1().init();     } }</code></pre> <h2 id="gui中常见事件和事件监听器">GUI中常见事件和事件监听器</h2> <p>事件监听器必须实现事件监听器接口， AWT 提供了大量的事件监听器接口用于实现不同类型的事件监听器，用于监听不同类型的事件 。 AWT 中提供了丰富的事件类，用于封装不同组件上所发生的特定操作， AWT 的事件类都是 AWTEvent 类的子类 ， AWTEvent是 EventObject 的子类。</p> <h3 id="事件">事件</h3> <p>AWT把事件分为了两大类：</p> <p>	1.低级事件：这类事件是基于某个特定动作的事件。比如进入、点击、拖放等动作的鼠标事件，再比如得到焦点和失去焦点等焦点事件。</p> <table> <thead> <tr> <th>事件</th> <th>触发时机</th> </tr> </thead> <tbody> <tr> <td>ComponentEvent</td> <td>组件事件 ， 当 组件尺寸发生变化、位置发生移动、显示/隐藏状态发生改变时触发该事件。</td> </tr> <tr> <td>ContainerEvent</td> <td>容器事件 ， 当容器里发生添加组件、删除组件时触发该事件 。</td> </tr> <tr> <td>WindowEvent</td> <td>窗口事件， 当窗 口状态发生改变 ( 如打开、关闭、最大化、最 小化)时触发该事件 。</td> </tr> <tr> <td>FocusEvent</td> <td>焦点事件 ， 当组件得到焦点或失去焦点 时触发该事件 。</td> </tr> <tr> <td>KeyEvent</td> <td>键盘事件 ， 当按键被按下、松开、单击时触发该事件。</td> </tr> <tr> <td>MouseEvent</td> <td>鼠标事件，当进行单击、按下、松开、移动鼠标等动作 时触发该事件。</td> </tr> <tr> <td>PaintEvent</td> <td>组件绘制事件 ， 该事件是一个特殊的事件类型 ， 当 GUI 组件调 用 update/paint 方法 来呈现自身时触发该事件，该事件并非专用于事件处理模型 。</td> </tr> </tbody> </table> <p>	2.高级事件：这类事件并不会基于某个特定动作，而是根据功能含义定义的事件。</p> <table> <thead> <tr> <th>事件</th> <th>触发时机</th> </tr> </thead> <tbody> <tr> <td>ActionEvent</td> <td>动作事件 ，当按钮、菜单项被单击，在 TextField 中按 Enter 键时触发</td> </tr> <tr> <td>AjustmentEvent</td> <td>调节事件，在滑动条上移动滑块以调节数值时触发该事件。</td> </tr> <tr> <td>ltemEvent</td> <td>选项事件，当用户选中某项， 或取消选中某项时触发该事件 。</td> </tr> <tr> <td>TextEvent</td> <td>文本事件， 当文本框、文本域里的文本发生改变时触发该事件。</td> </tr> </tbody> </table> <h2 id="事件监听器">事件监听器</h2> <p>不同的事件需要使用不同的监听器监听，不同的监听器需要实现不同的监听器接口， 当指定事件发生后 ， 事件监听器就会调用所包含的事件处理器(实例方法)来处理事件 。</p> <table> <thead> <tr> <th>事件类别</th> <th>描述信息</th> <th>监听器接口名</th> </tr> </thead> <tbody> <tr> <td>ActionEvent</td> <td>激活组件</td> <td>ActionListener</td> </tr> <tr> <td>ItemEvent</td> <td>选择了某些项目</td> <td>ItemListener</td> </tr> <tr> <td>MouseEvent</td> <td>鼠标移动</td> <td>MouseMotionListener</td> </tr> <tr> <td>MouseEvent</td> <td>鼠标点击等</td> <td>MouseListener</td> </tr> <tr> <td>KeyEvent</td> <td>键盘输入</td> <td>KeyListener</td> </tr> <tr> <td>FocusEvent</td> <td>组件收到或失去焦点</td> <td>FocusListener</td> </tr> <tr> <td>AdjustmentEvent</td> <td>移动了滚动条等组件</td> <td>AdjustmentListener</td> </tr> <tr> <td>ComponentEvent</td> <td>对象移动缩放显示隐藏等</td> <td>ComponentListener</td> </tr> <tr> <td>WindowEvent</td> <td>窗口收到窗口级事件</td> <td>WindowListener</td> </tr> <tr> <td>ContainerEvent</td> <td>容器中增加删除了组件</td> <td>ContainerListener</td> </tr> <tr> <td>TextEvent</td> <td>文本字段或文本区发生改变</td> <td>TextListener</td> </tr> </tbody> </table> <h2 id="案例">案例</h2> <p><strong>案例一：</strong></p> <p>	通过ContainerListener监听Frame容器添加组件；</p> <p>	通过TextListener监听TextFiled内容变化；</p> <p>	通过ItemListener监听Choice条目选中状态变化；</p> <p><center><img decoding="async" src="https://pic.imgdb.cn/item/624ce0d3239250f7c5cd7df3.jpg" alt="Java-GUI编程之事件处理"/></center></p> <pre><code class="language-java">import javax.swing.*; import java.awt.*; import java.awt.event.*;  public class ListenerDemo1 {     public static void main(String[] args) {         Frame frame = new Frame("这里测试监听器");          // 创建组件（事件源）         TextField tf = new TextField(30);         Choice names = new Choice();         names.add("柳岩");         names.add("舒淇");         names.add("闫妮");          // 给文本域添加TextListener，监听内容的变化         tf.addTextListener(new TextListener() {             @Override             public void textValueChanged(TextEvent e) {                 String text = tf.getText();                 System.out.println("当前文本框中的内容为：" + text);             }         });          // 给下拉选择框添加ItemListener，监听条目选项的变化         names.addItemListener(new ItemListener() {             @Override             public void itemStateChanged(ItemEvent e) {                 Object item = e.getItem();                 System.out.println("当前选中的条目为：" + item);             }         });          // 给frame注册ContainerListener监听器，监听容器中组件的添加         frame.addContainerListener(new ContainerListener() {             @Override             public void componentAdded(ContainerEvent e) {                 Component child = e.getChild();                 System.out.println("frame中添加了：" + child);             }              @Override             public void componentRemoved(ContainerEvent e) {              }         });          // 添加到frame中         Box hBox = Box.createHorizontalBox();         hBox.add(names);         hBox.add(tf);         frame.add(hBox);          // 设置frame最佳大小并可见         frame.pack();         frame.setVisible(true);     } }</code></pre> <p><strong>案例2：</strong></p> <p>	给Frame设置WindowListner，监听用户点击 X 的动作，如果用户点击X，则关闭当前窗口</p> <p><strong>演示代码2：</strong></p> <pre><code class="language-java">import java.awt.*; import java.awt.event.WindowAdapter; import java.awt.event.WindowEvent;  public class ListenerDemo2 {      public static void main(String[] args) {          Frame frame = new Frame("这里测试WindowListener");          frame.addWindowListener(new WindowAdapter() {             public void windowClosing(WindowEvent e) {                 System.exit(0);             }         });          frame.setBounds(200,200,500,300);          frame.setVisible(true);     } }</code></pre> <p></p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3302.htm">JavaScript根据二维数组构建最大数组方法详解</a></p>
                                                <p>下一个：<a href="/html/category/article-3304.htm">右值引用，移动语义，完美转发</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3407.htm" title="关于Windows系列密码抓取">关于Windows系列密码抓取</a></li>
                        <li class="py-2"><a href="/html/category/article-3412.htm" title="sql 如何交换一个字符两侧字符的顺序_中级数据分析-SQL简单查询">sql 如何交换一个字符两侧字符的顺序_中级数据分析-SQL简单查询</a></li>
                        <li class="py-2"><a href="/html/category/article-3387.htm" title="Node.js躬行记半吊子的可视化搭建系统">Node.js躬行记半吊子的可视化搭建系统</a></li>
                        <li class="py-2"><a href="/html/category/article-4146.htm" title="python类内部成员的访问及外部访问">python类内部成员的访问及外部访问</a></li>
                        <li class="py-2"><a href="/html/category/article-3400.htm" title="Mybatis 、SpringMVC、Spring 介绍及联系">Mybatis 、SpringMVC、Spring 介绍及联系</a></li>
                        <li class="py-2"><a href="/html/category/article-3409.htm" title="Hyperledger Fabric 通道配置文件和容器环境变量详解">Hyperledger Fabric 通道配置文件和容器环境变量详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3414.htm" title="ZooKeeper之Java客户端API使用—读取数据。">ZooKeeper之Java客户端API使用—读取数据。</a></li>
                        <li class="py-2"><a href="/html/category/article-3392.htm" title="Python置换操作浅析(a, b=b, a)【Python】">Python置换操作浅析(a, b=b, a)【Python】</a></li>
                        <li class="py-2"><a href="/html/category/article-3410.htm" title="innoDB如何解决幻读详解">innoDB如何解决幻读详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3390.htm" title="springcloud-的使用alibaba版&#8212;&#8212;Nacos Discovery&#8211;服务治理">springcloud-的使用alibaba版&#8212;&#8212;Nacos Discovery&#8211;服务治理</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">4</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>