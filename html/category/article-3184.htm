<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://qataraddress.github.io/html/category/article-3184.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>golang bufio解析 - Qatar Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/qataraddress/favicon.ico" type="image/x-icon"/>
    <!-- Bootstrap -->
    <link href="/assets/addons/xcblog/css/qataraddress/bootstrap.min.css" rel="stylesheet">
    <!-- Style CSS -->
    <link href="/assets/addons/xcblog/css/qataraddress/style.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Fira+Sans:100,100i,200,200i,300,300i,400,400i,500,500i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.carousel.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/qataraddress/owl.theme.default.css" rel="stylesheet">
    <!-- FontAwesome CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/addons/xcblog/css/qataraddress/fontello.css">
    <link href="/assets/addons/xcblog/css/qataraddress/font-awesome.min.css" rel="stylesheet">
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?f2cd1f435343615e6078c743d0623024";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- top-bar -->
    <div class="top-bar">
        <div class="container">
            <div class="row">
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-12">
                    <div class="logo">
                                                <a href="/">Qatar Address</a>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.top-bar -->
    <!-- header-section-->
    <div class="header-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <!-- navigations-->
                    <div class="navigation">
                        <div id="navigation">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/html/category/">文章分类</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <!-- /.navigations-->
                </div>
            </div>
        </div>
    </div>
    <!-- /. header-section-->
    <!-- page-header -->
    <div class="page-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                    <div class="page-section">
                        <h1 class="page-title">golang bufio解析</h1>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="page-breadcrumb">
                        <ol class="breadcrumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/html/category/">文章分类</a></li>
                            <li>正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- /.page-header-->
    <!-- /.page-header-->
    <div class="space-medium">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                      				  				  				<h2 id="golang-bufio">golang bufio</h2> <div class="toc"> <div class="toc-container-header">目录</div> <ul> <li>golang bufio <ul> <li>使用bufio进行写 <ul> <li>缓存中满数据</li> <li>缓存中仍有空间</li> <li>待写入的数据大于缓存的大小</li> <li>缓存重用</li> <li>获取缓存的可用空间数</li> </ul> </li> <li>使用bufio进行读 <ul> <li>Peek</li> <li>Read</li> <li>ReadSlice</li> <li>ReadLine</li> <li>ReadBytes</li> <li>Scanner</li> </ul> </li> <li>附 <ul> <li>并发复用缓存</li> <li>限制从<code>io.Reader</code>中读取的数据量 <ul> <li>方式1</li> <li>方式2</li> </ul> </li> </ul> </li> <li>参考</li> </ul> </li> </ul> </div> <p>当频繁地对少量数据读写时会占用IO，造成性能问题。golang的<code>bufio</code>库使用缓存来一次性进行大块数据的读写，以此降低IO系统调用，提升性能。</p> <p>在Transport中可以设置一个名为<code>WriteBufferSize</code>的参数，该参数指定了底层(<code>Transport.dialConn</code>)写buffer的大小。</p> <pre><code class="language-go">	tr := &http.Transport{ 		WriteBufferSize:     64 * 1024, 	}</code></pre> <pre><code class="language-go">	pconn.br = bufio.NewReaderSize(pconn, t.readBufferSize()) 	pconn.bw = bufio.NewWriterSize(persistConnWriter{pconn}, t.writeBufferSize())</code></pre> <h3 id="使用bufio进行写">使用bufio进行写</h3> <p>可以使用<code>bufio.NewWriter</code>初始化一个大小为4096字节的<code>Writer</code>(见下)，或使用<code>bufio.NewWriterSize</code>初始化一个指定大小的<code>Writer</code>。</p> <p><code>Writer</code>中的主要参数为缓存区<code>buf</code>，缓存区中的数据偏移量<code>n</code>以及写入接口<code>wr</code>：</p> <pre><code class="language-go">type Writer struct { 	err error 	buf []byte 	n   int 	wr  io.Writer }</code></pre> <p><code>bufio.Writer</code>方法可以一次性写入缓存中的数据，通常有如下三种情况：</p> <ol> <li>缓存中满数据</li> <li>缓存中仍有空间</li> <li>待写入的数据大于缓存的大小</li> </ol> <h4 id="缓存中满数据">缓存中满数据</h4> <p>当缓存中满数据时，会执行写操作。</p> <h4 id="缓存中仍有空间">缓存中仍有空间</h4> <p>如果缓存中仍有数据，则不会执行写入动作，除非调用<code>Flush()</code>方法。</p> <h4 id="待写入的数据大于缓存的大小">待写入的数据大于缓存的大小</h4> <p>由于此时缓存无法缓存足够的数据，此时会跳过缓存直接执行写操作</p> <pre><code class="language-go">type Writer int  func (*Writer) Write(p []byte) (n int, err error) { 	fmt.Printf("Writing: %s\n", p) 	return len(p), nil }  func main() { 	w := new(Writer) 	bw1 := bufio.NewWriterSize(w, 4)  	// Case 1: Writing to buffer until full 	bw1.Write([]byte{'1'}) 	bw1.Write([]byte{'2'}) 	bw1.Write([]byte{'3'}) 	bw1.Write([]byte{'4'}) // write - buffer is full  	// Case 2: Buffer has space     bw1.Write([]byte{'5'}) //此时buffer中无法容纳更多的数据，执行写操作，写入 []byte{'1','2','3','4'} 	err = bw1.Flush() // forcefully write remaining 	if err != nil { 		panic(err) 	}  	// Case 3: (too) large write for buffer 	// Will skip buffer and write directly 	bw1.Write([]byte("12345")) //buffer不足，直接执行写操作 }  //结果： Writing: 1234 Writing: 5 Writing: 12345</code></pre> <h4 id="缓存重用">缓存重用</h4> <p>申请缓存对性能是有损耗的，可以使用<code>Reset</code>方法重置缓存，其内部只是将<code>Writer</code>的数据偏移量<code>n</code>置0。</p> <pre><code class="language-go">wr := new(Writer) bw := bufio.NewWriterSize(wr,2)  bw.Reset(wr)</code></pre> <h4 id="获取缓存的可用空间数">获取缓存的可用空间数</h4> <p><code>Available()</code>方法可以返回缓存的可用空间数，即<code>len(Writer.buf)-Writer.n</code></p> <h3 id="使用bufio进行读">使用bufio进行读</h3> <p>与用于写数据的<code>Writer</code>类似，读数据也有一个<code>Reader</code>，可以使用<code>NewReader</code>初始化一个大小为4096字节的<code>Reader</code>，或使用<code>NewReaderSize</code>初始化一个指定大小的<code>Reader</code>(要求最小字节为16)。<code>Reader</code>也有一个记录偏移量的变量<code>r</code></p> <pre><code class="language-go">type Reader struct { 	buf          []byte 	rd           io.Reader // reader provided by the client 	r, w         int       // buf read and write positions 	err          error 	lastByte     int // last byte read for UnreadByte; -1 means invalid 	lastRuneSize int // size of last rune read for UnreadRune; -1 means invalid }</code></pre> <h4 id="peek">Peek</h4> <p>该方法会返回buf中的前n个字节的内容，但与Read操作不同的是，它不会消费缓存中的数据，即不会增加数据偏移量，因此通常也会用于判断是否读取结束(EOF)。通常有如下几种情况：</p> <ol> <li>如果peak的值小于缓存大小，则返回相应的内容</li> <li>如果peak的值大于缓存大小，则返回<em>bufio.ErrBufferFull</em>错误</li> <li>如果peak的值包含EOF且小于缓存大小，则返回EOF</li> </ol> <h4 id="read">Read</h4> <p>将数据读取到<code>p</code>，涉及将数据从缓存拷贝到<code>p</code>。</p> <pre><code class="language-go">func (b *Reader) Read(p []byte) (n int, err error)</code></pre> <h4 id="readslice">ReadSlice</h4> <p>该方法会读从缓存读取数据，直到遇到第一个<code>delim</code>。如果缓存中没有<code>delim</code>，则返回EOF，如果查询的长度超过了缓存大小，则返回<code>io.ErrBufferFull</code> 错误。</p> <pre><code class="language-go">func (b *Reader) ReadSlice(delim byte) (line []byte, err error)</code></pre> <p>例如<code>delim</code>为<code>','</code>，则下面会返回的内容为<code>1234,</code>。</p> <pre><code class="language-go">func main() {     r := strings.NewReader("1234,567")     rb := bufio.NewReaderSize(r, 20)     fmt.Println(rb.ReadSlice(',')) }  // 结果：[49 50 51 52 44] <nil></code></pre> <blockquote> <p>注意：<code>ReadSlice</code>返回的是原始缓存中的内容，如果针对缓存作并发操作，则返回的内容有可能被其他操作覆盖。因此在官方注释里面有写，建议使用<code>ReadBytes</code>或<code>ReadString</code>。但<code>ReadBytes</code>和<code>ReadString</code>涉及内存申请和拷贝，因此会影响性能。在追求高性能的场景下，建议外部使用<code>sync.pool</code>来提供缓存。</p> <pre><code>// Because the data returned from ReadSlice will be overwritten // by the next I/O operation, most clients should use // ReadBytes or ReadString instead.</code></pre> </blockquote> <h4 id="readline">ReadLine</h4> <pre><code class="language-go">ReadLine() (line []byte, isPrefix bool, err error)</code></pre> <p><code>ReadLine</code>底层用到了<code>ReadSlice</code>，但在返回时会移除<code>\n</code> 或<code>\r\n</code>。需要注意的是，如果切片中没有找到换行符，则不会返回EOF或<code>io.ErrBufferFull</code> 错误，相反，它会将<code>isPrefix</code>置为<code>true</code></p> <h4 id="readbytes">ReadBytes</h4> <p>与<code>ReadSlice</code>类似，但它会返回一个新的切片，因此便于并发使用。如果找不到<code>delim</code>，<code>ReadBytes</code>会返回<code>io.EOF</code></p> <pre><code class="language-go">func (b *Reader) ReadBytes(delim byte) ([]byte, error)</code></pre> <h4 id="scanner">Scanner</h4> <p>scanner可以不断将数据读取到缓存(默认64*1024字节)。</p> <pre><code class="language-go">func main() {     rb := strings.NewReader("12345678901234567890") 	scanner := bufio.NewScanner(rb) 	for scanner.Scan() { 		fmt.Printf("Token (Scanner): %q\n", scanner.Text()) 	} }  // 结果：Token (Scanner): "12345678901234567890"</code></pre> <h3 id="附">附</h3> <h4 id="并发复用缓存">并发复用缓存</h4> <p><code>io.bufio</code>支持缓存读写以及<code>Reset</code>操作，但在并发复用缓存方面做的不是很好，可以参考：victoriaMetrics之byteBuffer。</p> <blockquote> <p>无需并发复用的话，用<code>io.bufio</code>即可。</p> </blockquote> <h4 id="限制从ioreader中读取的数据量">限制从<code>io.Reader</code>中读取的数据量</h4> <h5 id="方式1">方式1</h5> <p>使用<code>io.LimitReader</code>来限制从<code>Reader</code>中读取的数据量，<code>LimitedReader.N</code>给出了可读取的剩余数据量。一旦N变为0，即时<code>Reader</code>中仍然有数据，此时也会返回EOF</p> <pre><code class="language-go">type LimitedReader struct {    R Reader // underlying reader    N int64  // max bytes remaining }</code></pre> <pre><code class="language-go">func main() {     rb := strings.NewReader("12345678901234567890")  	lr := io.LimitReader(rb, 3)//限制可以读取3个字节的数据 	buf := make([]byte, 400) 	fmt.Println(lr.Read(buf)) //达到读取上限制，LimitedReader.N=0 	fmt.Println(lr.Read(buf)) //此时返回EOF }  //结果 3 <nil> 0 EOF</code></pre> <h5 id="方式2">方式2</h5> <p>可以使用<code>io.CopyN</code>限制从<code>Reader</code>读取的数据量，它内部也使用了<code>io.LimitReader</code>，但支持多次读取。</p> <pre><code class="language-go">type Writer int  func (*Writer) Write(p []byte) (n int, err error) { 	fmt.Printf("Writing: %s\n", p) 	return len(p), nil }  func main() {     rb := strings.NewReader("12345678901234567890")      w := new(Writer)     fmt.Println(io.CopyN(w, rb, 6))     fmt.Println(io.CopyN(w, rb, 6)) }  //结果 Writing: 123456 6 <nil> Writing: 789012 6 <nil></code></pre> <h3 id="参考">参考</h3> <p>how-to-read-and-write-with-golang-bufio</p> 			
                    <div class="clearfix"></div>
                    <div class="col-md-12 mt-5">
                                                <p>上一个：<a href="/html/category/article-3183.htm">#include＜stack＞栈的基本操作</a></p>
                                                <p>下一个：<a href="/html/category/article-3185.htm">【C/C++】alloca、malloc、calloc、realloc的区别</a></p>
                                            </div>
                                    </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7372.htm" title="枫树的一片片叶子像（枫树的叶子像一个个什么）">枫树的一片片叶子像（枫树的叶子像一个个什么）</a></li>
                        <li class="py-2"><a href="/html/category/article-7188.htm" title="宠物食品加工厂手续流程图片（宠物食品加工厂手续流程图片及价格）">宠物食品加工厂手续流程图片（宠物食品加工厂手续流程图片及价格）</a></li>
                        <li class="py-2"><a href="/html/category/article-7971.htm" title="猫咪3针疫苗可以自己打吗（猫咪打的三针疫苗多少钱）">猫咪3针疫苗可以自己打吗（猫咪打的三针疫苗多少钱）</a></li>
                        <li class="py-2"><a href="/html/category/article-8246.htm" title="济南狗狗领养免费平台有哪些（济南狗狗领养免费平台有哪些公司）">济南狗狗领养免费平台有哪些（济南狗狗领养免费平台有哪些公司）</a></li>
                        <li class="py-2"><a href="/html/category/article-8108.htm" title="都别拦着我表情包图片（学到了）">都别拦着我表情包图片（学到了）</a></li>
                        <li class="py-2"><a href="/html/category/article-8201.htm" title="一元店货源从哪里进货（一元店进货渠道）">一元店货源从哪里进货（一元店进货渠道）</a></li>
                        <li class="py-2"><a href="/html/category/article-8200.htm" title="宠物粮行业协会官网网址是什么（宠物粮生产基地都在哪）">宠物粮行业协会官网网址是什么（宠物粮生产基地都在哪）</a></li>
                        <li class="py-2"><a href="/html/category/article-8247.htm" title="小动物打针（小动物打针游戏）">小动物打针（小动物打针游戏）</a></li>
                        <li class="py-2"><a href="/html/category/article-7511.htm" title="瑞鹏宠物医院贵不贵一点（瑞鹏宠物医院医生介绍）">瑞鹏宠物医院贵不贵一点（瑞鹏宠物医院医生介绍）</a></li>
                        <li class="py-2"><a href="/html/category/article-7005.htm" title="私人手写的协议有效吗（私人协议签字按手印法律上生效吗）">私人手写的协议有效吗（私人协议签字按手印法律上生效吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">61</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
        <!-- footer -->
    <div class="footer">
        <!-- tiny-footer -->
        <div class="container">
            <div class="row">
                <div class="tiny-footer">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <p class="tiny-footer-para">
                            Qatar Address 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="tiny-section-social">
                            <div class="">
                                <ul>
                                    <li><a href="#"><i class="fa fa-facebook-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-twitter-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-google-plus-square"></i></a></li>
                                    <li><a href="#"><i class="fa fa-instagram"></i></a></li>
                                    <li><a href="#"><i class="fa fa-linkedin-square"></i></a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /. tiny-footer -->
        </div>
    </div>
    <!-- /.footer -->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.min.js" type="text/javascript"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/bootstrap.min.js" type="text/javascript"></script>
    <script src="/assets/addons/xcblog/js/frontend/qataraddress/menumaker.js" type="text/javascript"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/jquery.sticky.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/sticky-header.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/owl.carousel.min.js"></script>
    <script type="text/javascript" src="/assets/addons/xcblog/js/frontend/qataraddress/multiple-carousel.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function(){
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>